
Gurkan_Dogan270123_Semester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000119e0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c14  08011bb0  08011bb0  00021bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080127c4  080127c4  000301b0  2**0
                  CONTENTS
  4 .ARM          00000008  080127c4  080127c4  000227c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080127cc  080127cc  000301b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080127cc  080127cc  000227cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080127d0  080127d0  000227d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b0  20000000  080127d4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000521c  200001b0  08012984  000301b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200053cc  08012984  000353cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002fbb7  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000071ad  00000000  00000000  0005fd97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002330  00000000  00000000  00066f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002030  00000000  00000000  00069278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c9ca  00000000  00000000  0006b2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000302b1  00000000  00000000  00097c72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5754  00000000  00000000  000c7f23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001ad677  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000931c  00000000  00000000  001ad6c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001b0 	.word	0x200001b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011b98 	.word	0x08011b98

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001b4 	.word	0x200001b4
 800020c:	08011b98 	.word	0x08011b98

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <drawPixel>:
extern uint8_t _xstart;
extern uint8_t _ystart;


void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	80fb      	strh	r3, [r7, #6]
 800051e:	460b      	mov	r3, r1
 8000520:	80bb      	strh	r3, [r7, #4]
 8000522:	4613      	mov	r3, r2
 8000524:	807b      	strh	r3, [r7, #2]
	ST7735_DrawPixel(x, y, color);
 8000526:	88fb      	ldrh	r3, [r7, #6]
 8000528:	88b9      	ldrh	r1, [r7, #4]
 800052a:	887a      	ldrh	r2, [r7, #2]
 800052c:	4618      	mov	r0, r3
 800052e:	f000 fbe3 	bl	8000cf8 <ST7735_DrawPixel>
}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}

0800053a <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 800053a:	b590      	push	{r4, r7, lr}
 800053c:	b085      	sub	sp, #20
 800053e:	af02      	add	r7, sp, #8
 8000540:	4604      	mov	r4, r0
 8000542:	4608      	mov	r0, r1
 8000544:	4611      	mov	r1, r2
 8000546:	461a      	mov	r2, r3
 8000548:	4623      	mov	r3, r4
 800054a:	80fb      	strh	r3, [r7, #6]
 800054c:	4603      	mov	r3, r0
 800054e:	80bb      	strh	r3, [r7, #4]
 8000550:	460b      	mov	r3, r1
 8000552:	807b      	strh	r3, [r7, #2]
 8000554:	4613      	mov	r3, r2
 8000556:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8000558:	88f8      	ldrh	r0, [r7, #6]
 800055a:	88b9      	ldrh	r1, [r7, #4]
 800055c:	887a      	ldrh	r2, [r7, #2]
 800055e:	883c      	ldrh	r4, [r7, #0]
 8000560:	8b3b      	ldrh	r3, [r7, #24]
 8000562:	9300      	str	r3, [sp, #0]
 8000564:	4623      	mov	r3, r4
 8000566:	f000 fcd1 	bl	8000f0c <ST7735_FillRectangle>
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	bd90      	pop	{r4, r7, pc}

08000572 <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8000572:	b580      	push	{r7, lr}
 8000574:	b082      	sub	sp, #8
 8000576:	af00      	add	r7, sp, #0
 8000578:	4603      	mov	r3, r0
 800057a:	80fb      	strh	r3, [r7, #6]
 800057c:	460b      	mov	r3, r1
 800057e:	80bb      	strh	r3, [r7, #4]
 8000580:	4613      	mov	r3, r2
 8000582:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 8000584:	887a      	ldrh	r2, [r7, #2]
 8000586:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800058a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800058e:	4618      	mov	r0, r3
 8000590:	f7ff ffc0 	bl	8000514 <drawPixel>
}
 8000594:	bf00      	nop
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 800059c:	b590      	push	{r4, r7, lr}
 800059e:	b089      	sub	sp, #36	; 0x24
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4604      	mov	r4, r0
 80005a4:	4608      	mov	r0, r1
 80005a6:	4611      	mov	r1, r2
 80005a8:	461a      	mov	r2, r3
 80005aa:	4623      	mov	r3, r4
 80005ac:	80fb      	strh	r3, [r7, #6]
 80005ae:	4603      	mov	r3, r0
 80005b0:	80bb      	strh	r3, [r7, #4]
 80005b2:	460b      	mov	r3, r1
 80005b4:	807b      	strh	r3, [r7, #2]
 80005b6:	4613      	mov	r3, r2
 80005b8:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80005ba:	f9b7 2000 	ldrsh.w	r2, [r7]
 80005be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80005c2:	1ad3      	subs	r3, r2, r3
 80005c4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80005c8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80005cc:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80005d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005d4:	1acb      	subs	r3, r1, r3
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	bfb8      	it	lt
 80005da:	425b      	neglt	r3, r3
 80005dc:	429a      	cmp	r2, r3
 80005de:	bfcc      	ite	gt
 80005e0:	2301      	movgt	r3, #1
 80005e2:	2300      	movle	r3, #0
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	837b      	strh	r3, [r7, #26]
    if (steep) {
 80005e8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d00b      	beq.n	8000608 <writeLine+0x6c>
        _swap_int16_t(x0, y0);
 80005f0:	88fb      	ldrh	r3, [r7, #6]
 80005f2:	833b      	strh	r3, [r7, #24]
 80005f4:	88bb      	ldrh	r3, [r7, #4]
 80005f6:	80fb      	strh	r3, [r7, #6]
 80005f8:	8b3b      	ldrh	r3, [r7, #24]
 80005fa:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 80005fc:	887b      	ldrh	r3, [r7, #2]
 80005fe:	82fb      	strh	r3, [r7, #22]
 8000600:	883b      	ldrh	r3, [r7, #0]
 8000602:	807b      	strh	r3, [r7, #2]
 8000604:	8afb      	ldrh	r3, [r7, #22]
 8000606:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 8000608:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800060c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000610:	429a      	cmp	r2, r3
 8000612:	dd0b      	ble.n	800062c <writeLine+0x90>
        _swap_int16_t(x0, x1);
 8000614:	88fb      	ldrh	r3, [r7, #6]
 8000616:	82bb      	strh	r3, [r7, #20]
 8000618:	887b      	ldrh	r3, [r7, #2]
 800061a:	80fb      	strh	r3, [r7, #6]
 800061c:	8abb      	ldrh	r3, [r7, #20]
 800061e:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 8000620:	88bb      	ldrh	r3, [r7, #4]
 8000622:	827b      	strh	r3, [r7, #18]
 8000624:	883b      	ldrh	r3, [r7, #0]
 8000626:	80bb      	strh	r3, [r7, #4]
 8000628:	8a7b      	ldrh	r3, [r7, #18]
 800062a:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 800062c:	887a      	ldrh	r2, [r7, #2]
 800062e:	88fb      	ldrh	r3, [r7, #6]
 8000630:	1ad3      	subs	r3, r2, r3
 8000632:	b29b      	uxth	r3, r3
 8000634:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
 8000636:	f9b7 2000 	ldrsh.w	r2, [r7]
 800063a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800063e:	1ad3      	subs	r3, r2, r3
 8000640:	2b00      	cmp	r3, #0
 8000642:	bfb8      	it	lt
 8000644:	425b      	neglt	r3, r3
 8000646:	81fb      	strh	r3, [r7, #14]

    int16_t err = dx / 2;
 8000648:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800064c:	0fda      	lsrs	r2, r3, #31
 800064e:	4413      	add	r3, r2
 8000650:	105b      	asrs	r3, r3, #1
 8000652:	83fb      	strh	r3, [r7, #30]
    int16_t ystep;

    if (y0 < y1) {
 8000654:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000658:	f9b7 3000 	ldrsh.w	r3, [r7]
 800065c:	429a      	cmp	r2, r3
 800065e:	da02      	bge.n	8000666 <writeLine+0xca>
        ystep = 1;
 8000660:	2301      	movs	r3, #1
 8000662:	83bb      	strh	r3, [r7, #28]
 8000664:	e031      	b.n	80006ca <writeLine+0x12e>
    } else {
        ystep = -1;
 8000666:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800066a:	83bb      	strh	r3, [r7, #28]
    }

    for (; x0<=x1; x0++) {
 800066c:	e02d      	b.n	80006ca <writeLine+0x12e>
        if (steep) {
 800066e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d008      	beq.n	8000688 <writeLine+0xec>
            writePixel(y0, x0, color);
 8000676:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000678:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800067c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff ff76 	bl	8000572 <writePixel>
 8000686:	e007      	b.n	8000698 <writeLine+0xfc>
        } else {
            writePixel(x0, y0, color);
 8000688:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800068a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800068e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff ff6d 	bl	8000572 <writePixel>
        }
        err -= dy;
 8000698:	8bfa      	ldrh	r2, [r7, #30]
 800069a:	89fb      	ldrh	r3, [r7, #14]
 800069c:	1ad3      	subs	r3, r2, r3
 800069e:	b29b      	uxth	r3, r3
 80006a0:	83fb      	strh	r3, [r7, #30]
        if (err < 0) {
 80006a2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	da09      	bge.n	80006be <writeLine+0x122>
            y0 += ystep;
 80006aa:	88ba      	ldrh	r2, [r7, #4]
 80006ac:	8bbb      	ldrh	r3, [r7, #28]
 80006ae:	4413      	add	r3, r2
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	80bb      	strh	r3, [r7, #4]
            err += dx;
 80006b4:	8bfa      	ldrh	r2, [r7, #30]
 80006b6:	8a3b      	ldrh	r3, [r7, #16]
 80006b8:	4413      	add	r3, r2
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	83fb      	strh	r3, [r7, #30]
    for (; x0<=x1; x0++) {
 80006be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006c2:	b29b      	uxth	r3, r3
 80006c4:	3301      	adds	r3, #1
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	80fb      	strh	r3, [r7, #6]
 80006ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80006ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	ddcb      	ble.n	800066e <writeLine+0xd2>
        }
    }
}
 80006d6:	bf00      	nop
 80006d8:	bf00      	nop
 80006da:	3724      	adds	r7, #36	; 0x24
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd90      	pop	{r4, r7, pc}

080006e0 <drawFastHLine>:
void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
	writeLine(x, y, x, y + h - 1, color);
}
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 80006e0:	b590      	push	{r4, r7, lr}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af02      	add	r7, sp, #8
 80006e6:	4604      	mov	r4, r0
 80006e8:	4608      	mov	r0, r1
 80006ea:	4611      	mov	r1, r2
 80006ec:	461a      	mov	r2, r3
 80006ee:	4623      	mov	r3, r4
 80006f0:	80fb      	strh	r3, [r7, #6]
 80006f2:	4603      	mov	r3, r0
 80006f4:	80bb      	strh	r3, [r7, #4]
 80006f6:	460b      	mov	r3, r1
 80006f8:	807b      	strh	r3, [r7, #2]
 80006fa:	4613      	mov	r3, r2
 80006fc:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x + w - 1, y, color);
 80006fe:	88fa      	ldrh	r2, [r7, #6]
 8000700:	887b      	ldrh	r3, [r7, #2]
 8000702:	4413      	add	r3, r2
 8000704:	b29b      	uxth	r3, r3
 8000706:	3b01      	subs	r3, #1
 8000708:	b29b      	uxth	r3, r3
 800070a:	b21a      	sxth	r2, r3
 800070c:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8000710:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000714:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000718:	883b      	ldrh	r3, [r7, #0]
 800071a:	9300      	str	r3, [sp, #0]
 800071c:	4623      	mov	r3, r4
 800071e:	f7ff ff3d 	bl	800059c <writeLine>
}
 8000722:	bf00      	nop
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	bd90      	pop	{r4, r7, pc}
	...

0800072c <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af02      	add	r7, sp, #8
 8000732:	4603      	mov	r3, r0
 8000734:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <fillScreen+0x2c>)
 8000738:	f9b3 2000 	ldrsh.w	r2, [r3]
 800073c:	4b07      	ldr	r3, [pc, #28]	; (800075c <fillScreen+0x30>)
 800073e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000742:	88fb      	ldrh	r3, [r7, #6]
 8000744:	9300      	str	r3, [sp, #0]
 8000746:	460b      	mov	r3, r1
 8000748:	2100      	movs	r1, #0
 800074a:	2000      	movs	r0, #0
 800074c:	f7ff fef5 	bl	800053a <fillRect>
}
 8000750:	bf00      	nop
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	200001d4 	.word	0x200001d4
 800075c:	200001d6 	.word	0x200001d6

08000760 <USB_Keyboard_SendChar>:
extern USBD_HandleTypeDef hUsbDeviceHS;
static uint8_t HID_buffer[8] = { 0 };

// Send character as a single key press
void USB_Keyboard_SendChar(char ch)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;

	// Check if lower or upper case
	if(ch >= 'a' && ch <= 'z')
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	2b60      	cmp	r3, #96	; 0x60
 800076e:	d90b      	bls.n	8000788 <USB_Keyboard_SendChar+0x28>
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	2b7a      	cmp	r3, #122	; 0x7a
 8000774:	d808      	bhi.n	8000788 <USB_Keyboard_SendChar+0x28>
	{
		HID_buffer[0] = 0;
 8000776:	4b81      	ldr	r3, [pc, #516]	; (800097c <USB_Keyboard_SendChar+0x21c>)
 8000778:	2200      	movs	r2, #0
 800077a:	701a      	strb	r2, [r3, #0]
		// convert ch to HID letter, starting at a = 4
		HID_buffer[2] = (uint8_t)(4 + (ch - 'a'));
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	3b5d      	subs	r3, #93	; 0x5d
 8000780:	b2da      	uxtb	r2, r3
 8000782:	4b7e      	ldr	r3, [pc, #504]	; (800097c <USB_Keyboard_SendChar+0x21c>)
 8000784:	709a      	strb	r2, [r3, #2]
 8000786:	e0d1      	b.n	800092c <USB_Keyboard_SendChar+0x1cc>
	}
	else if(ch >= 'A' && ch <= 'Z')
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	2b40      	cmp	r3, #64	; 0x40
 800078c:	d90e      	bls.n	80007ac <USB_Keyboard_SendChar+0x4c>
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	2b5a      	cmp	r3, #90	; 0x5a
 8000792:	d80b      	bhi.n	80007ac <USB_Keyboard_SendChar+0x4c>
	{
		// Add left shift
		HID_buffer[0] = 2;
 8000794:	4b79      	ldr	r3, [pc, #484]	; (800097c <USB_Keyboard_SendChar+0x21c>)
 8000796:	2202      	movs	r2, #2
 8000798:	701a      	strb	r2, [r3, #0]
		// convert ch to lower case
		ch = ch - ('A'-'a');
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	3320      	adds	r3, #32
 800079e:	71fb      	strb	r3, [r7, #7]
		// convert ch to HID letter, starting at a = 4
		HID_buffer[2] = (uint8_t)(4 + (ch - 'a'));
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	3b5d      	subs	r3, #93	; 0x5d
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	4b75      	ldr	r3, [pc, #468]	; (800097c <USB_Keyboard_SendChar+0x21c>)
 80007a8:	709a      	strb	r2, [r3, #2]
 80007aa:	e0bf      	b.n	800092c <USB_Keyboard_SendChar+0x1cc>
	}
	else // not a letter
	{
		switch(ch)
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	3b0a      	subs	r3, #10
 80007b0:	2b35      	cmp	r3, #53	; 0x35
 80007b2:	f200 80b8 	bhi.w	8000926 <USB_Keyboard_SendChar+0x1c6>
 80007b6:	a201      	add	r2, pc, #4	; (adr r2, 80007bc <USB_Keyboard_SendChar+0x5c>)
 80007b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007bc:	080008a5 	.word	0x080008a5
 80007c0:	08000927 	.word	0x08000927
 80007c4:	08000927 	.word	0x08000927
 80007c8:	08000927 	.word	0x08000927
 80007cc:	08000927 	.word	0x08000927
 80007d0:	08000927 	.word	0x08000927
 80007d4:	08000927 	.word	0x08000927
 80007d8:	08000927 	.word	0x08000927
 80007dc:	08000927 	.word	0x08000927
 80007e0:	08000927 	.word	0x08000927
 80007e4:	08000927 	.word	0x08000927
 80007e8:	08000927 	.word	0x08000927
 80007ec:	08000927 	.word	0x08000927
 80007f0:	08000927 	.word	0x08000927
 80007f4:	08000927 	.word	0x08000927
 80007f8:	08000927 	.word	0x08000927
 80007fc:	08000927 	.word	0x08000927
 8000800:	08000927 	.word	0x08000927
 8000804:	08000927 	.word	0x08000927
 8000808:	08000927 	.word	0x08000927
 800080c:	08000927 	.word	0x08000927
 8000810:	08000927 	.word	0x08000927
 8000814:	08000895 	.word	0x08000895
 8000818:	080008ad 	.word	0x080008ad
 800081c:	08000927 	.word	0x08000927
 8000820:	08000927 	.word	0x08000927
 8000824:	08000927 	.word	0x08000927
 8000828:	08000927 	.word	0x08000927
 800082c:	08000927 	.word	0x08000927
 8000830:	08000927 	.word	0x08000927
 8000834:	08000927 	.word	0x08000927
 8000838:	08000927 	.word	0x08000927
 800083c:	08000927 	.word	0x08000927
 8000840:	08000927 	.word	0x08000927
 8000844:	08000927 	.word	0x08000927
 8000848:	08000927 	.word	0x08000927
 800084c:	0800089d 	.word	0x0800089d
 8000850:	08000927 	.word	0x08000927
 8000854:	0800091f 	.word	0x0800091f
 8000858:	080008d7 	.word	0x080008d7
 800085c:	080008df 	.word	0x080008df
 8000860:	080008e7 	.word	0x080008e7
 8000864:	080008ef 	.word	0x080008ef
 8000868:	080008f7 	.word	0x080008f7
 800086c:	080008ff 	.word	0x080008ff
 8000870:	08000907 	.word	0x08000907
 8000874:	0800090f 	.word	0x0800090f
 8000878:	08000917 	.word	0x08000917
 800087c:	08000927 	.word	0x08000927
 8000880:	08000927 	.word	0x08000927
 8000884:	08000927 	.word	0x08000927
 8000888:	080008c9 	.word	0x080008c9
 800088c:	08000927 	.word	0x08000927
 8000890:	080008bb 	.word	0x080008bb
		{
			case ' ':
				HID_buffer[2] = 44;
 8000894:	4b39      	ldr	r3, [pc, #228]	; (800097c <USB_Keyboard_SendChar+0x21c>)
 8000896:	222c      	movs	r2, #44	; 0x2c
 8000898:	709a      	strb	r2, [r3, #2]
				break;
 800089a:	e047      	b.n	800092c <USB_Keyboard_SendChar+0x1cc>
			case '.':
				HID_buffer[2] = 55;
 800089c:	4b37      	ldr	r3, [pc, #220]	; (800097c <USB_Keyboard_SendChar+0x21c>)
 800089e:	2237      	movs	r2, #55	; 0x37
 80008a0:	709a      	strb	r2, [r3, #2]
				break;
 80008a2:	e043      	b.n	800092c <USB_Keyboard_SendChar+0x1cc>
			case '\n':
				HID_buffer[2] = 40;
 80008a4:	4b35      	ldr	r3, [pc, #212]	; (800097c <USB_Keyboard_SendChar+0x21c>)
 80008a6:	2228      	movs	r2, #40	; 0x28
 80008a8:	709a      	strb	r2, [r3, #2]
				break;
 80008aa:	e03f      	b.n	800092c <USB_Keyboard_SendChar+0x1cc>
			case '!':
				//combination of shift modifier and key
				HID_buffer[0] = 2;	// shift
 80008ac:	4b33      	ldr	r3, [pc, #204]	; (800097c <USB_Keyboard_SendChar+0x21c>)
 80008ae:	2202      	movs	r2, #2
 80008b0:	701a      	strb	r2, [r3, #0]
				HID_buffer[2] = 30; // number 1
 80008b2:	4b32      	ldr	r3, [pc, #200]	; (800097c <USB_Keyboard_SendChar+0x21c>)
 80008b4:	221e      	movs	r2, #30
 80008b6:	709a      	strb	r2, [r3, #2]
				break;
 80008b8:	e038      	b.n	800092c <USB_Keyboard_SendChar+0x1cc>
			case '?':
				//combination of shift modifier and key
				HID_buffer[0] = 2;	// shift
 80008ba:	4b30      	ldr	r3, [pc, #192]	; (800097c <USB_Keyboard_SendChar+0x21c>)
 80008bc:	2202      	movs	r2, #2
 80008be:	701a      	strb	r2, [r3, #0]
				HID_buffer[2] = 56; // key '/'
 80008c0:	4b2e      	ldr	r3, [pc, #184]	; (800097c <USB_Keyboard_SendChar+0x21c>)
 80008c2:	2238      	movs	r2, #56	; 0x38
 80008c4:	709a      	strb	r2, [r3, #2]
				break;
 80008c6:	e031      	b.n	800092c <USB_Keyboard_SendChar+0x1cc>
			case '=':
				HID_buffer[0]=0; //shift
 80008c8:	4b2c      	ldr	r3, [pc, #176]	; (800097c <USB_Keyboard_SendChar+0x21c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	701a      	strb	r2, [r3, #0]
				HID_buffer[2]= 46;
 80008ce:	4b2b      	ldr	r3, [pc, #172]	; (800097c <USB_Keyboard_SendChar+0x21c>)
 80008d0:	222e      	movs	r2, #46	; 0x2e
 80008d2:	709a      	strb	r2, [r3, #2]
				break;
 80008d4:	e02a      	b.n	800092c <USB_Keyboard_SendChar+0x1cc>
			case '1':
				HID_buffer[2]=30;
 80008d6:	4b29      	ldr	r3, [pc, #164]	; (800097c <USB_Keyboard_SendChar+0x21c>)
 80008d8:	221e      	movs	r2, #30
 80008da:	709a      	strb	r2, [r3, #2]
				break;
 80008dc:	e026      	b.n	800092c <USB_Keyboard_SendChar+0x1cc>
			case '2':
				HID_buffer[2]=31;
 80008de:	4b27      	ldr	r3, [pc, #156]	; (800097c <USB_Keyboard_SendChar+0x21c>)
 80008e0:	221f      	movs	r2, #31
 80008e2:	709a      	strb	r2, [r3, #2]
				break;
 80008e4:	e022      	b.n	800092c <USB_Keyboard_SendChar+0x1cc>
			case '3':
				HID_buffer[2]=32;
 80008e6:	4b25      	ldr	r3, [pc, #148]	; (800097c <USB_Keyboard_SendChar+0x21c>)
 80008e8:	2220      	movs	r2, #32
 80008ea:	709a      	strb	r2, [r3, #2]
				break;
 80008ec:	e01e      	b.n	800092c <USB_Keyboard_SendChar+0x1cc>
			case '4':
				HID_buffer[2]=33;
 80008ee:	4b23      	ldr	r3, [pc, #140]	; (800097c <USB_Keyboard_SendChar+0x21c>)
 80008f0:	2221      	movs	r2, #33	; 0x21
 80008f2:	709a      	strb	r2, [r3, #2]
				break;
 80008f4:	e01a      	b.n	800092c <USB_Keyboard_SendChar+0x1cc>
			case '5':
				HID_buffer[2]=34;
 80008f6:	4b21      	ldr	r3, [pc, #132]	; (800097c <USB_Keyboard_SendChar+0x21c>)
 80008f8:	2222      	movs	r2, #34	; 0x22
 80008fa:	709a      	strb	r2, [r3, #2]
				break;
 80008fc:	e016      	b.n	800092c <USB_Keyboard_SendChar+0x1cc>
			case '6':
				HID_buffer[2]=35;
 80008fe:	4b1f      	ldr	r3, [pc, #124]	; (800097c <USB_Keyboard_SendChar+0x21c>)
 8000900:	2223      	movs	r2, #35	; 0x23
 8000902:	709a      	strb	r2, [r3, #2]
				break;
 8000904:	e012      	b.n	800092c <USB_Keyboard_SendChar+0x1cc>
			case '7':
				HID_buffer[2]=36;
 8000906:	4b1d      	ldr	r3, [pc, #116]	; (800097c <USB_Keyboard_SendChar+0x21c>)
 8000908:	2224      	movs	r2, #36	; 0x24
 800090a:	709a      	strb	r2, [r3, #2]
				break;
 800090c:	e00e      	b.n	800092c <USB_Keyboard_SendChar+0x1cc>
			case '8':
				HID_buffer[2]=37;
 800090e:	4b1b      	ldr	r3, [pc, #108]	; (800097c <USB_Keyboard_SendChar+0x21c>)
 8000910:	2225      	movs	r2, #37	; 0x25
 8000912:	709a      	strb	r2, [r3, #2]
				break;
 8000914:	e00a      	b.n	800092c <USB_Keyboard_SendChar+0x1cc>
			case '9':
				HID_buffer[2]=38;
 8000916:	4b19      	ldr	r3, [pc, #100]	; (800097c <USB_Keyboard_SendChar+0x21c>)
 8000918:	2226      	movs	r2, #38	; 0x26
 800091a:	709a      	strb	r2, [r3, #2]
				break;
 800091c:	e006      	b.n	800092c <USB_Keyboard_SendChar+0x1cc>
			case '0':
				HID_buffer[2]=39;
 800091e:	4b17      	ldr	r3, [pc, #92]	; (800097c <USB_Keyboard_SendChar+0x21c>)
 8000920:	2227      	movs	r2, #39	; 0x27
 8000922:	709a      	strb	r2, [r3, #2]
				break;
 8000924:	e002      	b.n	800092c <USB_Keyboard_SendChar+0x1cc>
			default:
				HID_buffer[2] =	0;
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <USB_Keyboard_SendChar+0x21c>)
 8000928:	2200      	movs	r2, #0
 800092a:	709a      	strb	r2, [r3, #2]
		}
	}

	// press keys
	ret = USBD_HID_SendReport(&hUsbDeviceHS, HID_buffer, 8);
 800092c:	2208      	movs	r2, #8
 800092e:	4913      	ldr	r1, [pc, #76]	; (800097c <USB_Keyboard_SendChar+0x21c>)
 8000930:	4813      	ldr	r0, [pc, #76]	; (8000980 <USB_Keyboard_SendChar+0x220>)
 8000932:	f009 fcad 	bl	800a290 <USBD_HID_SendReport>
 8000936:	4603      	mov	r3, r0
 8000938:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK)
 800093a:	7bfb      	ldrb	r3, [r7, #15]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <USB_Keyboard_SendChar+0x1e4>
	{
		Error_Handler();
 8000940:	f000 ff06 	bl	8001750 <Error_Handler>
	}
	HAL_Delay(15);
 8000944:	200f      	movs	r0, #15
 8000946:	f001 f93b 	bl	8001bc0 <HAL_Delay>

	// release keys
	HID_buffer[0] = 0;
 800094a:	4b0c      	ldr	r3, [pc, #48]	; (800097c <USB_Keyboard_SendChar+0x21c>)
 800094c:	2200      	movs	r2, #0
 800094e:	701a      	strb	r2, [r3, #0]
	HID_buffer[2] = 0;
 8000950:	4b0a      	ldr	r3, [pc, #40]	; (800097c <USB_Keyboard_SendChar+0x21c>)
 8000952:	2200      	movs	r2, #0
 8000954:	709a      	strb	r2, [r3, #2]
	ret = USBD_HID_SendReport(&hUsbDeviceHS, HID_buffer, 8);
 8000956:	2208      	movs	r2, #8
 8000958:	4908      	ldr	r1, [pc, #32]	; (800097c <USB_Keyboard_SendChar+0x21c>)
 800095a:	4809      	ldr	r0, [pc, #36]	; (8000980 <USB_Keyboard_SendChar+0x220>)
 800095c:	f009 fc98 	bl	800a290 <USBD_HID_SendReport>
 8000960:	4603      	mov	r3, r0
 8000962:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK)
 8000964:	7bfb      	ldrb	r3, [r7, #15]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <USB_Keyboard_SendChar+0x20e>
	{
		Error_Handler();
 800096a:	f000 fef1 	bl	8001750 <Error_Handler>
	}
	HAL_Delay(15);
 800096e:	200f      	movs	r0, #15
 8000970:	f001 f926 	bl	8001bc0 <HAL_Delay>
}
 8000974:	bf00      	nop
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	200001cc 	.word	0x200001cc
 8000980:	200042d4 	.word	0x200042d4

08000984 <USB_Keyboard_SendString>:

// Send string as letters
void USB_Keyboard_SendString(char * s)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	73fb      	strb	r3, [r7, #15]

	while(*(s+i))
 8000990:	e009      	b.n	80009a6 <USB_Keyboard_SendString+0x22>
	{
		USB_Keyboard_SendChar(*(s+i));
 8000992:	7bfb      	ldrb	r3, [r7, #15]
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	4413      	add	r3, r2
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff fee0 	bl	8000760 <USB_Keyboard_SendChar>
		i++;
 80009a0:	7bfb      	ldrb	r3, [r7, #15]
 80009a2:	3301      	adds	r3, #1
 80009a4:	73fb      	strb	r3, [r7, #15]
	while(*(s+i))
 80009a6:	7bfb      	ldrb	r3, [r7, #15]
 80009a8:	687a      	ldr	r2, [r7, #4]
 80009aa:	4413      	add	r3, r2
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d1ef      	bne.n	8000992 <USB_Keyboard_SendString+0xe>
	}
}
 80009b2:	bf00      	nop
 80009b4:	bf00      	nop
 80009b6:	3710      	adds	r7, #16
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2110      	movs	r1, #16
 80009c4:	4802      	ldr	r0, [pc, #8]	; (80009d0 <ST7735_Select+0x14>)
 80009c6:	f001 fc27 	bl	8002218 <HAL_GPIO_WritePin>
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40020000 	.word	0x40020000

080009d4 <ST7735_Unselect>:

void ST7735_Unselect()
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80009d8:	2201      	movs	r2, #1
 80009da:	2110      	movs	r1, #16
 80009dc:	4802      	ldr	r0, [pc, #8]	; (80009e8 <ST7735_Unselect+0x14>)
 80009de:	f001 fc1b 	bl	8002218 <HAL_GPIO_WritePin>
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40020000 	.word	0x40020000

080009ec <ST7735_Reset>:

void ST7735_Reset()
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2110      	movs	r1, #16
 80009f4:	4806      	ldr	r0, [pc, #24]	; (8000a10 <ST7735_Reset+0x24>)
 80009f6:	f001 fc0f 	bl	8002218 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80009fa:	2005      	movs	r0, #5
 80009fc:	f001 f8e0 	bl	8001bc0 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000a00:	2201      	movs	r2, #1
 8000a02:	2110      	movs	r1, #16
 8000a04:	4802      	ldr	r0, [pc, #8]	; (8000a10 <ST7735_Reset+0x24>)
 8000a06:	f001 fc07 	bl	8002218 <HAL_GPIO_WritePin>
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40021000 	.word	0x40021000

08000a14 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2104      	movs	r1, #4
 8000a22:	4807      	ldr	r0, [pc, #28]	; (8000a40 <ST7735_WriteCommand+0x2c>)
 8000a24:	f001 fbf8 	bl	8002218 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000a28:	1df9      	adds	r1, r7, #7
 8000a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2e:	2201      	movs	r2, #1
 8000a30:	4804      	ldr	r0, [pc, #16]	; (8000a44 <ST7735_WriteCommand+0x30>)
 8000a32:	f005 fcac 	bl	800638e <HAL_SPI_Transmit>
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40021000 	.word	0x40021000
 8000a44:	20000440 	.word	0x20000440

08000a48 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000a52:	2201      	movs	r2, #1
 8000a54:	2104      	movs	r1, #4
 8000a56:	4807      	ldr	r0, [pc, #28]	; (8000a74 <ST7735_WriteData+0x2c>)
 8000a58:	f001 fbde 	bl	8002218 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	b29a      	uxth	r2, r3
 8000a60:	f04f 33ff 	mov.w	r3, #4294967295
 8000a64:	6879      	ldr	r1, [r7, #4]
 8000a66:	4804      	ldr	r0, [pc, #16]	; (8000a78 <ST7735_WriteData+0x30>)
 8000a68:	f005 fc91 	bl	800638e <HAL_SPI_Transmit>
}
 8000a6c:	bf00      	nop
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40021000 	.word	0x40021000
 8000a78:	20000440 	.word	0x20000440

08000a7c <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	1c5a      	adds	r2, r3, #1
 8000a88:	607a      	str	r2, [r7, #4]
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000a8e:	e034      	b.n	8000afa <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	1c5a      	adds	r2, r3, #1
 8000a94:	607a      	str	r2, [r7, #4]
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000a9a:	7afb      	ldrb	r3, [r7, #11]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ffb9 	bl	8000a14 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	1c5a      	adds	r2, r3, #1
 8000aa6:	607a      	str	r2, [r7, #4]
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000aac:	7abb      	ldrb	r3, [r7, #10]
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ab4:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000ab6:	7abb      	ldrb	r3, [r7, #10]
 8000ab8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000abc:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000abe:	7abb      	ldrb	r3, [r7, #10]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d008      	beq.n	8000ad6 <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000ac4:	7abb      	ldrb	r3, [r7, #10]
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f7ff ffbd 	bl	8000a48 <ST7735_WriteData>
            addr += numArgs;
 8000ace:	7abb      	ldrb	r3, [r7, #10]
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000ad6:	89bb      	ldrh	r3, [r7, #12]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d00e      	beq.n	8000afa <DisplayInit+0x7e>
            ms = *addr++;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	1c5a      	adds	r2, r3, #1
 8000ae0:	607a      	str	r2, [r7, #4]
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000ae6:	89bb      	ldrh	r3, [r7, #12]
 8000ae8:	2bff      	cmp	r3, #255	; 0xff
 8000aea:	d102      	bne.n	8000af2 <DisplayInit+0x76>
 8000aec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000af0:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000af2:	89bb      	ldrh	r3, [r7, #12]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f001 f863 	bl	8001bc0 <HAL_Delay>
    while(numCommands--) {
 8000afa:	7bfb      	ldrb	r3, [r7, #15]
 8000afc:	1e5a      	subs	r2, r3, #1
 8000afe:	73fa      	strb	r2, [r7, #15]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d1c5      	bne.n	8000a90 <DisplayInit+0x14>
        }
    }
}
 8000b04:	bf00      	nop
 8000b06:	bf00      	nop
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8000b10:	b590      	push	{r4, r7, lr}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4604      	mov	r4, r0
 8000b18:	4608      	mov	r0, r1
 8000b1a:	4611      	mov	r1, r2
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4623      	mov	r3, r4
 8000b20:	71fb      	strb	r3, [r7, #7]
 8000b22:	4603      	mov	r3, r0
 8000b24:	71bb      	strb	r3, [r7, #6]
 8000b26:	460b      	mov	r3, r1
 8000b28:	717b      	strb	r3, [r7, #5]
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000b2e:	202a      	movs	r0, #42	; 0x2a
 8000b30:	f7ff ff70 	bl	8000a14 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8000b34:	2300      	movs	r3, #0
 8000b36:	733b      	strb	r3, [r7, #12]
 8000b38:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <ST7735_SetAddressWindow+0x88>)
 8000b3a:	781a      	ldrb	r2, [r3, #0]
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	4413      	add	r3, r2
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	737b      	strb	r3, [r7, #13]
 8000b44:	2300      	movs	r3, #0
 8000b46:	73bb      	strb	r3, [r7, #14]
 8000b48:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <ST7735_SetAddressWindow+0x88>)
 8000b4a:	781a      	ldrb	r2, [r3, #0]
 8000b4c:	797b      	ldrb	r3, [r7, #5]
 8000b4e:	4413      	add	r3, r2
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000b54:	f107 030c 	add.w	r3, r7, #12
 8000b58:	2104      	movs	r1, #4
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff ff74 	bl	8000a48 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000b60:	202b      	movs	r0, #43	; 0x2b
 8000b62:	f7ff ff57 	bl	8000a14 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8000b66:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <ST7735_SetAddressWindow+0x8c>)
 8000b68:	781a      	ldrb	r2, [r3, #0]
 8000b6a:	79bb      	ldrb	r3, [r7, #6]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8000b72:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <ST7735_SetAddressWindow+0x8c>)
 8000b74:	781a      	ldrb	r2, [r3, #0]
 8000b76:	793b      	ldrb	r3, [r7, #4]
 8000b78:	4413      	add	r3, r2
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000b7e:	f107 030c 	add.w	r3, r7, #12
 8000b82:	2104      	movs	r1, #4
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ff5f 	bl	8000a48 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000b8a:	202c      	movs	r0, #44	; 0x2c
 8000b8c:	f7ff ff42 	bl	8000a14 <ST7735_WriteCommand>
}
 8000b90:	bf00      	nop
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd90      	pop	{r4, r7, pc}
 8000b98:	200001db 	.word	0x200001db
 8000b9c:	200001dc 	.word	0x200001dc

08000ba0 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 8000baa:	f7ff ff07 	bl	80009bc <ST7735_Select>
    ST7735_Reset();
 8000bae:	f7ff ff1d 	bl	80009ec <ST7735_Reset>
    DisplayInit(init_cmds1);
 8000bb2:	480c      	ldr	r0, [pc, #48]	; (8000be4 <ST7735_Init+0x44>)
 8000bb4:	f7ff ff62 	bl	8000a7c <DisplayInit>
    DisplayInit(init_cmds2);
 8000bb8:	480b      	ldr	r0, [pc, #44]	; (8000be8 <ST7735_Init+0x48>)
 8000bba:	f7ff ff5f 	bl	8000a7c <DisplayInit>
    DisplayInit(init_cmds3);
 8000bbe:	480b      	ldr	r0, [pc, #44]	; (8000bec <ST7735_Init+0x4c>)
 8000bc0:	f7ff ff5c 	bl	8000a7c <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <ST7735_Init+0x50>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 8000bca:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <ST7735_Init+0x54>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f000 f810 	bl	8000bf8 <ST7735_SetRotation>
    ST7735_Unselect();
 8000bd8:	f7ff fefc 	bl	80009d4 <ST7735_Unselect>

}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	08011cbc 	.word	0x08011cbc
 8000be8:	08011cf4 	.word	0x08011cf4
 8000bec:	08011d04 	.word	0x08011d04
 8000bf0:	200001d9 	.word	0x200001d9
 8000bf4:	200001da 	.word	0x200001da

08000bf8 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	f003 0303 	and.w	r3, r3, #3
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	4b33      	ldr	r3, [pc, #204]	; (8000cdc <ST7735_SetRotation+0xe4>)
 8000c10:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8000c12:	4b32      	ldr	r3, [pc, #200]	; (8000cdc <ST7735_SetRotation+0xe4>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b03      	cmp	r3, #3
 8000c18:	d84e      	bhi.n	8000cb8 <ST7735_SetRotation+0xc0>
 8000c1a:	a201      	add	r2, pc, #4	; (adr r2, 8000c20 <ST7735_SetRotation+0x28>)
 8000c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c20:	08000c31 	.word	0x08000c31
 8000c24:	08000c53 	.word	0x08000c53
 8000c28:	08000c75 	.word	0x08000c75
 8000c2c:	08000c97 	.word	0x08000c97
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8000c30:	23c0      	movs	r3, #192	; 0xc0
 8000c32:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000c34:	4b2a      	ldr	r3, [pc, #168]	; (8000ce0 <ST7735_SetRotation+0xe8>)
 8000c36:	22a0      	movs	r2, #160	; 0xa0
 8000c38:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000c3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ce4 <ST7735_SetRotation+0xec>)
 8000c3c:	2280      	movs	r2, #128	; 0x80
 8000c3e:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8000c40:	4b29      	ldr	r3, [pc, #164]	; (8000ce8 <ST7735_SetRotation+0xf0>)
 8000c42:	781a      	ldrb	r2, [r3, #0]
 8000c44:	4b29      	ldr	r3, [pc, #164]	; (8000cec <ST7735_SetRotation+0xf4>)
 8000c46:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8000c48:	4b29      	ldr	r3, [pc, #164]	; (8000cf0 <ST7735_SetRotation+0xf8>)
 8000c4a:	781a      	ldrb	r2, [r3, #0]
 8000c4c:	4b29      	ldr	r3, [pc, #164]	; (8000cf4 <ST7735_SetRotation+0xfc>)
 8000c4e:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000c50:	e032      	b.n	8000cb8 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000c52:	23a0      	movs	r3, #160	; 0xa0
 8000c54:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000c56:	4b23      	ldr	r3, [pc, #140]	; (8000ce4 <ST7735_SetRotation+0xec>)
 8000c58:	22a0      	movs	r2, #160	; 0xa0
 8000c5a:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000c5c:	4b20      	ldr	r3, [pc, #128]	; (8000ce0 <ST7735_SetRotation+0xe8>)
 8000c5e:	2280      	movs	r2, #128	; 0x80
 8000c60:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000c62:	4b21      	ldr	r3, [pc, #132]	; (8000ce8 <ST7735_SetRotation+0xf0>)
 8000c64:	781a      	ldrb	r2, [r3, #0]
 8000c66:	4b23      	ldr	r3, [pc, #140]	; (8000cf4 <ST7735_SetRotation+0xfc>)
 8000c68:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000c6a:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <ST7735_SetRotation+0xf8>)
 8000c6c:	781a      	ldrb	r2, [r3, #0]
 8000c6e:	4b1f      	ldr	r3, [pc, #124]	; (8000cec <ST7735_SetRotation+0xf4>)
 8000c70:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000c72:	e021      	b.n	8000cb8 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8000c74:	2300      	movs	r3, #0
 8000c76:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000c78:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <ST7735_SetRotation+0xe8>)
 8000c7a:	22a0      	movs	r2, #160	; 0xa0
 8000c7c:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000c7e:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <ST7735_SetRotation+0xec>)
 8000c80:	2280      	movs	r2, #128	; 0x80
 8000c82:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8000c84:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <ST7735_SetRotation+0xf0>)
 8000c86:	781a      	ldrb	r2, [r3, #0]
 8000c88:	4b18      	ldr	r3, [pc, #96]	; (8000cec <ST7735_SetRotation+0xf4>)
 8000c8a:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8000c8c:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <ST7735_SetRotation+0xf8>)
 8000c8e:	781a      	ldrb	r2, [r3, #0]
 8000c90:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <ST7735_SetRotation+0xfc>)
 8000c92:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000c94:	e010      	b.n	8000cb8 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000c96:	2360      	movs	r3, #96	; 0x60
 8000c98:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000c9a:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <ST7735_SetRotation+0xec>)
 8000c9c:	22a0      	movs	r2, #160	; 0xa0
 8000c9e:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <ST7735_SetRotation+0xe8>)
 8000ca2:	2280      	movs	r2, #128	; 0x80
 8000ca4:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <ST7735_SetRotation+0xf0>)
 8000ca8:	781a      	ldrb	r2, [r3, #0]
 8000caa:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <ST7735_SetRotation+0xfc>)
 8000cac:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000cae:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <ST7735_SetRotation+0xf8>)
 8000cb0:	781a      	ldrb	r2, [r3, #0]
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <ST7735_SetRotation+0xf4>)
 8000cb4:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000cb6:	bf00      	nop
  }
  ST7735_Select();
 8000cb8:	f7ff fe80 	bl	80009bc <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8000cbc:	2036      	movs	r0, #54	; 0x36
 8000cbe:	f7ff fea9 	bl	8000a14 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8000cc2:	f107 030f 	add.w	r3, r7, #15
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff febd 	bl	8000a48 <ST7735_WriteData>
  ST7735_Unselect();
 8000cce:	f7ff fe81 	bl	80009d4 <ST7735_Unselect>
}
 8000cd2:	bf00      	nop
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200001d8 	.word	0x200001d8
 8000ce0:	200001d6 	.word	0x200001d6
 8000ce4:	200001d4 	.word	0x200001d4
 8000ce8:	200001d9 	.word	0x200001d9
 8000cec:	200001db 	.word	0x200001db
 8000cf0:	200001da 	.word	0x200001da
 8000cf4:	200001dc 	.word	0x200001dc

08000cf8 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	80fb      	strh	r3, [r7, #6]
 8000d02:	460b      	mov	r3, r1
 8000d04:	80bb      	strh	r3, [r7, #4]
 8000d06:	4613      	mov	r3, r2
 8000d08:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 8000d0a:	88fb      	ldrh	r3, [r7, #6]
 8000d0c:	4a17      	ldr	r2, [pc, #92]	; (8000d6c <ST7735_DrawPixel+0x74>)
 8000d0e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000d12:	4293      	cmp	r3, r2
 8000d14:	da26      	bge.n	8000d64 <ST7735_DrawPixel+0x6c>
 8000d16:	88bb      	ldrh	r3, [r7, #4]
 8000d18:	4a15      	ldr	r2, [pc, #84]	; (8000d70 <ST7735_DrawPixel+0x78>)
 8000d1a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	da20      	bge.n	8000d64 <ST7735_DrawPixel+0x6c>
        return;

    ST7735_Select();
 8000d22:	f7ff fe4b 	bl	80009bc <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8000d26:	88fb      	ldrh	r3, [r7, #6]
 8000d28:	b2d8      	uxtb	r0, r3
 8000d2a:	88bb      	ldrh	r3, [r7, #4]
 8000d2c:	b2d9      	uxtb	r1, r3
 8000d2e:	88fb      	ldrh	r3, [r7, #6]
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	3301      	adds	r3, #1
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	88bb      	ldrh	r3, [r7, #4]
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	f7ff fee7 	bl	8000b10 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8000d42:	887b      	ldrh	r3, [r7, #2]
 8000d44:	0a1b      	lsrs	r3, r3, #8
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	733b      	strb	r3, [r7, #12]
 8000d4c:	887b      	ldrh	r3, [r7, #2]
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 8000d52:	f107 030c 	add.w	r3, r7, #12
 8000d56:	2102      	movs	r1, #2
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fe75 	bl	8000a48 <ST7735_WriteData>

    ST7735_Unselect();
 8000d5e:	f7ff fe39 	bl	80009d4 <ST7735_Unselect>
 8000d62:	e000      	b.n	8000d66 <ST7735_DrawPixel+0x6e>
        return;
 8000d64:	bf00      	nop
}
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	200001d4 	.word	0x200001d4
 8000d70:	200001d6 	.word	0x200001d6

08000d74 <ST7735_WriteChar>:

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000d74:	b082      	sub	sp, #8
 8000d76:	b590      	push	{r4, r7, lr}
 8000d78:	b089      	sub	sp, #36	; 0x24
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	637b      	str	r3, [r7, #52]	; 0x34
 8000d7e:	4603      	mov	r3, r0
 8000d80:	80fb      	strh	r3, [r7, #6]
 8000d82:	460b      	mov	r3, r1
 8000d84:	80bb      	strh	r3, [r7, #4]
 8000d86:	4613      	mov	r3, r2
 8000d88:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000d8a:	88fb      	ldrh	r3, [r7, #6]
 8000d8c:	b2d8      	uxtb	r0, r3
 8000d8e:	88bb      	ldrh	r3, [r7, #4]
 8000d90:	b2d9      	uxtb	r1, r3
 8000d92:	88fb      	ldrh	r3, [r7, #6]
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000d9a:	4413      	add	r3, r2
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	b2dc      	uxtb	r4, r3
 8000da2:	88bb      	ldrh	r3, [r7, #4]
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000daa:	4413      	add	r3, r2
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	3b01      	subs	r3, #1
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	4622      	mov	r2, r4
 8000db4:	f7ff feac 	bl	8000b10 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]
 8000dbc:	e043      	b.n	8000e46 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8000dbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000dc0:	78fb      	ldrb	r3, [r7, #3]
 8000dc2:	3b20      	subs	r3, #32
 8000dc4:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000dc8:	fb01 f303 	mul.w	r3, r1, r3
 8000dcc:	4619      	mov	r1, r3
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	440b      	add	r3, r1
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	4413      	add	r3, r2
 8000dd6:	881b      	ldrh	r3, [r3, #0]
 8000dd8:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61bb      	str	r3, [r7, #24]
 8000dde:	e029      	b.n	8000e34 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8000de0:	697a      	ldr	r2, [r7, #20]
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d00e      	beq.n	8000e0e <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000df0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000df2:	0a1b      	lsrs	r3, r3, #8
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	743b      	strb	r3, [r7, #16]
 8000dfa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000e00:	f107 0310 	add.w	r3, r7, #16
 8000e04:	2102      	movs	r1, #2
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fe1e 	bl	8000a48 <ST7735_WriteData>
 8000e0c:	e00f      	b.n	8000e2e <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000e0e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000e12:	0a1b      	lsrs	r3, r3, #8
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	733b      	strb	r3, [r7, #12]
 8000e1a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000e22:	f107 030c 	add.w	r3, r7, #12
 8000e26:	2102      	movs	r1, #2
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff fe0d 	bl	8000a48 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	3301      	adds	r3, #1
 8000e32:	61bb      	str	r3, [r7, #24]
 8000e34:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000e38:	461a      	mov	r2, r3
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d3cf      	bcc.n	8000de0 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	3301      	adds	r3, #1
 8000e44:	61fb      	str	r3, [r7, #28]
 8000e46:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d3b5      	bcc.n	8000dbe <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000e52:	bf00      	nop
 8000e54:	bf00      	nop
 8000e56:	3724      	adds	r7, #36	; 0x24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000e5e:	b002      	add	sp, #8
 8000e60:	4770      	bx	lr
	...

08000e64 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000e64:	b082      	sub	sp, #8
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b086      	sub	sp, #24
 8000e6a:	af04      	add	r7, sp, #16
 8000e6c:	603a      	str	r2, [r7, #0]
 8000e6e:	617b      	str	r3, [r7, #20]
 8000e70:	4603      	mov	r3, r0
 8000e72:	80fb      	strh	r3, [r7, #6]
 8000e74:	460b      	mov	r3, r1
 8000e76:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000e78:	f7ff fda0 	bl	80009bc <ST7735_Select>

    while(*str) {
 8000e7c:	e033      	b.n	8000ee6 <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8000e7e:	88fb      	ldrh	r3, [r7, #6]
 8000e80:	7d3a      	ldrb	r2, [r7, #20]
 8000e82:	4413      	add	r3, r2
 8000e84:	4a1f      	ldr	r2, [pc, #124]	; (8000f04 <ST7735_WriteString+0xa0>)
 8000e86:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	db16      	blt.n	8000ebc <ST7735_WriteString+0x58>
            x = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000e92:	7d7b      	ldrb	r3, [r7, #21]
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	88bb      	ldrh	r3, [r7, #4]
 8000e98:	4413      	add	r3, r2
 8000e9a:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 8000e9c:	88bb      	ldrh	r3, [r7, #4]
 8000e9e:	7d7a      	ldrb	r2, [r7, #21]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	4a19      	ldr	r2, [pc, #100]	; (8000f08 <ST7735_WriteString+0xa4>)
 8000ea4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	da21      	bge.n	8000ef0 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b20      	cmp	r3, #32
 8000eb2:	d103      	bne.n	8000ebc <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	603b      	str	r3, [r7, #0]
                continue;
 8000eba:	e014      	b.n	8000ee6 <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	781a      	ldrb	r2, [r3, #0]
 8000ec0:	88b9      	ldrh	r1, [r7, #4]
 8000ec2:	88f8      	ldrh	r0, [r7, #6]
 8000ec4:	8c3b      	ldrh	r3, [r7, #32]
 8000ec6:	9302      	str	r3, [sp, #8]
 8000ec8:	8bbb      	ldrh	r3, [r7, #28]
 8000eca:	9301      	str	r3, [sp, #4]
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	9300      	str	r3, [sp, #0]
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	f7ff ff4f 	bl	8000d74 <ST7735_WriteChar>
        x += font.width;
 8000ed6:	7d3b      	ldrb	r3, [r7, #20]
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	88fb      	ldrh	r3, [r7, #6]
 8000edc:	4413      	add	r3, r2
 8000ede:	80fb      	strh	r3, [r7, #6]
        str++;
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d1c7      	bne.n	8000e7e <ST7735_WriteString+0x1a>
 8000eee:	e000      	b.n	8000ef2 <ST7735_WriteString+0x8e>
                break;
 8000ef0:	bf00      	nop
    }

    ST7735_Unselect();
 8000ef2:	f7ff fd6f 	bl	80009d4 <ST7735_Unselect>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f00:	b002      	add	sp, #8
 8000f02:	4770      	bx	lr
 8000f04:	200001d4 	.word	0x200001d4
 8000f08:	200001d6 	.word	0x200001d6

08000f0c <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000f0c:	b590      	push	{r4, r7, lr}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4604      	mov	r4, r0
 8000f14:	4608      	mov	r0, r1
 8000f16:	4611      	mov	r1, r2
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4623      	mov	r3, r4
 8000f1c:	80fb      	strh	r3, [r7, #6]
 8000f1e:	4603      	mov	r3, r0
 8000f20:	80bb      	strh	r3, [r7, #4]
 8000f22:	460b      	mov	r3, r1
 8000f24:	807b      	strh	r3, [r7, #2]
 8000f26:	4613      	mov	r3, r2
 8000f28:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8000f2a:	88fb      	ldrh	r3, [r7, #6]
 8000f2c:	4a37      	ldr	r2, [pc, #220]	; (800100c <ST7735_FillRectangle+0x100>)
 8000f2e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000f32:	4293      	cmp	r3, r2
 8000f34:	da66      	bge.n	8001004 <ST7735_FillRectangle+0xf8>
 8000f36:	88bb      	ldrh	r3, [r7, #4]
 8000f38:	4a35      	ldr	r2, [pc, #212]	; (8001010 <ST7735_FillRectangle+0x104>)
 8000f3a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	da60      	bge.n	8001004 <ST7735_FillRectangle+0xf8>
    if((x + w - 1) >= _width) w = _width - x;
 8000f42:	88fa      	ldrh	r2, [r7, #6]
 8000f44:	887b      	ldrh	r3, [r7, #2]
 8000f46:	4413      	add	r3, r2
 8000f48:	4a30      	ldr	r2, [pc, #192]	; (800100c <ST7735_FillRectangle+0x100>)
 8000f4a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	dd06      	ble.n	8000f60 <ST7735_FillRectangle+0x54>
 8000f52:	4b2e      	ldr	r3, [pc, #184]	; (800100c <ST7735_FillRectangle+0x100>)
 8000f54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	88fb      	ldrh	r3, [r7, #6]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8000f60:	88ba      	ldrh	r2, [r7, #4]
 8000f62:	883b      	ldrh	r3, [r7, #0]
 8000f64:	4413      	add	r3, r2
 8000f66:	4a2a      	ldr	r2, [pc, #168]	; (8001010 <ST7735_FillRectangle+0x104>)
 8000f68:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	dd06      	ble.n	8000f7e <ST7735_FillRectangle+0x72>
 8000f70:	4b27      	ldr	r3, [pc, #156]	; (8001010 <ST7735_FillRectangle+0x104>)
 8000f72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f76:	b29a      	uxth	r2, r3
 8000f78:	88bb      	ldrh	r3, [r7, #4]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000f7e:	f7ff fd1d 	bl	80009bc <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000f82:	88fb      	ldrh	r3, [r7, #6]
 8000f84:	b2d8      	uxtb	r0, r3
 8000f86:	88bb      	ldrh	r3, [r7, #4]
 8000f88:	b2d9      	uxtb	r1, r3
 8000f8a:	88fb      	ldrh	r3, [r7, #6]
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	887b      	ldrh	r3, [r7, #2]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	4413      	add	r3, r2
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	3b01      	subs	r3, #1
 8000f98:	b2dc      	uxtb	r4, r3
 8000f9a:	88bb      	ldrh	r3, [r7, #4]
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	883b      	ldrh	r3, [r7, #0]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	4413      	add	r3, r2
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	4622      	mov	r2, r4
 8000fac:	f7ff fdb0 	bl	8000b10 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000fb0:	8c3b      	ldrh	r3, [r7, #32]
 8000fb2:	0a1b      	lsrs	r3, r3, #8
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	733b      	strb	r3, [r7, #12]
 8000fba:	8c3b      	ldrh	r3, [r7, #32]
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	2104      	movs	r1, #4
 8000fc4:	4813      	ldr	r0, [pc, #76]	; (8001014 <ST7735_FillRectangle+0x108>)
 8000fc6:	f001 f927 	bl	8002218 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000fca:	883b      	ldrh	r3, [r7, #0]
 8000fcc:	80bb      	strh	r3, [r7, #4]
 8000fce:	e013      	b.n	8000ff8 <ST7735_FillRectangle+0xec>
        for(x = w; x > 0; x--) {
 8000fd0:	887b      	ldrh	r3, [r7, #2]
 8000fd2:	80fb      	strh	r3, [r7, #6]
 8000fd4:	e00a      	b.n	8000fec <ST7735_FillRectangle+0xe0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000fd6:	f107 010c 	add.w	r1, r7, #12
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
 8000fde:	2202      	movs	r2, #2
 8000fe0:	480d      	ldr	r0, [pc, #52]	; (8001018 <ST7735_FillRectangle+0x10c>)
 8000fe2:	f005 f9d4 	bl	800638e <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000fe6:	88fb      	ldrh	r3, [r7, #6]
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	80fb      	strh	r3, [r7, #6]
 8000fec:	88fb      	ldrh	r3, [r7, #6]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d1f1      	bne.n	8000fd6 <ST7735_FillRectangle+0xca>
    for(y = h; y > 0; y--) {
 8000ff2:	88bb      	ldrh	r3, [r7, #4]
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	80bb      	strh	r3, [r7, #4]
 8000ff8:	88bb      	ldrh	r3, [r7, #4]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d1e8      	bne.n	8000fd0 <ST7735_FillRectangle+0xc4>
        }
    }

    ST7735_Unselect();
 8000ffe:	f7ff fce9 	bl	80009d4 <ST7735_Unselect>
 8001002:	e000      	b.n	8001006 <ST7735_FillRectangle+0xfa>
    if((x >= _width) || (y >= _height)) return;
 8001004:	bf00      	nop
}
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	bd90      	pop	{r4, r7, pc}
 800100c:	200001d4 	.word	0x200001d4
 8001010:	200001d6 	.word	0x200001d6
 8001014:	40021000 	.word	0x40021000
 8001018:	20000440 	.word	0x20000440

0800101c <HAL_GPIO_EXTI_Callback>:
 * PA0 is ENTER
 * PA1 is DOWN
 * PA4 is UP
 *******/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0)  // If the PA0 (ENTER) is pressed
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d108      	bne.n	800103e <HAL_GPIO_EXTI_Callback+0x22>
	{
		downbutton = 0;  // downbutton set to 0
 800102c:	4b13      	ldr	r3, [pc, #76]	; (800107c <HAL_GPIO_EXTI_Callback+0x60>)
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
		upbutton = 0;  // upbutton set to 0
 8001032:	4b13      	ldr	r3, [pc, #76]	; (8001080 <HAL_GPIO_EXTI_Callback+0x64>)
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
		enter = 1;  // enter set to 1
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <HAL_GPIO_EXTI_Callback+0x68>)
 800103a:	2201      	movs	r2, #1
 800103c:	601a      	str	r2, [r3, #0]
	}

	if (GPIO_Pin == GPIO_PIN_1)  // If the PA1 (DOWN) is pressed
 800103e:	88fb      	ldrh	r3, [r7, #6]
 8001040:	2b02      	cmp	r3, #2
 8001042:	d108      	bne.n	8001056 <HAL_GPIO_EXTI_Callback+0x3a>
	{
		downbutton = 1;  // downbutton set to 1 and others set to 0
 8001044:	4b0d      	ldr	r3, [pc, #52]	; (800107c <HAL_GPIO_EXTI_Callback+0x60>)
 8001046:	2201      	movs	r2, #1
 8001048:	601a      	str	r2, [r3, #0]
		upbutton = 0;
 800104a:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <HAL_GPIO_EXTI_Callback+0x64>)
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
		enter = 0;
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <HAL_GPIO_EXTI_Callback+0x68>)
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
	}

	if (GPIO_Pin == GPIO_PIN_4)  // If the PA4 (UP) is pressed
 8001056:	88fb      	ldrh	r3, [r7, #6]
 8001058:	2b10      	cmp	r3, #16
 800105a:	d108      	bne.n	800106e <HAL_GPIO_EXTI_Callback+0x52>
	{
		downbutton = 0;
 800105c:	4b07      	ldr	r3, [pc, #28]	; (800107c <HAL_GPIO_EXTI_Callback+0x60>)
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
		upbutton = 1;  // upbutton set to 1 and others set to 0
 8001062:	4b07      	ldr	r3, [pc, #28]	; (8001080 <HAL_GPIO_EXTI_Callback+0x64>)
 8001064:	2201      	movs	r2, #1
 8001066:	601a      	str	r2, [r3, #0]
		enter = 0;
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <HAL_GPIO_EXTI_Callback+0x68>)
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
	}
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	200001e0 	.word	0x200001e0
 8001080:	200001e4 	.word	0x200001e4
 8001084:	200001e8 	.word	0x200001e8

08001088 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4a07      	ldr	r2, [pc, #28]	; (80010b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8001098:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	4a06      	ldr	r2, [pc, #24]	; (80010b8 <vApplicationGetIdleTaskMemory+0x30>)
 800109e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2280      	movs	r2, #128	; 0x80
 80010a4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80010a6:	bf00      	nop
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	200001ec 	.word	0x200001ec
 80010b8:	20000240 	.word	0x20000240

080010bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010bc:	b5b0      	push	{r4, r5, r7, lr}
 80010be:	b08e      	sub	sp, #56	; 0x38
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c2:	f000 fd3b 	bl	8001b3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010c6:	f000 f857 	bl	8001178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ca:	f000 f923 	bl	8001314 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80010ce:	f000 f8f7 	bl	80012c0 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80010d2:	f000 f8bd 	bl	8001250 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init(0);
 80010d6:	2000      	movs	r0, #0
 80010d8:	f7ff fd62 	bl	8000ba0 <ST7735_Init>
  fillScreen(BLACK);
 80010dc:	2000      	movs	r0, #0
 80010de:	f7ff fb25 	bl	800072c <fillScreen>
//  ST7735_WriteString(0, 1, Initialword, Font_7x10, BLUE,BLACK);
//  drawFastHLine(0, 11, 160, WHITE);
  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  SendBufferMutex = xSemaphoreCreateMutex();
 80010e2:	2001      	movs	r0, #1
 80010e4:	f00d fd15 	bl	800eb12 <xQueueCreateMutex>
 80010e8:	4603      	mov	r3, r0
 80010ea:	4a1c      	ldr	r2, [pc, #112]	; (800115c <main+0xa0>)
 80010ec:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  HostToDevice = xQueueCreate(10, sizeof(char));
 80010ee:	2200      	movs	r2, #0
 80010f0:	2101      	movs	r1, #1
 80010f2:	200a      	movs	r0, #10
 80010f4:	f00d fc9a 	bl	800ea2c <xQueueGenericCreate>
 80010f8:	4603      	mov	r3, r0
 80010fa:	4a19      	ldr	r2, [pc, #100]	; (8001160 <main+0xa4>)
 80010fc:	6013      	str	r3, [r2, #0]
   if(HostToDevice==NULL){
 	  //Queue error;
   }
   HostToHost = xQueueCreate(10, sizeof(char));
 80010fe:	2200      	movs	r2, #0
 8001100:	2101      	movs	r1, #1
 8001102:	200a      	movs	r0, #10
 8001104:	f00d fc92 	bl	800ea2c <xQueueGenericCreate>
 8001108:	4603      	mov	r3, r0
 800110a:	4a16      	ldr	r2, [pc, #88]	; (8001164 <main+0xa8>)
 800110c:	6013      	str	r3, [r2, #0]
     }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of HostTask */
  osThreadDef(HostTask, HostResponse, osPriorityNormal, 0, 1024);
 800110e:	4b16      	ldr	r3, [pc, #88]	; (8001168 <main+0xac>)
 8001110:	f107 041c 	add.w	r4, r7, #28
 8001114:	461d      	mov	r5, r3
 8001116:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001118:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800111a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800111e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HostTaskHandle = osThreadCreate(osThread(HostTask), NULL);
 8001122:	f107 031c 	add.w	r3, r7, #28
 8001126:	2100      	movs	r1, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f00d f9ae 	bl	800e48a <osThreadCreate>
 800112e:	4603      	mov	r3, r0
 8001130:	4a0e      	ldr	r2, [pc, #56]	; (800116c <main+0xb0>)
 8001132:	6013      	str	r3, [r2, #0]

  /* definition and creation of DeviceTask */
  osThreadDef(DeviceTask, DeviceResponse, osPriorityIdle, 0, 128);
 8001134:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <main+0xb4>)
 8001136:	463c      	mov	r4, r7
 8001138:	461d      	mov	r5, r3
 800113a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800113c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800113e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001142:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DeviceTaskHandle = osThreadCreate(osThread(DeviceTask), NULL);
 8001146:	463b      	mov	r3, r7
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f00d f99d 	bl	800e48a <osThreadCreate>
 8001150:	4603      	mov	r3, r0
 8001152:	4a08      	ldr	r2, [pc, #32]	; (8001174 <main+0xb8>)
 8001154:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001156:	f00d f991 	bl	800e47c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800115a:	e7fe      	b.n	800115a <main+0x9e>
 800115c:	200004ec 	.word	0x200004ec
 8001160:	200004e4 	.word	0x200004e4
 8001164:	200004e8 	.word	0x200004e8
 8001168:	08011bc8 	.word	0x08011bc8
 800116c:	200004dc 	.word	0x200004dc
 8001170:	08011be4 	.word	0x08011be4
 8001174:	200004e0 	.word	0x200004e0

08001178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b094      	sub	sp, #80	; 0x50
 800117c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117e:	f107 031c 	add.w	r3, r7, #28
 8001182:	2234      	movs	r2, #52	; 0x34
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f010 fc00 	bl	801198c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800118c:	f107 0308 	add.w	r3, r7, #8
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800119c:	2300      	movs	r3, #0
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	4b29      	ldr	r3, [pc, #164]	; (8001248 <SystemClock_Config+0xd0>)
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	4a28      	ldr	r2, [pc, #160]	; (8001248 <SystemClock_Config+0xd0>)
 80011a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011aa:	6413      	str	r3, [r2, #64]	; 0x40
 80011ac:	4b26      	ldr	r3, [pc, #152]	; (8001248 <SystemClock_Config+0xd0>)
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011b8:	2300      	movs	r3, #0
 80011ba:	603b      	str	r3, [r7, #0]
 80011bc:	4b23      	ldr	r3, [pc, #140]	; (800124c <SystemClock_Config+0xd4>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a22      	ldr	r2, [pc, #136]	; (800124c <SystemClock_Config+0xd4>)
 80011c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011c6:	6013      	str	r3, [r2, #0]
 80011c8:	4b20      	ldr	r3, [pc, #128]	; (800124c <SystemClock_Config+0xd4>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011d0:	603b      	str	r3, [r7, #0]
 80011d2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011d4:	2301      	movs	r3, #1
 80011d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80011d8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80011dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011de:	2302      	movs	r3, #2
 80011e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011e8:	2304      	movs	r3, #4
 80011ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80011ec:	23a8      	movs	r3, #168	; 0xa8
 80011ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011f0:	2302      	movs	r3, #2
 80011f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011f4:	2307      	movs	r3, #7
 80011f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011f8:	2302      	movs	r3, #2
 80011fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011fc:	f107 031c 	add.w	r3, r7, #28
 8001200:	4618      	mov	r0, r3
 8001202:	f004 fd9d 	bl	8005d40 <HAL_RCC_OscConfig>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800120c:	f000 faa0 	bl	8001750 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001210:	230f      	movs	r3, #15
 8001212:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001214:	2302      	movs	r3, #2
 8001216:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001218:	2300      	movs	r3, #0
 800121a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800121c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001220:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001222:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001226:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001228:	f107 0308 	add.w	r3, r7, #8
 800122c:	2105      	movs	r1, #5
 800122e:	4618      	mov	r0, r3
 8001230:	f003 fee0 	bl	8004ff4 <HAL_RCC_ClockConfig>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800123a:	f000 fa89 	bl	8001750 <Error_Handler>
  }
}
 800123e:	bf00      	nop
 8001240:	3750      	adds	r7, #80	; 0x50
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40023800 	.word	0x40023800
 800124c:	40007000 	.word	0x40007000

08001250 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001254:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <MX_SPI1_Init+0x68>)
 8001256:	4a19      	ldr	r2, [pc, #100]	; (80012bc <MX_SPI1_Init+0x6c>)
 8001258:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800125a:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <MX_SPI1_Init+0x68>)
 800125c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001260:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <MX_SPI1_Init+0x68>)
 8001264:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001268:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800126a:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <MX_SPI1_Init+0x68>)
 800126c:	2200      	movs	r2, #0
 800126e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <MX_SPI1_Init+0x68>)
 8001272:	2200      	movs	r2, #0
 8001274:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001276:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <MX_SPI1_Init+0x68>)
 8001278:	2200      	movs	r2, #0
 800127a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800127c:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <MX_SPI1_Init+0x68>)
 800127e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001282:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <MX_SPI1_Init+0x68>)
 8001286:	2218      	movs	r2, #24
 8001288:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800128a:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <MX_SPI1_Init+0x68>)
 800128c:	2200      	movs	r2, #0
 800128e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <MX_SPI1_Init+0x68>)
 8001292:	2200      	movs	r2, #0
 8001294:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001296:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <MX_SPI1_Init+0x68>)
 8001298:	2200      	movs	r2, #0
 800129a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <MX_SPI1_Init+0x68>)
 800129e:	220a      	movs	r2, #10
 80012a0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012a2:	4805      	ldr	r0, [pc, #20]	; (80012b8 <MX_SPI1_Init+0x68>)
 80012a4:	f004 ffea 	bl	800627c <HAL_SPI_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80012ae:	f000 fa4f 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000440 	.word	0x20000440
 80012bc:	40013000 	.word	0x40013000

080012c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <MX_USART3_UART_Init+0x4c>)
 80012c6:	4a12      	ldr	r2, [pc, #72]	; (8001310 <MX_USART3_UART_Init+0x50>)
 80012c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <MX_USART3_UART_Init+0x4c>)
 80012cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <MX_USART3_UART_Init+0x4c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <MX_USART3_UART_Init+0x4c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <MX_USART3_UART_Init+0x4c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012e4:	4b09      	ldr	r3, [pc, #36]	; (800130c <MX_USART3_UART_Init+0x4c>)
 80012e6:	220c      	movs	r2, #12
 80012e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ea:	4b08      	ldr	r3, [pc, #32]	; (800130c <MX_USART3_UART_Init+0x4c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <MX_USART3_UART_Init+0x4c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012f6:	4805      	ldr	r0, [pc, #20]	; (800130c <MX_USART3_UART_Init+0x4c>)
 80012f8:	f005 fcfe 	bl	8006cf8 <HAL_UART_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001302:	f000 fa25 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000498 	.word	0x20000498
 8001310:	40004800 	.word	0x40004800

08001314 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08c      	sub	sp, #48	; 0x30
 8001318:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131a:	f107 031c 	add.w	r3, r7, #28
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
 8001328:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	61bb      	str	r3, [r7, #24]
 800132e:	4b6d      	ldr	r3, [pc, #436]	; (80014e4 <MX_GPIO_Init+0x1d0>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a6c      	ldr	r2, [pc, #432]	; (80014e4 <MX_GPIO_Init+0x1d0>)
 8001334:	f043 0310 	orr.w	r3, r3, #16
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b6a      	ldr	r3, [pc, #424]	; (80014e4 <MX_GPIO_Init+0x1d0>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0310 	and.w	r3, r3, #16
 8001342:	61bb      	str	r3, [r7, #24]
 8001344:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	617b      	str	r3, [r7, #20]
 800134a:	4b66      	ldr	r3, [pc, #408]	; (80014e4 <MX_GPIO_Init+0x1d0>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a65      	ldr	r2, [pc, #404]	; (80014e4 <MX_GPIO_Init+0x1d0>)
 8001350:	f043 0304 	orr.w	r3, r3, #4
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b63      	ldr	r3, [pc, #396]	; (80014e4 <MX_GPIO_Init+0x1d0>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0304 	and.w	r3, r3, #4
 800135e:	617b      	str	r3, [r7, #20]
 8001360:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	4b5f      	ldr	r3, [pc, #380]	; (80014e4 <MX_GPIO_Init+0x1d0>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a5e      	ldr	r2, [pc, #376]	; (80014e4 <MX_GPIO_Init+0x1d0>)
 800136c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b5c      	ldr	r3, [pc, #368]	; (80014e4 <MX_GPIO_Init+0x1d0>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	4b58      	ldr	r3, [pc, #352]	; (80014e4 <MX_GPIO_Init+0x1d0>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a57      	ldr	r2, [pc, #348]	; (80014e4 <MX_GPIO_Init+0x1d0>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b55      	ldr	r3, [pc, #340]	; (80014e4 <MX_GPIO_Init+0x1d0>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	4b51      	ldr	r3, [pc, #324]	; (80014e4 <MX_GPIO_Init+0x1d0>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a50      	ldr	r2, [pc, #320]	; (80014e4 <MX_GPIO_Init+0x1d0>)
 80013a4:	f043 0302 	orr.w	r3, r3, #2
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b4e      	ldr	r3, [pc, #312]	; (80014e4 <MX_GPIO_Init+0x1d0>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	4b4a      	ldr	r3, [pc, #296]	; (80014e4 <MX_GPIO_Init+0x1d0>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a49      	ldr	r2, [pc, #292]	; (80014e4 <MX_GPIO_Init+0x1d0>)
 80013c0:	f043 0308 	orr.w	r3, r3, #8
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b47      	ldr	r3, [pc, #284]	; (80014e4 <MX_GPIO_Init+0x1d0>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0308 	and.w	r3, r3, #8
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	603b      	str	r3, [r7, #0]
 80013d6:	4b43      	ldr	r3, [pc, #268]	; (80014e4 <MX_GPIO_Init+0x1d0>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a42      	ldr	r2, [pc, #264]	; (80014e4 <MX_GPIO_Init+0x1d0>)
 80013dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b40      	ldr	r3, [pc, #256]	; (80014e4 <MX_GPIO_Init+0x1d0>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DC_Pin|RES_Pin, GPIO_PIN_RESET);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2114      	movs	r1, #20
 80013f2:	483d      	ldr	r0, [pc, #244]	; (80014e8 <MX_GPIO_Init+0x1d4>)
 80013f4:	f000 ff10 	bl	8002218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2110      	movs	r1, #16
 80013fc:	483b      	ldr	r0, [pc, #236]	; (80014ec <MX_GPIO_Init+0x1d8>)
 80013fe:	f000 ff0b 	bl	8002218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001402:	2200      	movs	r2, #0
 8001404:	2140      	movs	r1, #64	; 0x40
 8001406:	483a      	ldr	r0, [pc, #232]	; (80014f0 <MX_GPIO_Init+0x1dc>)
 8001408:	f000 ff06 	bl	8002218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800140c:	2200      	movs	r2, #0
 800140e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001412:	4838      	ldr	r0, [pc, #224]	; (80014f4 <MX_GPIO_Init+0x1e0>)
 8001414:	f000 ff00 	bl	8002218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001418:	2200      	movs	r2, #0
 800141a:	2180      	movs	r1, #128	; 0x80
 800141c:	4836      	ldr	r0, [pc, #216]	; (80014f8 <MX_GPIO_Init+0x1e4>)
 800141e:	f000 fefb 	bl	8002218 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DC_Pin RES_Pin */
  GPIO_InitStruct.Pin = DC_Pin|RES_Pin;
 8001422:	2314      	movs	r3, #20
 8001424:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001426:	2301      	movs	r3, #1
 8001428:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142e:	2300      	movs	r3, #0
 8001430:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001432:	f107 031c 	add.w	r3, r7, #28
 8001436:	4619      	mov	r1, r3
 8001438:	482b      	ldr	r0, [pc, #172]	; (80014e8 <MX_GPIO_Init+0x1d4>)
 800143a:	f000 fd59 	bl	8001ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 800143e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001442:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001444:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001448:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800144e:	f107 031c 	add.w	r3, r7, #28
 8001452:	4619      	mov	r1, r3
 8001454:	4827      	ldr	r0, [pc, #156]	; (80014f4 <MX_GPIO_Init+0x1e0>)
 8001456:	f000 fd4b 	bl	8001ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 800145a:	2310      	movs	r3, #16
 800145c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145e:	2301      	movs	r3, #1
 8001460:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001466:	2300      	movs	r3, #0
 8001468:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800146a:	f107 031c 	add.w	r3, r7, #28
 800146e:	4619      	mov	r1, r3
 8001470:	481e      	ldr	r0, [pc, #120]	; (80014ec <MX_GPIO_Init+0x1d8>)
 8001472:	f000 fd3d 	bl	8001ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001476:	2340      	movs	r3, #64	; 0x40
 8001478:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147a:	2301      	movs	r3, #1
 800147c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2300      	movs	r3, #0
 8001484:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001486:	f107 031c 	add.w	r3, r7, #28
 800148a:	4619      	mov	r1, r3
 800148c:	4818      	ldr	r0, [pc, #96]	; (80014f0 <MX_GPIO_Init+0x1dc>)
 800148e:	f000 fd2f 	bl	8001ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001492:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001496:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001498:	2301      	movs	r3, #1
 800149a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a0:	2300      	movs	r3, #0
 80014a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a4:	f107 031c 	add.w	r3, r7, #28
 80014a8:	4619      	mov	r1, r3
 80014aa:	4812      	ldr	r0, [pc, #72]	; (80014f4 <MX_GPIO_Init+0x1e0>)
 80014ac:	f000 fd20 	bl	8001ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80014b0:	2380      	movs	r3, #128	; 0x80
 80014b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b4:	2301      	movs	r3, #1
 80014b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80014c0:	f107 031c 	add.w	r3, r7, #28
 80014c4:	4619      	mov	r1, r3
 80014c6:	480c      	ldr	r0, [pc, #48]	; (80014f8 <MX_GPIO_Init+0x1e4>)
 80014c8:	f000 fd12 	bl	8001ef0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80014cc:	2200      	movs	r2, #0
 80014ce:	2105      	movs	r1, #5
 80014d0:	2028      	movs	r0, #40	; 0x28
 80014d2:	f000 fc51 	bl	8001d78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014d6:	2028      	movs	r0, #40	; 0x28
 80014d8:	f000 fc6a 	bl	8001db0 <HAL_NVIC_EnableIRQ>

}
 80014dc:	bf00      	nop
 80014de:	3730      	adds	r7, #48	; 0x30
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40021000 	.word	0x40021000
 80014ec:	40020000 	.word	0x40020000
 80014f0:	40021800 	.word	0x40021800
 80014f4:	40020800 	.word	0x40020800
 80014f8:	40020400 	.word	0x40020400

080014fc <USBH_HID_EventCallback>:

/* USER CODE BEGIN 4 */
void  USBH_HID_EventCallback(USBH_HandleTypeDef *phost)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	HID_KEYBD_Info_TypeDef *keybd_info;
	HID_HandleTypeDef *HID_Handle =
			(HID_HandleTypeDef *) phost->pActiveClass->pData;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
	HID_HandleTypeDef *HID_Handle =
 800150a:	69db      	ldr	r3, [r3, #28]
 800150c:	617b      	str	r3, [r7, #20]
	 BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]

	if (HID_Handle->Init == USBH_HID_KeybdInit) {
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a13      	ldr	r2, [pc, #76]	; (8001564 <USBH_HID_EventCallback+0x68>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d11e      	bne.n	800155a <USBH_HID_EventCallback+0x5e>

		keybd_info = USBH_HID_GetKeybdInfo(phost);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f00a ff6f 	bl	800c400 <USBH_HID_GetKeybdInfo>
 8001522:	6138      	str	r0, [r7, #16]

		keycode = USBH_HID_GetASCIICode(keybd_info);
 8001524:	6938      	ldr	r0, [r7, #16]
 8001526:	f00b f80f 	bl	800c548 <USBH_HID_GetASCIICode>
 800152a:	4603      	mov	r3, r0
 800152c:	461a      	mov	r2, r3
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <USBH_HID_EventCallback+0x6c>)
 8001530:	701a      	strb	r2, [r3, #0]
		if (keycode != 0){ // Default NULL
 8001532:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <USBH_HID_EventCallback+0x6c>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d00f      	beq.n	800155a <USBH_HID_EventCallback+0x5e>
		xQueueSendFromISR(HostToHost,&keycode,&xHigherPriorityTaskWoken);
 800153a:	4b0c      	ldr	r3, [pc, #48]	; (800156c <USBH_HID_EventCallback+0x70>)
 800153c:	6818      	ldr	r0, [r3, #0]
 800153e:	f107 020c 	add.w	r2, r7, #12
 8001542:	2300      	movs	r3, #0
 8001544:	4908      	ldr	r1, [pc, #32]	; (8001568 <USBH_HID_EventCallback+0x6c>)
 8001546:	f00d fbfb 	bl	800ed40 <xQueueGenericSendFromISR>
		xQueueSendFromISR(HostToDevice,&keycode,&xHigherPriorityTaskWoken);
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <USBH_HID_EventCallback+0x74>)
 800154c:	6818      	ldr	r0, [r3, #0]
 800154e:	f107 020c 	add.w	r2, r7, #12
 8001552:	2300      	movs	r3, #0
 8001554:	4904      	ldr	r1, [pc, #16]	; (8001568 <USBH_HID_EventCallback+0x6c>)
 8001556:	f00d fbf3 	bl	800ed40 <xQueueGenericSendFromISR>
		}


	}
}
 800155a:	bf00      	nop
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	0800c359 	.word	0x0800c359
 8001568:	200004f0 	.word	0x200004f0
 800156c:	200004e8 	.word	0x200004e8
 8001570:	200004e4 	.word	0x200004e4

08001574 <HostResponse>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_HostResponse */
void HostResponse(void const * argument)
{
 8001574:	b5b0      	push	{r4, r5, r7, lr}
 8001576:	b08e      	sub	sp, #56	; 0x38
 8001578:	af04      	add	r7, sp, #16
 800157a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800157c:	f00f fea6 	bl	80112cc <MX_USB_HOST_Init>
  /* init code for USB_DEVICE */

  /* USER CODE BEGIN 5 */
  char Keycode;
  char starter[]="All datas are below:";
 8001580:	4b57      	ldr	r3, [pc, #348]	; (80016e0 <HostResponse+0x16c>)
 8001582:	f107 0408 	add.w	r4, r7, #8
 8001586:	461d      	mov	r5, r3
 8001588:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800158a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800158c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001590:	6020      	str	r0, [r4, #0]
 8001592:	3404      	adds	r4, #4
 8001594:	7021      	strb	r1, [r4, #0]
	  ST7735_SetRotation(1);
 8001596:	2001      	movs	r0, #1
 8001598:	f7ff fb2e 	bl	8000bf8 <ST7735_SetRotation>
	  ST7735_WriteString(0, 1, starter, Font_7x10, BLUE, BLACK);
 800159c:	4b51      	ldr	r3, [pc, #324]	; (80016e4 <HostResponse+0x170>)
 800159e:	f107 0108 	add.w	r1, r7, #8
 80015a2:	2200      	movs	r2, #0
 80015a4:	9202      	str	r2, [sp, #8]
 80015a6:	221f      	movs	r2, #31
 80015a8:	9201      	str	r2, [sp, #4]
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	9200      	str	r2, [sp, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	460a      	mov	r2, r1
 80015b2:	2101      	movs	r1, #1
 80015b4:	2000      	movs	r0, #0
 80015b6:	f7ff fc55 	bl	8000e64 <ST7735_WriteString>
	  drawFastHLine(0, 11, 160, BLUE);
 80015ba:	231f      	movs	r3, #31
 80015bc:	22a0      	movs	r2, #160	; 0xa0
 80015be:	210b      	movs	r1, #11
 80015c0:	2000      	movs	r0, #0
 80015c2:	f7ff f88d 	bl	80006e0 <drawFastHLine>
  uint8_t row=13,column=0;
 80015c6:	230d      	movs	r3, #13
 80015c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80015cc:	2300      	movs	r3, #0
 80015ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  char* string = NULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	623b      	str	r3, [r7, #32]
  /* Infinite loop */
  for(;;)
  {


	  osDelay(10);
 80015d6:	200a      	movs	r0, #10
 80015d8:	f00c ffa3 	bl	800e522 <osDelay>
	     if (xQueueReceive(HostToHost, &Keycode, portMAX_DELAY) == pdPASS)
 80015dc:	4b42      	ldr	r3, [pc, #264]	; (80016e8 <HostResponse+0x174>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f107 011f 	add.w	r1, r7, #31
 80015e4:	f04f 32ff 	mov.w	r2, #4294967295
 80015e8:	4618      	mov	r0, r3
 80015ea:	f00d fc45 	bl	800ee78 <xQueueReceive>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d1f0      	bne.n	80015d6 <HostResponse+0x62>
	 		{
	     			if(column <=180 && row<=100){
 80015f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015f8:	2bb4      	cmp	r3, #180	; 0xb4
 80015fa:	d852      	bhi.n	80016a2 <HostResponse+0x12e>
 80015fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001600:	2b64      	cmp	r3, #100	; 0x64
 8001602:	d84e      	bhi.n	80016a2 <HostResponse+0x12e>
	     			if(Keycode != '\n'){
 8001604:	7ffb      	ldrb	r3, [r7, #31]
 8001606:	2b0a      	cmp	r3, #10
 8001608:	d026      	beq.n	8001658 <HostResponse+0xe4>

	     			string=(char*)malloc(sizeof(char));
 800160a:	2001      	movs	r0, #1
 800160c:	f010 f9a0 	bl	8011950 <malloc>
 8001610:	4603      	mov	r3, r0
 8001612:	623b      	str	r3, [r7, #32]

	     			if(string== NULL){
 8001614:	6a3b      	ldr	r3, [r7, #32]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <HostResponse+0xaa>
	     				Error_Handler();
 800161a:	f000 f899 	bl	8001750 <Error_Handler>
	     			}
	     			string[0]=Keycode;
 800161e:	7ffa      	ldrb	r2, [r7, #31]
 8001620:	6a3b      	ldr	r3, [r7, #32]
 8001622:	701a      	strb	r2, [r3, #0]
	     			ST7735_WriteString(column, row, string, Font_7x10, BLUE, BLACK);
 8001624:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001628:	b298      	uxth	r0, r3
 800162a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800162e:	b299      	uxth	r1, r3
 8001630:	4b2c      	ldr	r3, [pc, #176]	; (80016e4 <HostResponse+0x170>)
 8001632:	2200      	movs	r2, #0
 8001634:	9202      	str	r2, [sp, #8]
 8001636:	221f      	movs	r2, #31
 8001638:	9201      	str	r2, [sp, #4]
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	9200      	str	r2, [sp, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6a3a      	ldr	r2, [r7, #32]
 8001642:	f7ff fc0f 	bl	8000e64 <ST7735_WriteString>
	     			column =column+7;
 8001646:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800164a:	3307      	adds	r3, #7
 800164c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	     			free(string);
 8001650:	6a38      	ldr	r0, [r7, #32]
 8001652:	f010 f985 	bl	8011960 <free>
	     			if(Keycode != '\n'){
 8001656:	e042      	b.n	80016de <HostResponse+0x16a>
	     			}

	     			else if(Keycode == '\n'){
 8001658:	7ffb      	ldrb	r3, [r7, #31]
 800165a:	2b0a      	cmp	r3, #10
 800165c:	d108      	bne.n	8001670 <HostResponse+0xfc>
	     				row=row+10;
 800165e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001662:	330a      	adds	r3, #10
 8001664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	     				column=0;
 8001668:	2300      	movs	r3, #0
 800166a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	     			if(Keycode != '\n'){
 800166e:	e036      	b.n	80016de <HostResponse+0x16a>
	     			}
	     			else{


	     				ST7735_WriteString(0, row, "Undefined Character!", Font_7x10, RED, BLACK);
 8001670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001674:	b299      	uxth	r1, r3
 8001676:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <HostResponse+0x170>)
 8001678:	2200      	movs	r2, #0
 800167a:	9202      	str	r2, [sp, #8]
 800167c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001680:	9201      	str	r2, [sp, #4]
 8001682:	685a      	ldr	r2, [r3, #4]
 8001684:	9200      	str	r2, [sp, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a18      	ldr	r2, [pc, #96]	; (80016ec <HostResponse+0x178>)
 800168a:	2000      	movs	r0, #0
 800168c:	f7ff fbea 	bl	8000e64 <ST7735_WriteString>
	     				column=0;
 8001690:	2300      	movs	r3, #0
 8001692:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	     				row=row+10;
 8001696:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800169a:	330a      	adds	r3, #10
 800169c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	     			if(Keycode != '\n'){
 80016a0:	e01d      	b.n	80016de <HostResponse+0x16a>
	     			}
	     			}
else{
	column=0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	row=13;
 80016a8:	230d      	movs	r3, #13
 80016aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	fillScreen(BLACK);
 80016ae:	2000      	movs	r0, #0
 80016b0:	f7ff f83c 	bl	800072c <fillScreen>
	ST7735_WriteString(0, 1, starter, Font_7x10, BLUE, BLACK);
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <HostResponse+0x170>)
 80016b6:	f107 0108 	add.w	r1, r7, #8
 80016ba:	2200      	movs	r2, #0
 80016bc:	9202      	str	r2, [sp, #8]
 80016be:	221f      	movs	r2, #31
 80016c0:	9201      	str	r2, [sp, #4]
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	9200      	str	r2, [sp, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	460a      	mov	r2, r1
 80016ca:	2101      	movs	r1, #1
 80016cc:	2000      	movs	r0, #0
 80016ce:	f7ff fbc9 	bl	8000e64 <ST7735_WriteString>
	 drawFastHLine(0, 11, 160, BLUE);
 80016d2:	231f      	movs	r3, #31
 80016d4:	22a0      	movs	r2, #160	; 0xa0
 80016d6:	210b      	movs	r1, #11
 80016d8:	2000      	movs	r0, #0
 80016da:	f7ff f801 	bl	80006e0 <drawFastHLine>
	  osDelay(10);
 80016de:	e77a      	b.n	80015d6 <HostResponse+0x62>
 80016e0:	08011c18 	.word	0x08011c18
 80016e4:	20000000 	.word	0x20000000
 80016e8:	200004e8 	.word	0x200004e8
 80016ec:	08011c00 	.word	0x08011c00

080016f0 <DeviceResponse>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DeviceResponse */
void DeviceResponse(void const * argument)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DeviceResponse */

	MX_USB_DEVICE_Init();
 80016f8:	f00f f938 	bl	801096c <MX_USB_DEVICE_Init>
	  char Barcode_Data;
//	uint8_t* devicebuffer=NULL;

  for(;;)
  {
    osDelay(1);
 80016fc:	2001      	movs	r0, #1
 80016fe:	f00c ff10 	bl	800e522 <osDelay>



    if (xQueueReceive(HostToDevice, &Barcode_Data, portMAX_DELAY) == pdPASS)
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <DeviceResponse+0x38>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f107 010f 	add.w	r1, r7, #15
 800170a:	f04f 32ff 	mov.w	r2, #4294967295
 800170e:	4618      	mov	r0, r3
 8001710:	f00d fbb2 	bl	800ee78 <xQueueReceive>
 8001714:	4603      	mov	r3, r0
 8001716:	2b01      	cmp	r3, #1
 8001718:	d1f0      	bne.n	80016fc <DeviceResponse+0xc>
   	 		{
    		USB_Keyboard_SendString(&Barcode_Data);
 800171a:	f107 030f 	add.w	r3, r7, #15
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff f930 	bl	8000984 <USB_Keyboard_SendString>
    osDelay(1);
 8001724:	e7ea      	b.n	80016fc <DeviceResponse+0xc>
 8001726:	bf00      	nop
 8001728:	200004e4 	.word	0x200004e4

0800172c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a04      	ldr	r2, [pc, #16]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d101      	bne.n	8001742 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800173e:	f000 fa1f 	bl	8001b80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40014400 	.word	0x40014400

08001750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001754:	b672      	cpsid	i
}
 8001756:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001758:	e7fe      	b.n	8001758 <Error_Handler+0x8>
	...

0800175c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	607b      	str	r3, [r7, #4]
 8001766:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <HAL_MspInit+0x54>)
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	4a11      	ldr	r2, [pc, #68]	; (80017b0 <HAL_MspInit+0x54>)
 800176c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001770:	6453      	str	r3, [r2, #68]	; 0x44
 8001772:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <HAL_MspInit+0x54>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	603b      	str	r3, [r7, #0]
 8001782:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <HAL_MspInit+0x54>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <HAL_MspInit+0x54>)
 8001788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800178c:	6413      	str	r3, [r2, #64]	; 0x40
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <HAL_MspInit+0x54>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001796:	603b      	str	r3, [r7, #0]
 8001798:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	210f      	movs	r1, #15
 800179e:	f06f 0001 	mvn.w	r0, #1
 80017a2:	f000 fae9 	bl	8001d78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800

080017b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	; 0x28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a19      	ldr	r2, [pc, #100]	; (8001838 <HAL_SPI_MspInit+0x84>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d12b      	bne.n	800182e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	4b18      	ldr	r3, [pc, #96]	; (800183c <HAL_SPI_MspInit+0x88>)
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	4a17      	ldr	r2, [pc, #92]	; (800183c <HAL_SPI_MspInit+0x88>)
 80017e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017e4:	6453      	str	r3, [r2, #68]	; 0x44
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <HAL_SPI_MspInit+0x88>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <HAL_SPI_MspInit+0x88>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a10      	ldr	r2, [pc, #64]	; (800183c <HAL_SPI_MspInit+0x88>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b0e      	ldr	r3, [pc, #56]	; (800183c <HAL_SPI_MspInit+0x88>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800180e:	23a0      	movs	r3, #160	; 0xa0
 8001810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2302      	movs	r3, #2
 8001814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181a:	2303      	movs	r3, #3
 800181c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800181e:	2305      	movs	r3, #5
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	4619      	mov	r1, r3
 8001828:	4805      	ldr	r0, [pc, #20]	; (8001840 <HAL_SPI_MspInit+0x8c>)
 800182a:	f000 fb61 	bl	8001ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800182e:	bf00      	nop
 8001830:	3728      	adds	r7, #40	; 0x28
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40013000 	.word	0x40013000
 800183c:	40023800 	.word	0x40023800
 8001840:	40020000 	.word	0x40020000

08001844 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08a      	sub	sp, #40	; 0x28
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a1d      	ldr	r2, [pc, #116]	; (80018d8 <HAL_UART_MspInit+0x94>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d134      	bne.n	80018d0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
 800186a:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <HAL_UART_MspInit+0x98>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	4a1b      	ldr	r2, [pc, #108]	; (80018dc <HAL_UART_MspInit+0x98>)
 8001870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001874:	6413      	str	r3, [r2, #64]	; 0x40
 8001876:	4b19      	ldr	r3, [pc, #100]	; (80018dc <HAL_UART_MspInit+0x98>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800187e:	613b      	str	r3, [r7, #16]
 8001880:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	4b15      	ldr	r3, [pc, #84]	; (80018dc <HAL_UART_MspInit+0x98>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a14      	ldr	r2, [pc, #80]	; (80018dc <HAL_UART_MspInit+0x98>)
 800188c:	f043 0308 	orr.w	r3, r3, #8
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b12      	ldr	r3, [pc, #72]	; (80018dc <HAL_UART_MspInit+0x98>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0308 	and.w	r3, r3, #8
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800189e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a4:	2302      	movs	r3, #2
 80018a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ac:	2303      	movs	r3, #3
 80018ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018b0:	2307      	movs	r3, #7
 80018b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	4619      	mov	r1, r3
 80018ba:	4809      	ldr	r0, [pc, #36]	; (80018e0 <HAL_UART_MspInit+0x9c>)
 80018bc:	f000 fb18 	bl	8001ef0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80018c0:	2200      	movs	r2, #0
 80018c2:	2105      	movs	r1, #5
 80018c4:	2027      	movs	r0, #39	; 0x27
 80018c6:	f000 fa57 	bl	8001d78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80018ca:	2027      	movs	r0, #39	; 0x27
 80018cc:	f000 fa70 	bl	8001db0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80018d0:	bf00      	nop
 80018d2:	3728      	adds	r7, #40	; 0x28
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40004800 	.word	0x40004800
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40020c00 	.word	0x40020c00

080018e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08c      	sub	sp, #48	; 0x30
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80018f4:	2300      	movs	r3, #0
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	4b2f      	ldr	r3, [pc, #188]	; (80019b8 <HAL_InitTick+0xd4>)
 80018fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fc:	4a2e      	ldr	r2, [pc, #184]	; (80019b8 <HAL_InitTick+0xd4>)
 80018fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001902:	6453      	str	r3, [r2, #68]	; 0x44
 8001904:	4b2c      	ldr	r3, [pc, #176]	; (80019b8 <HAL_InitTick+0xd4>)
 8001906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001910:	f107 020c 	add.w	r2, r7, #12
 8001914:	f107 0310 	add.w	r3, r7, #16
 8001918:	4611      	mov	r1, r2
 800191a:	4618      	mov	r0, r3
 800191c:	f003 fc84 	bl	8005228 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001920:	f003 fc6e 	bl	8005200 <HAL_RCC_GetPCLK2Freq>
 8001924:	4603      	mov	r3, r0
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800192a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800192c:	4a23      	ldr	r2, [pc, #140]	; (80019bc <HAL_InitTick+0xd8>)
 800192e:	fba2 2303 	umull	r2, r3, r2, r3
 8001932:	0c9b      	lsrs	r3, r3, #18
 8001934:	3b01      	subs	r3, #1
 8001936:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001938:	4b21      	ldr	r3, [pc, #132]	; (80019c0 <HAL_InitTick+0xdc>)
 800193a:	4a22      	ldr	r2, [pc, #136]	; (80019c4 <HAL_InitTick+0xe0>)
 800193c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 800193e:	4b20      	ldr	r3, [pc, #128]	; (80019c0 <HAL_InitTick+0xdc>)
 8001940:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001944:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8001946:	4a1e      	ldr	r2, [pc, #120]	; (80019c0 <HAL_InitTick+0xdc>)
 8001948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194a:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 800194c:	4b1c      	ldr	r3, [pc, #112]	; (80019c0 <HAL_InitTick+0xdc>)
 800194e:	2200      	movs	r2, #0
 8001950:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001952:	4b1b      	ldr	r3, [pc, #108]	; (80019c0 <HAL_InitTick+0xdc>)
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001958:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <HAL_InitTick+0xdc>)
 800195a:	2200      	movs	r2, #0
 800195c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 800195e:	4818      	ldr	r0, [pc, #96]	; (80019c0 <HAL_InitTick+0xdc>)
 8001960:	f004 ff1c 	bl	800679c <HAL_TIM_Base_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800196a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800196e:	2b00      	cmp	r3, #0
 8001970:	d11b      	bne.n	80019aa <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8001972:	4813      	ldr	r0, [pc, #76]	; (80019c0 <HAL_InitTick+0xdc>)
 8001974:	f004 ff6c 	bl	8006850 <HAL_TIM_Base_Start_IT>
 8001978:	4603      	mov	r3, r0
 800197a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800197e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001982:	2b00      	cmp	r3, #0
 8001984:	d111      	bne.n	80019aa <HAL_InitTick+0xc6>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001986:	2019      	movs	r0, #25
 8001988:	f000 fa12 	bl	8001db0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b0f      	cmp	r3, #15
 8001990:	d808      	bhi.n	80019a4 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001992:	2200      	movs	r2, #0
 8001994:	6879      	ldr	r1, [r7, #4]
 8001996:	2019      	movs	r0, #25
 8001998:	f000 f9ee 	bl	8001d78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800199c:	4a0a      	ldr	r2, [pc, #40]	; (80019c8 <HAL_InitTick+0xe4>)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6013      	str	r3, [r2, #0]
 80019a2:	e002      	b.n	80019aa <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80019aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3730      	adds	r7, #48	; 0x30
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40023800 	.word	0x40023800
 80019bc:	431bde83 	.word	0x431bde83
 80019c0:	200004f4 	.word	0x200004f4
 80019c4:	40014400 	.word	0x40014400
 80019c8:	2000000c 	.word	0x2000000c

080019cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <NMI_Handler+0x4>

080019d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d6:	e7fe      	b.n	80019d6 <HardFault_Handler+0x4>

080019d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019dc:	e7fe      	b.n	80019dc <MemManage_Handler+0x4>

080019de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e2:	e7fe      	b.n	80019e2 <BusFault_Handler+0x4>

080019e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <UsageFault_Handler+0x4>

080019ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80019fc:	4802      	ldr	r0, [pc, #8]	; (8001a08 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80019fe:	f004 ff97 	bl	8006930 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	200004f4 	.word	0x200004f4

08001a0c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a10:	4802      	ldr	r0, [pc, #8]	; (8001a1c <USART3_IRQHandler+0x10>)
 8001a12:	f005 f9bf 	bl	8006d94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000498 	.word	0x20000498

08001a20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 8001a24:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a28:	f000 fc10 	bl	800224c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001a34:	4802      	ldr	r0, [pc, #8]	; (8001a40 <OTG_FS_IRQHandler+0x10>)
 8001a36:	f000 fe8b 	bl	8002750 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	200050b8 	.word	0x200050b8

08001a44 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001a48:	4802      	ldr	r0, [pc, #8]	; (8001a54 <OTG_HS_IRQHandler+0x10>)
 8001a4a:	f002 f978 	bl	8003d3e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	200047b0 	.word	0x200047b0

08001a58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a60:	4a14      	ldr	r2, [pc, #80]	; (8001ab4 <_sbrk+0x5c>)
 8001a62:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <_sbrk+0x60>)
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a6c:	4b13      	ldr	r3, [pc, #76]	; (8001abc <_sbrk+0x64>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d102      	bne.n	8001a7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a74:	4b11      	ldr	r3, [pc, #68]	; (8001abc <_sbrk+0x64>)
 8001a76:	4a12      	ldr	r2, [pc, #72]	; (8001ac0 <_sbrk+0x68>)
 8001a78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a7a:	4b10      	ldr	r3, [pc, #64]	; (8001abc <_sbrk+0x64>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4413      	add	r3, r2
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d207      	bcs.n	8001a98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a88:	f00f ff38 	bl	80118fc <__errno>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	220c      	movs	r2, #12
 8001a90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a92:	f04f 33ff 	mov.w	r3, #4294967295
 8001a96:	e009      	b.n	8001aac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a98:	4b08      	ldr	r3, [pc, #32]	; (8001abc <_sbrk+0x64>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a9e:	4b07      	ldr	r3, [pc, #28]	; (8001abc <_sbrk+0x64>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	4a05      	ldr	r2, [pc, #20]	; (8001abc <_sbrk+0x64>)
 8001aa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20020000 	.word	0x20020000
 8001ab8:	00000400 	.word	0x00000400
 8001abc:	2000053c 	.word	0x2000053c
 8001ac0:	200053d0 	.word	0x200053d0

08001ac4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ac8:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <SystemInit+0x20>)
 8001aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ace:	4a05      	ldr	r2, [pc, #20]	; (8001ae4 <SystemInit+0x20>)
 8001ad0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ad4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ae8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001aec:	480d      	ldr	r0, [pc, #52]	; (8001b24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001aee:	490e      	ldr	r1, [pc, #56]	; (8001b28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001af0:	4a0e      	ldr	r2, [pc, #56]	; (8001b2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af4:	e002      	b.n	8001afc <LoopCopyDataInit>

08001af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001afa:	3304      	adds	r3, #4

08001afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b00:	d3f9      	bcc.n	8001af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b02:	4a0b      	ldr	r2, [pc, #44]	; (8001b30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b04:	4c0b      	ldr	r4, [pc, #44]	; (8001b34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b08:	e001      	b.n	8001b0e <LoopFillZerobss>

08001b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b0c:	3204      	adds	r2, #4

08001b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b10:	d3fb      	bcc.n	8001b0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b12:	f7ff ffd7 	bl	8001ac4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b16:	f00f fef7 	bl	8011908 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b1a:	f7ff facf 	bl	80010bc <main>
  bx  lr    
 8001b1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b28:	200001b0 	.word	0x200001b0
  ldr r2, =_sidata
 8001b2c:	080127d4 	.word	0x080127d4
  ldr r2, =_sbss
 8001b30:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 8001b34:	200053cc 	.word	0x200053cc

08001b38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b38:	e7fe      	b.n	8001b38 <ADC_IRQHandler>
	...

08001b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b40:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <HAL_Init+0x40>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a0d      	ldr	r2, [pc, #52]	; (8001b7c <HAL_Init+0x40>)
 8001b46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b4c:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <HAL_Init+0x40>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a0a      	ldr	r2, [pc, #40]	; (8001b7c <HAL_Init+0x40>)
 8001b52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b58:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <HAL_Init+0x40>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a07      	ldr	r2, [pc, #28]	; (8001b7c <HAL_Init+0x40>)
 8001b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b64:	2003      	movs	r0, #3
 8001b66:	f000 f8fc 	bl	8001d62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b6a:	200f      	movs	r0, #15
 8001b6c:	f7ff feba 	bl	80018e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b70:	f7ff fdf4 	bl	800175c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40023c00 	.word	0x40023c00

08001b80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b84:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HAL_IncTick+0x20>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <HAL_IncTick+0x24>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4413      	add	r3, r2
 8001b90:	4a04      	ldr	r2, [pc, #16]	; (8001ba4 <HAL_IncTick+0x24>)
 8001b92:	6013      	str	r3, [r2, #0]
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	20000010 	.word	0x20000010
 8001ba4:	20000540 	.word	0x20000540

08001ba8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  return uwTick;
 8001bac:	4b03      	ldr	r3, [pc, #12]	; (8001bbc <HAL_GetTick+0x14>)
 8001bae:	681b      	ldr	r3, [r3, #0]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	20000540 	.word	0x20000540

08001bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bc8:	f7ff ffee 	bl	8001ba8 <HAL_GetTick>
 8001bcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd8:	d005      	beq.n	8001be6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bda:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <HAL_Delay+0x44>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	461a      	mov	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4413      	add	r3, r2
 8001be4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001be6:	bf00      	nop
 8001be8:	f7ff ffde 	bl	8001ba8 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d8f7      	bhi.n	8001be8 <HAL_Delay+0x28>
  {
  }
}
 8001bf8:	bf00      	nop
 8001bfa:	bf00      	nop
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000010 	.word	0x20000010

08001c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c18:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <__NVIC_SetPriorityGrouping+0x44>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c24:	4013      	ands	r3, r2
 8001c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c3a:	4a04      	ldr	r2, [pc, #16]	; (8001c4c <__NVIC_SetPriorityGrouping+0x44>)
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	60d3      	str	r3, [r2, #12]
}
 8001c40:	bf00      	nop
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c54:	4b04      	ldr	r3, [pc, #16]	; (8001c68 <__NVIC_GetPriorityGrouping+0x18>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	0a1b      	lsrs	r3, r3, #8
 8001c5a:	f003 0307 	and.w	r3, r3, #7
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	db0b      	blt.n	8001c96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	f003 021f 	and.w	r2, r3, #31
 8001c84:	4907      	ldr	r1, [pc, #28]	; (8001ca4 <__NVIC_EnableIRQ+0x38>)
 8001c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8a:	095b      	lsrs	r3, r3, #5
 8001c8c:	2001      	movs	r0, #1
 8001c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	e000e100 	.word	0xe000e100

08001ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	6039      	str	r1, [r7, #0]
 8001cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	db0a      	blt.n	8001cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	490c      	ldr	r1, [pc, #48]	; (8001cf4 <__NVIC_SetPriority+0x4c>)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	0112      	lsls	r2, r2, #4
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	440b      	add	r3, r1
 8001ccc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd0:	e00a      	b.n	8001ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	4908      	ldr	r1, [pc, #32]	; (8001cf8 <__NVIC_SetPriority+0x50>)
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	3b04      	subs	r3, #4
 8001ce0:	0112      	lsls	r2, r2, #4
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	761a      	strb	r2, [r3, #24]
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000e100 	.word	0xe000e100
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b089      	sub	sp, #36	; 0x24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f1c3 0307 	rsb	r3, r3, #7
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	bf28      	it	cs
 8001d1a:	2304      	movcs	r3, #4
 8001d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	3304      	adds	r3, #4
 8001d22:	2b06      	cmp	r3, #6
 8001d24:	d902      	bls.n	8001d2c <NVIC_EncodePriority+0x30>
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3b03      	subs	r3, #3
 8001d2a:	e000      	b.n	8001d2e <NVIC_EncodePriority+0x32>
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d30:	f04f 32ff 	mov.w	r2, #4294967295
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43da      	mvns	r2, r3
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	401a      	ands	r2, r3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d44:	f04f 31ff 	mov.w	r1, #4294967295
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4e:	43d9      	mvns	r1, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d54:	4313      	orrs	r3, r2
         );
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3724      	adds	r7, #36	; 0x24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7ff ff4c 	bl	8001c08 <__NVIC_SetPriorityGrouping>
}
 8001d70:	bf00      	nop
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
 8001d84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d8a:	f7ff ff61 	bl	8001c50 <__NVIC_GetPriorityGrouping>
 8001d8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	68b9      	ldr	r1, [r7, #8]
 8001d94:	6978      	ldr	r0, [r7, #20]
 8001d96:	f7ff ffb1 	bl	8001cfc <NVIC_EncodePriority>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da0:	4611      	mov	r1, r2
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff ff80 	bl	8001ca8 <__NVIC_SetPriority>
}
 8001da8:	bf00      	nop
 8001daa:	3718      	adds	r7, #24
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff ff54 	bl	8001c6c <__NVIC_EnableIRQ>
}
 8001dc4:	bf00      	nop
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001dda:	f7ff fee5 	bl	8001ba8 <HAL_GetTick>
 8001dde:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d008      	beq.n	8001dfe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2280      	movs	r2, #128	; 0x80
 8001df0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e052      	b.n	8001ea4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 0216 	bic.w	r2, r2, #22
 8001e0c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	695a      	ldr	r2, [r3, #20]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e1c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d103      	bne.n	8001e2e <HAL_DMA_Abort+0x62>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d007      	beq.n	8001e3e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 0208 	bic.w	r2, r2, #8
 8001e3c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 0201 	bic.w	r2, r2, #1
 8001e4c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e4e:	e013      	b.n	8001e78 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e50:	f7ff feaa 	bl	8001ba8 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b05      	cmp	r3, #5
 8001e5c:	d90c      	bls.n	8001e78 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2220      	movs	r2, #32
 8001e62:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2203      	movs	r2, #3
 8001e68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e015      	b.n	8001ea4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1e4      	bne.n	8001e50 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8a:	223f      	movs	r2, #63	; 0x3f
 8001e8c:	409a      	lsls	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d004      	beq.n	8001eca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2280      	movs	r2, #128	; 0x80
 8001ec4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e00c      	b.n	8001ee4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2205      	movs	r2, #5
 8001ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 0201 	bic.w	r2, r2, #1
 8001ee0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b089      	sub	sp, #36	; 0x24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f06:	2300      	movs	r3, #0
 8001f08:	61fb      	str	r3, [r7, #28]
 8001f0a:	e165      	b.n	80021d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	f040 8154 	bne.w	80021d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d005      	beq.n	8001f42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d130      	bne.n	8001fa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	2203      	movs	r2, #3
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43db      	mvns	r3, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4013      	ands	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	68da      	ldr	r2, [r3, #12]
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f78:	2201      	movs	r2, #1
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	091b      	lsrs	r3, r3, #4
 8001f8e:	f003 0201 	and.w	r2, r3, #1
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 0303 	and.w	r3, r3, #3
 8001fac:	2b03      	cmp	r3, #3
 8001fae:	d017      	beq.n	8001fe0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	2203      	movs	r2, #3
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d123      	bne.n	8002034 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	08da      	lsrs	r2, r3, #3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3208      	adds	r2, #8
 8001ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	220f      	movs	r2, #15
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	691a      	ldr	r2, [r3, #16]
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4313      	orrs	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	08da      	lsrs	r2, r3, #3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	3208      	adds	r2, #8
 800202e:	69b9      	ldr	r1, [r7, #24]
 8002030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	2203      	movs	r2, #3
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	43db      	mvns	r3, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4013      	ands	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 0203 	and.w	r2, r3, #3
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4313      	orrs	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 80ae 	beq.w	80021d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	4b5d      	ldr	r3, [pc, #372]	; (80021f0 <HAL_GPIO_Init+0x300>)
 800207c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207e:	4a5c      	ldr	r2, [pc, #368]	; (80021f0 <HAL_GPIO_Init+0x300>)
 8002080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002084:	6453      	str	r3, [r2, #68]	; 0x44
 8002086:	4b5a      	ldr	r3, [pc, #360]	; (80021f0 <HAL_GPIO_Init+0x300>)
 8002088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002092:	4a58      	ldr	r2, [pc, #352]	; (80021f4 <HAL_GPIO_Init+0x304>)
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	089b      	lsrs	r3, r3, #2
 8002098:	3302      	adds	r3, #2
 800209a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800209e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	220f      	movs	r2, #15
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4013      	ands	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a4f      	ldr	r2, [pc, #316]	; (80021f8 <HAL_GPIO_Init+0x308>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d025      	beq.n	800210a <HAL_GPIO_Init+0x21a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a4e      	ldr	r2, [pc, #312]	; (80021fc <HAL_GPIO_Init+0x30c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d01f      	beq.n	8002106 <HAL_GPIO_Init+0x216>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a4d      	ldr	r2, [pc, #308]	; (8002200 <HAL_GPIO_Init+0x310>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d019      	beq.n	8002102 <HAL_GPIO_Init+0x212>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a4c      	ldr	r2, [pc, #304]	; (8002204 <HAL_GPIO_Init+0x314>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d013      	beq.n	80020fe <HAL_GPIO_Init+0x20e>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a4b      	ldr	r2, [pc, #300]	; (8002208 <HAL_GPIO_Init+0x318>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d00d      	beq.n	80020fa <HAL_GPIO_Init+0x20a>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a4a      	ldr	r2, [pc, #296]	; (800220c <HAL_GPIO_Init+0x31c>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d007      	beq.n	80020f6 <HAL_GPIO_Init+0x206>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a49      	ldr	r2, [pc, #292]	; (8002210 <HAL_GPIO_Init+0x320>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d101      	bne.n	80020f2 <HAL_GPIO_Init+0x202>
 80020ee:	2306      	movs	r3, #6
 80020f0:	e00c      	b.n	800210c <HAL_GPIO_Init+0x21c>
 80020f2:	2307      	movs	r3, #7
 80020f4:	e00a      	b.n	800210c <HAL_GPIO_Init+0x21c>
 80020f6:	2305      	movs	r3, #5
 80020f8:	e008      	b.n	800210c <HAL_GPIO_Init+0x21c>
 80020fa:	2304      	movs	r3, #4
 80020fc:	e006      	b.n	800210c <HAL_GPIO_Init+0x21c>
 80020fe:	2303      	movs	r3, #3
 8002100:	e004      	b.n	800210c <HAL_GPIO_Init+0x21c>
 8002102:	2302      	movs	r3, #2
 8002104:	e002      	b.n	800210c <HAL_GPIO_Init+0x21c>
 8002106:	2301      	movs	r3, #1
 8002108:	e000      	b.n	800210c <HAL_GPIO_Init+0x21c>
 800210a:	2300      	movs	r3, #0
 800210c:	69fa      	ldr	r2, [r7, #28]
 800210e:	f002 0203 	and.w	r2, r2, #3
 8002112:	0092      	lsls	r2, r2, #2
 8002114:	4093      	lsls	r3, r2
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4313      	orrs	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800211c:	4935      	ldr	r1, [pc, #212]	; (80021f4 <HAL_GPIO_Init+0x304>)
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	089b      	lsrs	r3, r3, #2
 8002122:	3302      	adds	r3, #2
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800212a:	4b3a      	ldr	r3, [pc, #232]	; (8002214 <HAL_GPIO_Init+0x324>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	43db      	mvns	r3, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4013      	ands	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800214e:	4a31      	ldr	r2, [pc, #196]	; (8002214 <HAL_GPIO_Init+0x324>)
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002154:	4b2f      	ldr	r3, [pc, #188]	; (8002214 <HAL_GPIO_Init+0x324>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	4313      	orrs	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002178:	4a26      	ldr	r2, [pc, #152]	; (8002214 <HAL_GPIO_Init+0x324>)
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800217e:	4b25      	ldr	r3, [pc, #148]	; (8002214 <HAL_GPIO_Init+0x324>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	43db      	mvns	r3, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4013      	ands	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	4313      	orrs	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021a2:	4a1c      	ldr	r2, [pc, #112]	; (8002214 <HAL_GPIO_Init+0x324>)
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021a8:	4b1a      	ldr	r3, [pc, #104]	; (8002214 <HAL_GPIO_Init+0x324>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	43db      	mvns	r3, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4013      	ands	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d003      	beq.n	80021cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021cc:	4a11      	ldr	r2, [pc, #68]	; (8002214 <HAL_GPIO_Init+0x324>)
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	3301      	adds	r3, #1
 80021d6:	61fb      	str	r3, [r7, #28]
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	2b0f      	cmp	r3, #15
 80021dc:	f67f ae96 	bls.w	8001f0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021e0:	bf00      	nop
 80021e2:	bf00      	nop
 80021e4:	3724      	adds	r7, #36	; 0x24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	40023800 	.word	0x40023800
 80021f4:	40013800 	.word	0x40013800
 80021f8:	40020000 	.word	0x40020000
 80021fc:	40020400 	.word	0x40020400
 8002200:	40020800 	.word	0x40020800
 8002204:	40020c00 	.word	0x40020c00
 8002208:	40021000 	.word	0x40021000
 800220c:	40021400 	.word	0x40021400
 8002210:	40021800 	.word	0x40021800
 8002214:	40013c00 	.word	0x40013c00

08002218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	807b      	strh	r3, [r7, #2]
 8002224:	4613      	mov	r3, r2
 8002226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002228:	787b      	ldrb	r3, [r7, #1]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800222e:	887a      	ldrh	r2, [r7, #2]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002234:	e003      	b.n	800223e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002236:	887b      	ldrh	r3, [r7, #2]
 8002238:	041a      	lsls	r2, r3, #16
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	619a      	str	r2, [r3, #24]
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
	...

0800224c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002256:	4b08      	ldr	r3, [pc, #32]	; (8002278 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002258:	695a      	ldr	r2, [r3, #20]
 800225a:	88fb      	ldrh	r3, [r7, #6]
 800225c:	4013      	ands	r3, r2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d006      	beq.n	8002270 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002262:	4a05      	ldr	r2, [pc, #20]	; (8002278 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002264:	88fb      	ldrh	r3, [r7, #6]
 8002266:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002268:	88fb      	ldrh	r3, [r7, #6]
 800226a:	4618      	mov	r0, r3
 800226c:	f7fe fed6 	bl	800101c <HAL_GPIO_EXTI_Callback>
  }
}
 8002270:	bf00      	nop
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40013c00 	.word	0x40013c00

0800227c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800227c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800227e:	b08f      	sub	sp, #60	; 0x3c
 8002280:	af0a      	add	r7, sp, #40	; 0x28
 8002282:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e054      	b.n	8002338 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	d106      	bne.n	80022ae <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f00f f863 	bl	8011374 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2203      	movs	r2, #3
 80022b2:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d102      	bne.n	80022c8 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f005 fd3c 	bl	8007d4a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	603b      	str	r3, [r7, #0]
 80022d8:	687e      	ldr	r6, [r7, #4]
 80022da:	466d      	mov	r5, sp
 80022dc:	f106 0410 	add.w	r4, r6, #16
 80022e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80022f0:	1d33      	adds	r3, r6, #4
 80022f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022f4:	6838      	ldr	r0, [r7, #0]
 80022f6:	f005 fc13 	bl	8007b20 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2101      	movs	r1, #1
 8002300:	4618      	mov	r0, r3
 8002302:	f005 fd33 	bl	8007d6c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	603b      	str	r3, [r7, #0]
 800230c:	687e      	ldr	r6, [r7, #4]
 800230e:	466d      	mov	r5, sp
 8002310:	f106 0410 	add.w	r4, r6, #16
 8002314:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002316:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002318:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800231a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800231c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002320:	e885 0003 	stmia.w	r5, {r0, r1}
 8002324:	1d33      	adds	r3, r6, #4
 8002326:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002328:	6838      	ldr	r0, [r7, #0]
 800232a:	f007 f841 	bl	80093b0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002340 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002340:	b590      	push	{r4, r7, lr}
 8002342:	b089      	sub	sp, #36	; 0x24
 8002344:	af04      	add	r7, sp, #16
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	4608      	mov	r0, r1
 800234a:	4611      	mov	r1, r2
 800234c:	461a      	mov	r2, r3
 800234e:	4603      	mov	r3, r0
 8002350:	70fb      	strb	r3, [r7, #3]
 8002352:	460b      	mov	r3, r1
 8002354:	70bb      	strb	r3, [r7, #2]
 8002356:	4613      	mov	r3, r2
 8002358:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <HAL_HCD_HC_Init+0x28>
 8002364:	2302      	movs	r3, #2
 8002366:	e076      	b.n	8002456 <HAL_HCD_HC_Init+0x116>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002370:	78fb      	ldrb	r3, [r7, #3]
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	212c      	movs	r1, #44	; 0x2c
 8002376:	fb01 f303 	mul.w	r3, r1, r3
 800237a:	4413      	add	r3, r2
 800237c:	333d      	adds	r3, #61	; 0x3d
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002382:	78fb      	ldrb	r3, [r7, #3]
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	212c      	movs	r1, #44	; 0x2c
 8002388:	fb01 f303 	mul.w	r3, r1, r3
 800238c:	4413      	add	r3, r2
 800238e:	3338      	adds	r3, #56	; 0x38
 8002390:	787a      	ldrb	r2, [r7, #1]
 8002392:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	212c      	movs	r1, #44	; 0x2c
 800239a:	fb01 f303 	mul.w	r3, r1, r3
 800239e:	4413      	add	r3, r2
 80023a0:	3340      	adds	r3, #64	; 0x40
 80023a2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80023a4:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80023a6:	78fb      	ldrb	r3, [r7, #3]
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	212c      	movs	r1, #44	; 0x2c
 80023ac:	fb01 f303 	mul.w	r3, r1, r3
 80023b0:	4413      	add	r3, r2
 80023b2:	3339      	adds	r3, #57	; 0x39
 80023b4:	78fa      	ldrb	r2, [r7, #3]
 80023b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80023b8:	78fb      	ldrb	r3, [r7, #3]
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	212c      	movs	r1, #44	; 0x2c
 80023be:	fb01 f303 	mul.w	r3, r1, r3
 80023c2:	4413      	add	r3, r2
 80023c4:	333f      	adds	r3, #63	; 0x3f
 80023c6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80023ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80023cc:	78fb      	ldrb	r3, [r7, #3]
 80023ce:	78ba      	ldrb	r2, [r7, #2]
 80023d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023d4:	b2d0      	uxtb	r0, r2
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	212c      	movs	r1, #44	; 0x2c
 80023da:	fb01 f303 	mul.w	r3, r1, r3
 80023de:	4413      	add	r3, r2
 80023e0:	333a      	adds	r3, #58	; 0x3a
 80023e2:	4602      	mov	r2, r0
 80023e4:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80023e6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	da09      	bge.n	8002402 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80023ee:	78fb      	ldrb	r3, [r7, #3]
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	212c      	movs	r1, #44	; 0x2c
 80023f4:	fb01 f303 	mul.w	r3, r1, r3
 80023f8:	4413      	add	r3, r2
 80023fa:	333b      	adds	r3, #59	; 0x3b
 80023fc:	2201      	movs	r2, #1
 80023fe:	701a      	strb	r2, [r3, #0]
 8002400:	e008      	b.n	8002414 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002402:	78fb      	ldrb	r3, [r7, #3]
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	212c      	movs	r1, #44	; 0x2c
 8002408:	fb01 f303 	mul.w	r3, r1, r3
 800240c:	4413      	add	r3, r2
 800240e:	333b      	adds	r3, #59	; 0x3b
 8002410:	2200      	movs	r2, #0
 8002412:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002414:	78fb      	ldrb	r3, [r7, #3]
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	212c      	movs	r1, #44	; 0x2c
 800241a:	fb01 f303 	mul.w	r3, r1, r3
 800241e:	4413      	add	r3, r2
 8002420:	333c      	adds	r3, #60	; 0x3c
 8002422:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002426:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6818      	ldr	r0, [r3, #0]
 800242c:	787c      	ldrb	r4, [r7, #1]
 800242e:	78ba      	ldrb	r2, [r7, #2]
 8002430:	78f9      	ldrb	r1, [r7, #3]
 8002432:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002434:	9302      	str	r3, [sp, #8]
 8002436:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800243a:	9301      	str	r3, [sp, #4]
 800243c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	4623      	mov	r3, r4
 8002444:	f007 f92e 	bl	80096a4 <USB_HC_Init>
 8002448:	4603      	mov	r3, r0
 800244a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002454:	7bfb      	ldrb	r3, [r7, #15]
}
 8002456:	4618      	mov	r0, r3
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	bd90      	pop	{r4, r7, pc}

0800245e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b084      	sub	sp, #16
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
 8002466:	460b      	mov	r3, r1
 8002468:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800246a:	2300      	movs	r3, #0
 800246c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002474:	2b01      	cmp	r3, #1
 8002476:	d101      	bne.n	800247c <HAL_HCD_HC_Halt+0x1e>
 8002478:	2302      	movs	r3, #2
 800247a:	e00f      	b.n	800249c <HAL_HCD_HC_Halt+0x3e>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	78fa      	ldrb	r2, [r7, #3]
 800248a:	4611      	mov	r1, r2
 800248c:	4618      	mov	r0, r3
 800248e:	f007 fb7e 	bl	8009b8e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800249a:	7bfb      	ldrb	r3, [r7, #15]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	4608      	mov	r0, r1
 80024ae:	4611      	mov	r1, r2
 80024b0:	461a      	mov	r2, r3
 80024b2:	4603      	mov	r3, r0
 80024b4:	70fb      	strb	r3, [r7, #3]
 80024b6:	460b      	mov	r3, r1
 80024b8:	70bb      	strb	r3, [r7, #2]
 80024ba:	4613      	mov	r3, r2
 80024bc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80024be:	78fb      	ldrb	r3, [r7, #3]
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	212c      	movs	r1, #44	; 0x2c
 80024c4:	fb01 f303 	mul.w	r3, r1, r3
 80024c8:	4413      	add	r3, r2
 80024ca:	333b      	adds	r3, #59	; 0x3b
 80024cc:	78ba      	ldrb	r2, [r7, #2]
 80024ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80024d0:	78fb      	ldrb	r3, [r7, #3]
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	212c      	movs	r1, #44	; 0x2c
 80024d6:	fb01 f303 	mul.w	r3, r1, r3
 80024da:	4413      	add	r3, r2
 80024dc:	333f      	adds	r3, #63	; 0x3f
 80024de:	787a      	ldrb	r2, [r7, #1]
 80024e0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80024e2:	7c3b      	ldrb	r3, [r7, #16]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d112      	bne.n	800250e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80024e8:	78fb      	ldrb	r3, [r7, #3]
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	212c      	movs	r1, #44	; 0x2c
 80024ee:	fb01 f303 	mul.w	r3, r1, r3
 80024f2:	4413      	add	r3, r2
 80024f4:	3342      	adds	r3, #66	; 0x42
 80024f6:	2203      	movs	r2, #3
 80024f8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80024fa:	78fb      	ldrb	r3, [r7, #3]
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	212c      	movs	r1, #44	; 0x2c
 8002500:	fb01 f303 	mul.w	r3, r1, r3
 8002504:	4413      	add	r3, r2
 8002506:	333d      	adds	r3, #61	; 0x3d
 8002508:	7f3a      	ldrb	r2, [r7, #28]
 800250a:	701a      	strb	r2, [r3, #0]
 800250c:	e008      	b.n	8002520 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800250e:	78fb      	ldrb	r3, [r7, #3]
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	212c      	movs	r1, #44	; 0x2c
 8002514:	fb01 f303 	mul.w	r3, r1, r3
 8002518:	4413      	add	r3, r2
 800251a:	3342      	adds	r3, #66	; 0x42
 800251c:	2202      	movs	r2, #2
 800251e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002520:	787b      	ldrb	r3, [r7, #1]
 8002522:	2b03      	cmp	r3, #3
 8002524:	f200 80c6 	bhi.w	80026b4 <HAL_HCD_HC_SubmitRequest+0x210>
 8002528:	a201      	add	r2, pc, #4	; (adr r2, 8002530 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800252a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800252e:	bf00      	nop
 8002530:	08002541 	.word	0x08002541
 8002534:	080026a1 	.word	0x080026a1
 8002538:	080025a5 	.word	0x080025a5
 800253c:	08002623 	.word	0x08002623
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002540:	7c3b      	ldrb	r3, [r7, #16]
 8002542:	2b01      	cmp	r3, #1
 8002544:	f040 80b8 	bne.w	80026b8 <HAL_HCD_HC_SubmitRequest+0x214>
 8002548:	78bb      	ldrb	r3, [r7, #2]
 800254a:	2b00      	cmp	r3, #0
 800254c:	f040 80b4 	bne.w	80026b8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002550:	8b3b      	ldrh	r3, [r7, #24]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d108      	bne.n	8002568 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002556:	78fb      	ldrb	r3, [r7, #3]
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	212c      	movs	r1, #44	; 0x2c
 800255c:	fb01 f303 	mul.w	r3, r1, r3
 8002560:	4413      	add	r3, r2
 8002562:	3355      	adds	r3, #85	; 0x55
 8002564:	2201      	movs	r2, #1
 8002566:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002568:	78fb      	ldrb	r3, [r7, #3]
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	212c      	movs	r1, #44	; 0x2c
 800256e:	fb01 f303 	mul.w	r3, r1, r3
 8002572:	4413      	add	r3, r2
 8002574:	3355      	adds	r3, #85	; 0x55
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d109      	bne.n	8002590 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800257c:	78fb      	ldrb	r3, [r7, #3]
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	212c      	movs	r1, #44	; 0x2c
 8002582:	fb01 f303 	mul.w	r3, r1, r3
 8002586:	4413      	add	r3, r2
 8002588:	3342      	adds	r3, #66	; 0x42
 800258a:	2200      	movs	r2, #0
 800258c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800258e:	e093      	b.n	80026b8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002590:	78fb      	ldrb	r3, [r7, #3]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	212c      	movs	r1, #44	; 0x2c
 8002596:	fb01 f303 	mul.w	r3, r1, r3
 800259a:	4413      	add	r3, r2
 800259c:	3342      	adds	r3, #66	; 0x42
 800259e:	2202      	movs	r2, #2
 80025a0:	701a      	strb	r2, [r3, #0]
      break;
 80025a2:	e089      	b.n	80026b8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80025a4:	78bb      	ldrb	r3, [r7, #2]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d11d      	bne.n	80025e6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80025aa:	78fb      	ldrb	r3, [r7, #3]
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	212c      	movs	r1, #44	; 0x2c
 80025b0:	fb01 f303 	mul.w	r3, r1, r3
 80025b4:	4413      	add	r3, r2
 80025b6:	3355      	adds	r3, #85	; 0x55
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d109      	bne.n	80025d2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025be:	78fb      	ldrb	r3, [r7, #3]
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	212c      	movs	r1, #44	; 0x2c
 80025c4:	fb01 f303 	mul.w	r3, r1, r3
 80025c8:	4413      	add	r3, r2
 80025ca:	3342      	adds	r3, #66	; 0x42
 80025cc:	2200      	movs	r2, #0
 80025ce:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80025d0:	e073      	b.n	80026ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025d2:	78fb      	ldrb	r3, [r7, #3]
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	212c      	movs	r1, #44	; 0x2c
 80025d8:	fb01 f303 	mul.w	r3, r1, r3
 80025dc:	4413      	add	r3, r2
 80025de:	3342      	adds	r3, #66	; 0x42
 80025e0:	2202      	movs	r2, #2
 80025e2:	701a      	strb	r2, [r3, #0]
      break;
 80025e4:	e069      	b.n	80026ba <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80025e6:	78fb      	ldrb	r3, [r7, #3]
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	212c      	movs	r1, #44	; 0x2c
 80025ec:	fb01 f303 	mul.w	r3, r1, r3
 80025f0:	4413      	add	r3, r2
 80025f2:	3354      	adds	r3, #84	; 0x54
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d109      	bne.n	800260e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025fa:	78fb      	ldrb	r3, [r7, #3]
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	212c      	movs	r1, #44	; 0x2c
 8002600:	fb01 f303 	mul.w	r3, r1, r3
 8002604:	4413      	add	r3, r2
 8002606:	3342      	adds	r3, #66	; 0x42
 8002608:	2200      	movs	r2, #0
 800260a:	701a      	strb	r2, [r3, #0]
      break;
 800260c:	e055      	b.n	80026ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800260e:	78fb      	ldrb	r3, [r7, #3]
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	212c      	movs	r1, #44	; 0x2c
 8002614:	fb01 f303 	mul.w	r3, r1, r3
 8002618:	4413      	add	r3, r2
 800261a:	3342      	adds	r3, #66	; 0x42
 800261c:	2202      	movs	r2, #2
 800261e:	701a      	strb	r2, [r3, #0]
      break;
 8002620:	e04b      	b.n	80026ba <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002622:	78bb      	ldrb	r3, [r7, #2]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d11d      	bne.n	8002664 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002628:	78fb      	ldrb	r3, [r7, #3]
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	212c      	movs	r1, #44	; 0x2c
 800262e:	fb01 f303 	mul.w	r3, r1, r3
 8002632:	4413      	add	r3, r2
 8002634:	3355      	adds	r3, #85	; 0x55
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d109      	bne.n	8002650 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800263c:	78fb      	ldrb	r3, [r7, #3]
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	212c      	movs	r1, #44	; 0x2c
 8002642:	fb01 f303 	mul.w	r3, r1, r3
 8002646:	4413      	add	r3, r2
 8002648:	3342      	adds	r3, #66	; 0x42
 800264a:	2200      	movs	r2, #0
 800264c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800264e:	e034      	b.n	80026ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002650:	78fb      	ldrb	r3, [r7, #3]
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	212c      	movs	r1, #44	; 0x2c
 8002656:	fb01 f303 	mul.w	r3, r1, r3
 800265a:	4413      	add	r3, r2
 800265c:	3342      	adds	r3, #66	; 0x42
 800265e:	2202      	movs	r2, #2
 8002660:	701a      	strb	r2, [r3, #0]
      break;
 8002662:	e02a      	b.n	80026ba <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002664:	78fb      	ldrb	r3, [r7, #3]
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	212c      	movs	r1, #44	; 0x2c
 800266a:	fb01 f303 	mul.w	r3, r1, r3
 800266e:	4413      	add	r3, r2
 8002670:	3354      	adds	r3, #84	; 0x54
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d109      	bne.n	800268c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002678:	78fb      	ldrb	r3, [r7, #3]
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	212c      	movs	r1, #44	; 0x2c
 800267e:	fb01 f303 	mul.w	r3, r1, r3
 8002682:	4413      	add	r3, r2
 8002684:	3342      	adds	r3, #66	; 0x42
 8002686:	2200      	movs	r2, #0
 8002688:	701a      	strb	r2, [r3, #0]
      break;
 800268a:	e016      	b.n	80026ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800268c:	78fb      	ldrb	r3, [r7, #3]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	212c      	movs	r1, #44	; 0x2c
 8002692:	fb01 f303 	mul.w	r3, r1, r3
 8002696:	4413      	add	r3, r2
 8002698:	3342      	adds	r3, #66	; 0x42
 800269a:	2202      	movs	r2, #2
 800269c:	701a      	strb	r2, [r3, #0]
      break;
 800269e:	e00c      	b.n	80026ba <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026a0:	78fb      	ldrb	r3, [r7, #3]
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	212c      	movs	r1, #44	; 0x2c
 80026a6:	fb01 f303 	mul.w	r3, r1, r3
 80026aa:	4413      	add	r3, r2
 80026ac:	3342      	adds	r3, #66	; 0x42
 80026ae:	2200      	movs	r2, #0
 80026b0:	701a      	strb	r2, [r3, #0]
      break;
 80026b2:	e002      	b.n	80026ba <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80026b4:	bf00      	nop
 80026b6:	e000      	b.n	80026ba <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80026b8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80026ba:	78fb      	ldrb	r3, [r7, #3]
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	212c      	movs	r1, #44	; 0x2c
 80026c0:	fb01 f303 	mul.w	r3, r1, r3
 80026c4:	4413      	add	r3, r2
 80026c6:	3344      	adds	r3, #68	; 0x44
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80026cc:	78fb      	ldrb	r3, [r7, #3]
 80026ce:	8b3a      	ldrh	r2, [r7, #24]
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	202c      	movs	r0, #44	; 0x2c
 80026d4:	fb00 f303 	mul.w	r3, r0, r3
 80026d8:	440b      	add	r3, r1
 80026da:	334c      	adds	r3, #76	; 0x4c
 80026dc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80026de:	78fb      	ldrb	r3, [r7, #3]
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	212c      	movs	r1, #44	; 0x2c
 80026e4:	fb01 f303 	mul.w	r3, r1, r3
 80026e8:	4413      	add	r3, r2
 80026ea:	3360      	adds	r3, #96	; 0x60
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80026f0:	78fb      	ldrb	r3, [r7, #3]
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	212c      	movs	r1, #44	; 0x2c
 80026f6:	fb01 f303 	mul.w	r3, r1, r3
 80026fa:	4413      	add	r3, r2
 80026fc:	3350      	adds	r3, #80	; 0x50
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002702:	78fb      	ldrb	r3, [r7, #3]
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	212c      	movs	r1, #44	; 0x2c
 8002708:	fb01 f303 	mul.w	r3, r1, r3
 800270c:	4413      	add	r3, r2
 800270e:	3339      	adds	r3, #57	; 0x39
 8002710:	78fa      	ldrb	r2, [r7, #3]
 8002712:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002714:	78fb      	ldrb	r3, [r7, #3]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	212c      	movs	r1, #44	; 0x2c
 800271a:	fb01 f303 	mul.w	r3, r1, r3
 800271e:	4413      	add	r3, r2
 8002720:	3361      	adds	r3, #97	; 0x61
 8002722:	2200      	movs	r2, #0
 8002724:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6818      	ldr	r0, [r3, #0]
 800272a:	78fb      	ldrb	r3, [r7, #3]
 800272c:	222c      	movs	r2, #44	; 0x2c
 800272e:	fb02 f303 	mul.w	r3, r2, r3
 8002732:	3338      	adds	r3, #56	; 0x38
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	18d1      	adds	r1, r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	b2db      	uxtb	r3, r3
 800273e:	461a      	mov	r2, r3
 8002740:	f007 f8d2 	bl	80098e8 <USB_HC_StartXfer>
 8002744:	4603      	mov	r3, r0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop

08002750 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f006 fd5f 	bl	800922a <USB_GetMode>
 800276c:	4603      	mov	r3, r0
 800276e:	2b01      	cmp	r3, #1
 8002770:	f040 80f6 	bne.w	8002960 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	f006 fcc3 	bl	8009104 <USB_ReadInterrupts>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 80ec 	beq.w	800295e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f006 fcba 	bl	8009104 <USB_ReadInterrupts>
 8002790:	4603      	mov	r3, r0
 8002792:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002796:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800279a:	d104      	bne.n	80027a6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80027a4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f006 fcaa 	bl	8009104 <USB_ReadInterrupts>
 80027b0:	4603      	mov	r3, r0
 80027b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027ba:	d104      	bne.n	80027c6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80027c4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f006 fc9a 	bl	8009104 <USB_ReadInterrupts>
 80027d0:	4603      	mov	r3, r0
 80027d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027da:	d104      	bne.n	80027e6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80027e4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f006 fc8a 	bl	8009104 <USB_ReadInterrupts>
 80027f0:	4603      	mov	r3, r0
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d103      	bne.n	8002802 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2202      	movs	r2, #2
 8002800:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f006 fc7c 	bl	8009104 <USB_ReadInterrupts>
 800280c:	4603      	mov	r3, r0
 800280e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002812:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002816:	d11c      	bne.n	8002852 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002820:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10f      	bne.n	8002852 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002832:	2110      	movs	r1, #16
 8002834:	6938      	ldr	r0, [r7, #16]
 8002836:	f005 fc43 	bl	80080c0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800283a:	6938      	ldr	r0, [r7, #16]
 800283c:	f005 fc74 	bl	8008128 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2101      	movs	r1, #1
 8002846:	4618      	mov	r0, r3
 8002848:	f006 fe66 	bl	8009518 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f00e fe25 	bl	801149c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f006 fc54 	bl	8009104 <USB_ReadInterrupts>
 800285c:	4603      	mov	r3, r0
 800285e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002862:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002866:	d102      	bne.n	800286e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f001 f89e 	bl	80039aa <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f006 fc46 	bl	8009104 <USB_ReadInterrupts>
 8002878:	4603      	mov	r3, r0
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b08      	cmp	r3, #8
 8002880:	d106      	bne.n	8002890 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f00e fdee 	bl	8011464 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2208      	movs	r2, #8
 800288e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4618      	mov	r0, r3
 8002896:	f006 fc35 	bl	8009104 <USB_ReadInterrupts>
 800289a:	4603      	mov	r3, r0
 800289c:	f003 0310 	and.w	r3, r3, #16
 80028a0:	2b10      	cmp	r3, #16
 80028a2:	d101      	bne.n	80028a8 <HAL_HCD_IRQHandler+0x158>
 80028a4:	2301      	movs	r3, #1
 80028a6:	e000      	b.n	80028aa <HAL_HCD_IRQHandler+0x15a>
 80028a8:	2300      	movs	r3, #0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d012      	beq.n	80028d4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	699a      	ldr	r2, [r3, #24]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 0210 	bic.w	r2, r2, #16
 80028bc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 ffa1 	bl	8003806 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	699a      	ldr	r2, [r3, #24]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f042 0210 	orr.w	r2, r2, #16
 80028d2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f006 fc13 	bl	8009104 <USB_ReadInterrupts>
 80028de:	4603      	mov	r3, r0
 80028e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028e8:	d13a      	bne.n	8002960 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f007 f93c 	bl	8009b6c <USB_HC_ReadInterrupt>
 80028f4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80028f6:	2300      	movs	r3, #0
 80028f8:	617b      	str	r3, [r7, #20]
 80028fa:	e025      	b.n	8002948 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	fa22 f303 	lsr.w	r3, r2, r3
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b00      	cmp	r3, #0
 800290e:	d018      	beq.n	8002942 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	015a      	lsls	r2, r3, #5
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4413      	add	r3, r2
 8002918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002922:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002926:	d106      	bne.n	8002936 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	b2db      	uxtb	r3, r3
 800292c:	4619      	mov	r1, r3
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f8ab 	bl	8002a8a <HCD_HC_IN_IRQHandler>
 8002934:	e005      	b.n	8002942 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	b2db      	uxtb	r3, r3
 800293a:	4619      	mov	r1, r3
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 fbf9 	bl	8003134 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	3301      	adds	r3, #1
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	429a      	cmp	r2, r3
 8002950:	d3d4      	bcc.n	80028fc <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800295a:	615a      	str	r2, [r3, #20]
 800295c:	e000      	b.n	8002960 <HAL_HCD_IRQHandler+0x210>
      return;
 800295e:	bf00      	nop
    }
  }
}
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b082      	sub	sp, #8
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002974:	2b01      	cmp	r3, #1
 8002976:	d101      	bne.n	800297c <HAL_HCD_Start+0x16>
 8002978:	2302      	movs	r3, #2
 800297a:	e013      	b.n	80029a4 <HAL_HCD_Start+0x3e>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2101      	movs	r1, #1
 800298a:	4618      	mov	r0, r3
 800298c:	f006 fe28 	bl	80095e0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f005 f9c7 	bl	8007d28 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d101      	bne.n	80029c2 <HAL_HCD_Stop+0x16>
 80029be:	2302      	movs	r3, #2
 80029c0:	e00d      	b.n	80029de <HAL_HCD_Stop+0x32>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f007 fa16 	bl	8009e00 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b082      	sub	sp, #8
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f006 fdca 	bl	800958c <USB_ResetPort>
 80029f8:	4603      	mov	r3, r0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002a0e:	78fb      	ldrb	r3, [r7, #3]
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	212c      	movs	r1, #44	; 0x2c
 8002a14:	fb01 f303 	mul.w	r3, r1, r3
 8002a18:	4413      	add	r3, r2
 8002a1a:	3360      	adds	r3, #96	; 0x60
 8002a1c:	781b      	ldrb	r3, [r3, #0]
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
 8002a32:	460b      	mov	r3, r1
 8002a34:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002a36:	78fb      	ldrb	r3, [r7, #3]
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	212c      	movs	r1, #44	; 0x2c
 8002a3c:	fb01 f303 	mul.w	r3, r1, r3
 8002a40:	4413      	add	r3, r2
 8002a42:	3350      	adds	r3, #80	; 0x50
 8002a44:	681b      	ldr	r3, [r3, #0]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b082      	sub	sp, #8
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f006 fe0e 	bl	8009680 <USB_GetCurrentFrame>
 8002a64:	4603      	mov	r3, r0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b082      	sub	sp, #8
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f006 fde9 	bl	8009652 <USB_GetHostSpeed>
 8002a80:	4603      	mov	r3, r0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b086      	sub	sp, #24
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
 8002a92:	460b      	mov	r3, r1
 8002a94:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002aa0:	78fb      	ldrb	r3, [r7, #3]
 8002aa2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	015a      	lsls	r2, r3, #5
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 0304 	and.w	r3, r3, #4
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d11a      	bne.n	8002af0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	015a      	lsls	r2, r3, #5
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	2304      	movs	r3, #4
 8002aca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	212c      	movs	r1, #44	; 0x2c
 8002ad2:	fb01 f303 	mul.w	r3, r1, r3
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3361      	adds	r3, #97	; 0x61
 8002ada:	2206      	movs	r2, #6
 8002adc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	4611      	mov	r1, r2
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f007 f850 	bl	8009b8e <USB_HC_Halt>
 8002aee:	e0af      	b.n	8002c50 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	015a      	lsls	r2, r3, #5
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	4413      	add	r3, r2
 8002af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b06:	d11b      	bne.n	8002b40 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	015a      	lsls	r2, r3, #5
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b14:	461a      	mov	r2, r3
 8002b16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b1a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	212c      	movs	r1, #44	; 0x2c
 8002b22:	fb01 f303 	mul.w	r3, r1, r3
 8002b26:	4413      	add	r3, r2
 8002b28:	3361      	adds	r3, #97	; 0x61
 8002b2a:	2207      	movs	r2, #7
 8002b2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	4611      	mov	r1, r2
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f007 f828 	bl	8009b8e <USB_HC_Halt>
 8002b3e:	e087      	b.n	8002c50 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	015a      	lsls	r2, r3, #5
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	4413      	add	r3, r2
 8002b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 0320 	and.w	r3, r3, #32
 8002b52:	2b20      	cmp	r3, #32
 8002b54:	d109      	bne.n	8002b6a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	015a      	lsls	r2, r3, #5
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b62:	461a      	mov	r2, r3
 8002b64:	2320      	movs	r3, #32
 8002b66:	6093      	str	r3, [r2, #8]
 8002b68:	e072      	b.n	8002c50 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	015a      	lsls	r2, r3, #5
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	4413      	add	r3, r2
 8002b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	2b08      	cmp	r3, #8
 8002b7e:	d11a      	bne.n	8002bb6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	015a      	lsls	r2, r3, #5
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	4413      	add	r3, r2
 8002b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	2308      	movs	r3, #8
 8002b90:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	212c      	movs	r1, #44	; 0x2c
 8002b98:	fb01 f303 	mul.w	r3, r1, r3
 8002b9c:	4413      	add	r3, r2
 8002b9e:	3361      	adds	r3, #97	; 0x61
 8002ba0:	2205      	movs	r2, #5
 8002ba2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	4611      	mov	r1, r2
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f006 ffed 	bl	8009b8e <USB_HC_Halt>
 8002bb4:	e04c      	b.n	8002c50 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	015a      	lsls	r2, r3, #5
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bcc:	d11b      	bne.n	8002c06 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	015a      	lsls	r2, r3, #5
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bda:	461a      	mov	r2, r3
 8002bdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002be0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	212c      	movs	r1, #44	; 0x2c
 8002be8:	fb01 f303 	mul.w	r3, r1, r3
 8002bec:	4413      	add	r3, r2
 8002bee:	3361      	adds	r3, #97	; 0x61
 8002bf0:	2208      	movs	r2, #8
 8002bf2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	4611      	mov	r1, r2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f006 ffc5 	bl	8009b8e <USB_HC_Halt>
 8002c04:	e024      	b.n	8002c50 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	015a      	lsls	r2, r3, #5
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c18:	2b80      	cmp	r3, #128	; 0x80
 8002c1a:	d119      	bne.n	8002c50 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	015a      	lsls	r2, r3, #5
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	4413      	add	r3, r2
 8002c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c28:	461a      	mov	r2, r3
 8002c2a:	2380      	movs	r3, #128	; 0x80
 8002c2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	212c      	movs	r1, #44	; 0x2c
 8002c34:	fb01 f303 	mul.w	r3, r1, r3
 8002c38:	4413      	add	r3, r2
 8002c3a:	3361      	adds	r3, #97	; 0x61
 8002c3c:	2206      	movs	r2, #6
 8002c3e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	4611      	mov	r1, r2
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f006 ff9f 	bl	8009b8e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	015a      	lsls	r2, r3, #5
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	4413      	add	r3, r2
 8002c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c66:	d112      	bne.n	8002c8e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	4611      	mov	r1, r2
 8002c72:	4618      	mov	r0, r3
 8002c74:	f006 ff8b 	bl	8009b8e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	015a      	lsls	r2, r3, #5
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	4413      	add	r3, r2
 8002c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c84:	461a      	mov	r2, r3
 8002c86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c8a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002c8c:	e24e      	b.n	800312c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	015a      	lsls	r2, r3, #5
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	4413      	add	r3, r2
 8002c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	f040 80df 	bne.w	8002e64 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d019      	beq.n	8002ce2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	212c      	movs	r1, #44	; 0x2c
 8002cb4:	fb01 f303 	mul.w	r3, r1, r3
 8002cb8:	4413      	add	r3, r2
 8002cba:	3348      	adds	r3, #72	; 0x48
 8002cbc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	0159      	lsls	r1, r3, #5
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	440b      	add	r3, r1
 8002cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002cd0:	1ad2      	subs	r2, r2, r3
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	202c      	movs	r0, #44	; 0x2c
 8002cd8:	fb00 f303 	mul.w	r3, r0, r3
 8002cdc:	440b      	add	r3, r1
 8002cde:	3350      	adds	r3, #80	; 0x50
 8002ce0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	212c      	movs	r1, #44	; 0x2c
 8002ce8:	fb01 f303 	mul.w	r3, r1, r3
 8002cec:	4413      	add	r3, r2
 8002cee:	3361      	adds	r3, #97	; 0x61
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	212c      	movs	r1, #44	; 0x2c
 8002cfa:	fb01 f303 	mul.w	r3, r1, r3
 8002cfe:	4413      	add	r3, r2
 8002d00:	335c      	adds	r3, #92	; 0x5c
 8002d02:	2200      	movs	r2, #0
 8002d04:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	015a      	lsls	r2, r3, #5
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d12:	461a      	mov	r2, r3
 8002d14:	2301      	movs	r3, #1
 8002d16:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	212c      	movs	r1, #44	; 0x2c
 8002d1e:	fb01 f303 	mul.w	r3, r1, r3
 8002d22:	4413      	add	r3, r2
 8002d24:	333f      	adds	r3, #63	; 0x3f
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d009      	beq.n	8002d40 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	212c      	movs	r1, #44	; 0x2c
 8002d32:	fb01 f303 	mul.w	r3, r1, r3
 8002d36:	4413      	add	r3, r2
 8002d38:	333f      	adds	r3, #63	; 0x3f
 8002d3a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d111      	bne.n	8002d64 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	b2d2      	uxtb	r2, r2
 8002d48:	4611      	mov	r1, r2
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f006 ff1f 	bl	8009b8e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	015a      	lsls	r2, r3, #5
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	4413      	add	r3, r2
 8002d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	2310      	movs	r3, #16
 8002d60:	6093      	str	r3, [r2, #8]
 8002d62:	e03a      	b.n	8002dda <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	212c      	movs	r1, #44	; 0x2c
 8002d6a:	fb01 f303 	mul.w	r3, r1, r3
 8002d6e:	4413      	add	r3, r2
 8002d70:	333f      	adds	r3, #63	; 0x3f
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	2b03      	cmp	r3, #3
 8002d76:	d009      	beq.n	8002d8c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	212c      	movs	r1, #44	; 0x2c
 8002d7e:	fb01 f303 	mul.w	r3, r1, r3
 8002d82:	4413      	add	r3, r2
 8002d84:	333f      	adds	r3, #63	; 0x3f
 8002d86:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d126      	bne.n	8002dda <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	015a      	lsls	r2, r3, #5
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	4413      	add	r3, r2
 8002d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	0151      	lsls	r1, r2, #5
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	440a      	add	r2, r1
 8002da2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002da6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002daa:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	212c      	movs	r1, #44	; 0x2c
 8002db2:	fb01 f303 	mul.w	r3, r1, r3
 8002db6:	4413      	add	r3, r2
 8002db8:	3360      	adds	r3, #96	; 0x60
 8002dba:	2201      	movs	r2, #1
 8002dbc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	b2d9      	uxtb	r1, r3
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	202c      	movs	r0, #44	; 0x2c
 8002dc8:	fb00 f303 	mul.w	r3, r0, r3
 8002dcc:	4413      	add	r3, r2
 8002dce:	3360      	adds	r3, #96	; 0x60
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f00e fb6f 	bl	80114b8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d12b      	bne.n	8002e3a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	212c      	movs	r1, #44	; 0x2c
 8002de8:	fb01 f303 	mul.w	r3, r1, r3
 8002dec:	4413      	add	r3, r2
 8002dee:	3348      	adds	r3, #72	; 0x48
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	202c      	movs	r0, #44	; 0x2c
 8002df8:	fb00 f202 	mul.w	r2, r0, r2
 8002dfc:	440a      	add	r2, r1
 8002dfe:	3240      	adds	r2, #64	; 0x40
 8002e00:	8812      	ldrh	r2, [r2, #0]
 8002e02:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f000 818e 	beq.w	800312c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	212c      	movs	r1, #44	; 0x2c
 8002e16:	fb01 f303 	mul.w	r3, r1, r3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	3354      	adds	r3, #84	; 0x54
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	f083 0301 	eor.w	r3, r3, #1
 8002e24:	b2d8      	uxtb	r0, r3
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	212c      	movs	r1, #44	; 0x2c
 8002e2c:	fb01 f303 	mul.w	r3, r1, r3
 8002e30:	4413      	add	r3, r2
 8002e32:	3354      	adds	r3, #84	; 0x54
 8002e34:	4602      	mov	r2, r0
 8002e36:	701a      	strb	r2, [r3, #0]
}
 8002e38:	e178      	b.n	800312c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	212c      	movs	r1, #44	; 0x2c
 8002e40:	fb01 f303 	mul.w	r3, r1, r3
 8002e44:	4413      	add	r3, r2
 8002e46:	3354      	adds	r3, #84	; 0x54
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	f083 0301 	eor.w	r3, r3, #1
 8002e4e:	b2d8      	uxtb	r0, r3
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	212c      	movs	r1, #44	; 0x2c
 8002e56:	fb01 f303 	mul.w	r3, r1, r3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	3354      	adds	r3, #84	; 0x54
 8002e5e:	4602      	mov	r2, r0
 8002e60:	701a      	strb	r2, [r3, #0]
}
 8002e62:	e163      	b.n	800312c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	015a      	lsls	r2, r3, #5
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	f040 80f6 	bne.w	8003068 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	212c      	movs	r1, #44	; 0x2c
 8002e82:	fb01 f303 	mul.w	r3, r1, r3
 8002e86:	4413      	add	r3, r2
 8002e88:	3361      	adds	r3, #97	; 0x61
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d109      	bne.n	8002ea4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	212c      	movs	r1, #44	; 0x2c
 8002e96:	fb01 f303 	mul.w	r3, r1, r3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	3360      	adds	r3, #96	; 0x60
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	701a      	strb	r2, [r3, #0]
 8002ea2:	e0c9      	b.n	8003038 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	212c      	movs	r1, #44	; 0x2c
 8002eaa:	fb01 f303 	mul.w	r3, r1, r3
 8002eae:	4413      	add	r3, r2
 8002eb0:	3361      	adds	r3, #97	; 0x61
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b05      	cmp	r3, #5
 8002eb6:	d109      	bne.n	8002ecc <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	212c      	movs	r1, #44	; 0x2c
 8002ebe:	fb01 f303 	mul.w	r3, r1, r3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	3360      	adds	r3, #96	; 0x60
 8002ec6:	2205      	movs	r2, #5
 8002ec8:	701a      	strb	r2, [r3, #0]
 8002eca:	e0b5      	b.n	8003038 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	212c      	movs	r1, #44	; 0x2c
 8002ed2:	fb01 f303 	mul.w	r3, r1, r3
 8002ed6:	4413      	add	r3, r2
 8002ed8:	3361      	adds	r3, #97	; 0x61
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	2b06      	cmp	r3, #6
 8002ede:	d009      	beq.n	8002ef4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	212c      	movs	r1, #44	; 0x2c
 8002ee6:	fb01 f303 	mul.w	r3, r1, r3
 8002eea:	4413      	add	r3, r2
 8002eec:	3361      	adds	r3, #97	; 0x61
 8002eee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	d150      	bne.n	8002f96 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	212c      	movs	r1, #44	; 0x2c
 8002efa:	fb01 f303 	mul.w	r3, r1, r3
 8002efe:	4413      	add	r3, r2
 8002f00:	335c      	adds	r3, #92	; 0x5c
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	1c5a      	adds	r2, r3, #1
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	202c      	movs	r0, #44	; 0x2c
 8002f0c:	fb00 f303 	mul.w	r3, r0, r3
 8002f10:	440b      	add	r3, r1
 8002f12:	335c      	adds	r3, #92	; 0x5c
 8002f14:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	212c      	movs	r1, #44	; 0x2c
 8002f1c:	fb01 f303 	mul.w	r3, r1, r3
 8002f20:	4413      	add	r3, r2
 8002f22:	335c      	adds	r3, #92	; 0x5c
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d912      	bls.n	8002f50 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	212c      	movs	r1, #44	; 0x2c
 8002f30:	fb01 f303 	mul.w	r3, r1, r3
 8002f34:	4413      	add	r3, r2
 8002f36:	335c      	adds	r3, #92	; 0x5c
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	212c      	movs	r1, #44	; 0x2c
 8002f42:	fb01 f303 	mul.w	r3, r1, r3
 8002f46:	4413      	add	r3, r2
 8002f48:	3360      	adds	r3, #96	; 0x60
 8002f4a:	2204      	movs	r2, #4
 8002f4c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f4e:	e073      	b.n	8003038 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	212c      	movs	r1, #44	; 0x2c
 8002f56:	fb01 f303 	mul.w	r3, r1, r3
 8002f5a:	4413      	add	r3, r2
 8002f5c:	3360      	adds	r3, #96	; 0x60
 8002f5e:	2202      	movs	r2, #2
 8002f60:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	015a      	lsls	r2, r3, #5
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	4413      	add	r3, r2
 8002f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f78:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f80:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	015a      	lsls	r2, r3, #5
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	4413      	add	r3, r2
 8002f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f8e:	461a      	mov	r2, r3
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f94:	e050      	b.n	8003038 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	212c      	movs	r1, #44	; 0x2c
 8002f9c:	fb01 f303 	mul.w	r3, r1, r3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	3361      	adds	r3, #97	; 0x61
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	2b03      	cmp	r3, #3
 8002fa8:	d122      	bne.n	8002ff0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	212c      	movs	r1, #44	; 0x2c
 8002fb0:	fb01 f303 	mul.w	r3, r1, r3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	3360      	adds	r3, #96	; 0x60
 8002fb8:	2202      	movs	r2, #2
 8002fba:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	015a      	lsls	r2, r3, #5
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002fd2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fda:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	015a      	lsls	r2, r3, #5
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe8:	461a      	mov	r2, r3
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	e023      	b.n	8003038 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	212c      	movs	r1, #44	; 0x2c
 8002ff6:	fb01 f303 	mul.w	r3, r1, r3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	3361      	adds	r3, #97	; 0x61
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2b07      	cmp	r3, #7
 8003002:	d119      	bne.n	8003038 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	212c      	movs	r1, #44	; 0x2c
 800300a:	fb01 f303 	mul.w	r3, r1, r3
 800300e:	4413      	add	r3, r2
 8003010:	335c      	adds	r3, #92	; 0x5c
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	1c5a      	adds	r2, r3, #1
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	202c      	movs	r0, #44	; 0x2c
 800301c:	fb00 f303 	mul.w	r3, r0, r3
 8003020:	440b      	add	r3, r1
 8003022:	335c      	adds	r3, #92	; 0x5c
 8003024:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	212c      	movs	r1, #44	; 0x2c
 800302c:	fb01 f303 	mul.w	r3, r1, r3
 8003030:	4413      	add	r3, r2
 8003032:	3360      	adds	r3, #96	; 0x60
 8003034:	2204      	movs	r2, #4
 8003036:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	015a      	lsls	r2, r3, #5
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	4413      	add	r3, r2
 8003040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003044:	461a      	mov	r2, r3
 8003046:	2302      	movs	r3, #2
 8003048:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	b2d9      	uxtb	r1, r3
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	202c      	movs	r0, #44	; 0x2c
 8003054:	fb00 f303 	mul.w	r3, r0, r3
 8003058:	4413      	add	r3, r2
 800305a:	3360      	adds	r3, #96	; 0x60
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	461a      	mov	r2, r3
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f00e fa29 	bl	80114b8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003066:	e061      	b.n	800312c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	015a      	lsls	r2, r3, #5
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	4413      	add	r3, r2
 8003070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 0310 	and.w	r3, r3, #16
 800307a:	2b10      	cmp	r3, #16
 800307c:	d156      	bne.n	800312c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	212c      	movs	r1, #44	; 0x2c
 8003084:	fb01 f303 	mul.w	r3, r1, r3
 8003088:	4413      	add	r3, r2
 800308a:	333f      	adds	r3, #63	; 0x3f
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	2b03      	cmp	r3, #3
 8003090:	d111      	bne.n	80030b6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	212c      	movs	r1, #44	; 0x2c
 8003098:	fb01 f303 	mul.w	r3, r1, r3
 800309c:	4413      	add	r3, r2
 800309e:	335c      	adds	r3, #92	; 0x5c
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	b2d2      	uxtb	r2, r2
 80030ac:	4611      	mov	r1, r2
 80030ae:	4618      	mov	r0, r3
 80030b0:	f006 fd6d 	bl	8009b8e <USB_HC_Halt>
 80030b4:	e031      	b.n	800311a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	212c      	movs	r1, #44	; 0x2c
 80030bc:	fb01 f303 	mul.w	r3, r1, r3
 80030c0:	4413      	add	r3, r2
 80030c2:	333f      	adds	r3, #63	; 0x3f
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d009      	beq.n	80030de <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	212c      	movs	r1, #44	; 0x2c
 80030d0:	fb01 f303 	mul.w	r3, r1, r3
 80030d4:	4413      	add	r3, r2
 80030d6:	333f      	adds	r3, #63	; 0x3f
 80030d8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d11d      	bne.n	800311a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	212c      	movs	r1, #44	; 0x2c
 80030e4:	fb01 f303 	mul.w	r3, r1, r3
 80030e8:	4413      	add	r3, r2
 80030ea:	335c      	adds	r3, #92	; 0x5c
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d110      	bne.n	800311a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	212c      	movs	r1, #44	; 0x2c
 80030fe:	fb01 f303 	mul.w	r3, r1, r3
 8003102:	4413      	add	r3, r2
 8003104:	3361      	adds	r3, #97	; 0x61
 8003106:	2203      	movs	r2, #3
 8003108:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	b2d2      	uxtb	r2, r2
 8003112:	4611      	mov	r1, r2
 8003114:	4618      	mov	r0, r3
 8003116:	f006 fd3a 	bl	8009b8e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	015a      	lsls	r2, r3, #5
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	4413      	add	r3, r2
 8003122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003126:	461a      	mov	r2, r3
 8003128:	2310      	movs	r3, #16
 800312a:	6093      	str	r3, [r2, #8]
}
 800312c:	bf00      	nop
 800312e:	3718      	adds	r7, #24
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b088      	sub	sp, #32
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800314a:	78fb      	ldrb	r3, [r7, #3]
 800314c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	015a      	lsls	r2, r3, #5
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	4413      	add	r3, r2
 8003156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b04      	cmp	r3, #4
 8003162:	d11a      	bne.n	800319a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	015a      	lsls	r2, r3, #5
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	4413      	add	r3, r2
 800316c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003170:	461a      	mov	r2, r3
 8003172:	2304      	movs	r3, #4
 8003174:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	212c      	movs	r1, #44	; 0x2c
 800317c:	fb01 f303 	mul.w	r3, r1, r3
 8003180:	4413      	add	r3, r2
 8003182:	3361      	adds	r3, #97	; 0x61
 8003184:	2206      	movs	r2, #6
 8003186:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	b2d2      	uxtb	r2, r2
 8003190:	4611      	mov	r1, r2
 8003192:	4618      	mov	r0, r3
 8003194:	f006 fcfb 	bl	8009b8e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003198:	e331      	b.n	80037fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	015a      	lsls	r2, r3, #5
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	4413      	add	r3, r2
 80031a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f003 0320 	and.w	r3, r3, #32
 80031ac:	2b20      	cmp	r3, #32
 80031ae:	d12e      	bne.n	800320e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	015a      	lsls	r2, r3, #5
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	4413      	add	r3, r2
 80031b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031bc:	461a      	mov	r2, r3
 80031be:	2320      	movs	r3, #32
 80031c0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	212c      	movs	r1, #44	; 0x2c
 80031c8:	fb01 f303 	mul.w	r3, r1, r3
 80031cc:	4413      	add	r3, r2
 80031ce:	333d      	adds	r3, #61	; 0x3d
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	f040 8313 	bne.w	80037fe <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	212c      	movs	r1, #44	; 0x2c
 80031de:	fb01 f303 	mul.w	r3, r1, r3
 80031e2:	4413      	add	r3, r2
 80031e4:	333d      	adds	r3, #61	; 0x3d
 80031e6:	2200      	movs	r2, #0
 80031e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	212c      	movs	r1, #44	; 0x2c
 80031f0:	fb01 f303 	mul.w	r3, r1, r3
 80031f4:	4413      	add	r3, r2
 80031f6:	3360      	adds	r3, #96	; 0x60
 80031f8:	2202      	movs	r2, #2
 80031fa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	4611      	mov	r1, r2
 8003206:	4618      	mov	r0, r3
 8003208:	f006 fcc1 	bl	8009b8e <USB_HC_Halt>
}
 800320c:	e2f7      	b.n	80037fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	015a      	lsls	r2, r3, #5
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	4413      	add	r3, r2
 8003216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003220:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003224:	d112      	bne.n	800324c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	015a      	lsls	r2, r3, #5
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	4413      	add	r3, r2
 800322e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003232:	461a      	mov	r2, r3
 8003234:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003238:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	4611      	mov	r1, r2
 8003244:	4618      	mov	r0, r3
 8003246:	f006 fca2 	bl	8009b8e <USB_HC_Halt>
}
 800324a:	e2d8      	b.n	80037fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	015a      	lsls	r2, r3, #5
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	4413      	add	r3, r2
 8003254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b01      	cmp	r3, #1
 8003260:	d140      	bne.n	80032e4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	212c      	movs	r1, #44	; 0x2c
 8003268:	fb01 f303 	mul.w	r3, r1, r3
 800326c:	4413      	add	r3, r2
 800326e:	335c      	adds	r3, #92	; 0x5c
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	015a      	lsls	r2, r3, #5
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	4413      	add	r3, r2
 800327c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003286:	2b40      	cmp	r3, #64	; 0x40
 8003288:	d111      	bne.n	80032ae <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	212c      	movs	r1, #44	; 0x2c
 8003290:	fb01 f303 	mul.w	r3, r1, r3
 8003294:	4413      	add	r3, r2
 8003296:	333d      	adds	r3, #61	; 0x3d
 8003298:	2201      	movs	r2, #1
 800329a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	015a      	lsls	r2, r3, #5
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	4413      	add	r3, r2
 80032a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a8:	461a      	mov	r2, r3
 80032aa:	2340      	movs	r3, #64	; 0x40
 80032ac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ba:	461a      	mov	r2, r3
 80032bc:	2301      	movs	r3, #1
 80032be:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	212c      	movs	r1, #44	; 0x2c
 80032c6:	fb01 f303 	mul.w	r3, r1, r3
 80032ca:	4413      	add	r3, r2
 80032cc:	3361      	adds	r3, #97	; 0x61
 80032ce:	2201      	movs	r2, #1
 80032d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	b2d2      	uxtb	r2, r2
 80032da:	4611      	mov	r1, r2
 80032dc:	4618      	mov	r0, r3
 80032de:	f006 fc56 	bl	8009b8e <USB_HC_Halt>
}
 80032e2:	e28c      	b.n	80037fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	015a      	lsls	r2, r3, #5
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	4413      	add	r3, r2
 80032ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f6:	2b40      	cmp	r3, #64	; 0x40
 80032f8:	d12c      	bne.n	8003354 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	212c      	movs	r1, #44	; 0x2c
 8003300:	fb01 f303 	mul.w	r3, r1, r3
 8003304:	4413      	add	r3, r2
 8003306:	3361      	adds	r3, #97	; 0x61
 8003308:	2204      	movs	r2, #4
 800330a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	212c      	movs	r1, #44	; 0x2c
 8003312:	fb01 f303 	mul.w	r3, r1, r3
 8003316:	4413      	add	r3, r2
 8003318:	333d      	adds	r3, #61	; 0x3d
 800331a:	2201      	movs	r2, #1
 800331c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	212c      	movs	r1, #44	; 0x2c
 8003324:	fb01 f303 	mul.w	r3, r1, r3
 8003328:	4413      	add	r3, r2
 800332a:	335c      	adds	r3, #92	; 0x5c
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	4611      	mov	r1, r2
 800333a:	4618      	mov	r0, r3
 800333c:	f006 fc27 	bl	8009b8e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	015a      	lsls	r2, r3, #5
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	4413      	add	r3, r2
 8003348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800334c:	461a      	mov	r2, r3
 800334e:	2340      	movs	r3, #64	; 0x40
 8003350:	6093      	str	r3, [r2, #8]
}
 8003352:	e254      	b.n	80037fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	015a      	lsls	r2, r3, #5
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	4413      	add	r3, r2
 800335c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	2b08      	cmp	r3, #8
 8003368:	d11a      	bne.n	80033a0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	015a      	lsls	r2, r3, #5
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	4413      	add	r3, r2
 8003372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003376:	461a      	mov	r2, r3
 8003378:	2308      	movs	r3, #8
 800337a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	212c      	movs	r1, #44	; 0x2c
 8003382:	fb01 f303 	mul.w	r3, r1, r3
 8003386:	4413      	add	r3, r2
 8003388:	3361      	adds	r3, #97	; 0x61
 800338a:	2205      	movs	r2, #5
 800338c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	b2d2      	uxtb	r2, r2
 8003396:	4611      	mov	r1, r2
 8003398:	4618      	mov	r0, r3
 800339a:	f006 fbf8 	bl	8009b8e <USB_HC_Halt>
}
 800339e:	e22e      	b.n	80037fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	015a      	lsls	r2, r3, #5
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	4413      	add	r3, r2
 80033a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 0310 	and.w	r3, r3, #16
 80033b2:	2b10      	cmp	r3, #16
 80033b4:	d140      	bne.n	8003438 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	212c      	movs	r1, #44	; 0x2c
 80033bc:	fb01 f303 	mul.w	r3, r1, r3
 80033c0:	4413      	add	r3, r2
 80033c2:	335c      	adds	r3, #92	; 0x5c
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	212c      	movs	r1, #44	; 0x2c
 80033ce:	fb01 f303 	mul.w	r3, r1, r3
 80033d2:	4413      	add	r3, r2
 80033d4:	3361      	adds	r3, #97	; 0x61
 80033d6:	2203      	movs	r2, #3
 80033d8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	212c      	movs	r1, #44	; 0x2c
 80033e0:	fb01 f303 	mul.w	r3, r1, r3
 80033e4:	4413      	add	r3, r2
 80033e6:	333d      	adds	r3, #61	; 0x3d
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d112      	bne.n	8003414 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	212c      	movs	r1, #44	; 0x2c
 80033f4:	fb01 f303 	mul.w	r3, r1, r3
 80033f8:	4413      	add	r3, r2
 80033fa:	333c      	adds	r3, #60	; 0x3c
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d108      	bne.n	8003414 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	212c      	movs	r1, #44	; 0x2c
 8003408:	fb01 f303 	mul.w	r3, r1, r3
 800340c:	4413      	add	r3, r2
 800340e:	333d      	adds	r3, #61	; 0x3d
 8003410:	2201      	movs	r2, #1
 8003412:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	4611      	mov	r1, r2
 800341e:	4618      	mov	r0, r3
 8003420:	f006 fbb5 	bl	8009b8e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	015a      	lsls	r2, r3, #5
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	4413      	add	r3, r2
 800342c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003430:	461a      	mov	r2, r3
 8003432:	2310      	movs	r3, #16
 8003434:	6093      	str	r3, [r2, #8]
}
 8003436:	e1e2      	b.n	80037fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	015a      	lsls	r2, r3, #5
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	4413      	add	r3, r2
 8003440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800344a:	2b80      	cmp	r3, #128	; 0x80
 800344c:	d164      	bne.n	8003518 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d111      	bne.n	800347a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	212c      	movs	r1, #44	; 0x2c
 800345c:	fb01 f303 	mul.w	r3, r1, r3
 8003460:	4413      	add	r3, r2
 8003462:	3361      	adds	r3, #97	; 0x61
 8003464:	2206      	movs	r2, #6
 8003466:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	4611      	mov	r1, r2
 8003472:	4618      	mov	r0, r3
 8003474:	f006 fb8b 	bl	8009b8e <USB_HC_Halt>
 8003478:	e044      	b.n	8003504 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	212c      	movs	r1, #44	; 0x2c
 8003480:	fb01 f303 	mul.w	r3, r1, r3
 8003484:	4413      	add	r3, r2
 8003486:	335c      	adds	r3, #92	; 0x5c
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	1c5a      	adds	r2, r3, #1
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	202c      	movs	r0, #44	; 0x2c
 8003492:	fb00 f303 	mul.w	r3, r0, r3
 8003496:	440b      	add	r3, r1
 8003498:	335c      	adds	r3, #92	; 0x5c
 800349a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	212c      	movs	r1, #44	; 0x2c
 80034a2:	fb01 f303 	mul.w	r3, r1, r3
 80034a6:	4413      	add	r3, r2
 80034a8:	335c      	adds	r3, #92	; 0x5c
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d920      	bls.n	80034f2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	212c      	movs	r1, #44	; 0x2c
 80034b6:	fb01 f303 	mul.w	r3, r1, r3
 80034ba:	4413      	add	r3, r2
 80034bc:	335c      	adds	r3, #92	; 0x5c
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	212c      	movs	r1, #44	; 0x2c
 80034c8:	fb01 f303 	mul.w	r3, r1, r3
 80034cc:	4413      	add	r3, r2
 80034ce:	3360      	adds	r3, #96	; 0x60
 80034d0:	2204      	movs	r2, #4
 80034d2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	b2d9      	uxtb	r1, r3
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	202c      	movs	r0, #44	; 0x2c
 80034de:	fb00 f303 	mul.w	r3, r0, r3
 80034e2:	4413      	add	r3, r2
 80034e4:	3360      	adds	r3, #96	; 0x60
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	461a      	mov	r2, r3
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f00d ffe4 	bl	80114b8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80034f0:	e008      	b.n	8003504 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	212c      	movs	r1, #44	; 0x2c
 80034f8:	fb01 f303 	mul.w	r3, r1, r3
 80034fc:	4413      	add	r3, r2
 80034fe:	3360      	adds	r3, #96	; 0x60
 8003500:	2202      	movs	r2, #2
 8003502:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	015a      	lsls	r2, r3, #5
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	4413      	add	r3, r2
 800350c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003510:	461a      	mov	r2, r3
 8003512:	2380      	movs	r3, #128	; 0x80
 8003514:	6093      	str	r3, [r2, #8]
}
 8003516:	e172      	b.n	80037fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	015a      	lsls	r2, r3, #5
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	4413      	add	r3, r2
 8003520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800352a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800352e:	d11b      	bne.n	8003568 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	212c      	movs	r1, #44	; 0x2c
 8003536:	fb01 f303 	mul.w	r3, r1, r3
 800353a:	4413      	add	r3, r2
 800353c:	3361      	adds	r3, #97	; 0x61
 800353e:	2208      	movs	r2, #8
 8003540:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	4611      	mov	r1, r2
 800354c:	4618      	mov	r0, r3
 800354e:	f006 fb1e 	bl	8009b8e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	015a      	lsls	r2, r3, #5
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	4413      	add	r3, r2
 800355a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800355e:	461a      	mov	r2, r3
 8003560:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003564:	6093      	str	r3, [r2, #8]
}
 8003566:	e14a      	b.n	80037fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	015a      	lsls	r2, r3, #5
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	4413      	add	r3, r2
 8003570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b02      	cmp	r3, #2
 800357c:	f040 813f 	bne.w	80037fe <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	212c      	movs	r1, #44	; 0x2c
 8003586:	fb01 f303 	mul.w	r3, r1, r3
 800358a:	4413      	add	r3, r2
 800358c:	3361      	adds	r3, #97	; 0x61
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d17d      	bne.n	8003690 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	212c      	movs	r1, #44	; 0x2c
 800359a:	fb01 f303 	mul.w	r3, r1, r3
 800359e:	4413      	add	r3, r2
 80035a0:	3360      	adds	r3, #96	; 0x60
 80035a2:	2201      	movs	r2, #1
 80035a4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	212c      	movs	r1, #44	; 0x2c
 80035ac:	fb01 f303 	mul.w	r3, r1, r3
 80035b0:	4413      	add	r3, r2
 80035b2:	333f      	adds	r3, #63	; 0x3f
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d00a      	beq.n	80035d0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	212c      	movs	r1, #44	; 0x2c
 80035c0:	fb01 f303 	mul.w	r3, r1, r3
 80035c4:	4413      	add	r3, r2
 80035c6:	333f      	adds	r3, #63	; 0x3f
 80035c8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80035ca:	2b03      	cmp	r3, #3
 80035cc:	f040 8100 	bne.w	80037d0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d113      	bne.n	8003600 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	212c      	movs	r1, #44	; 0x2c
 80035de:	fb01 f303 	mul.w	r3, r1, r3
 80035e2:	4413      	add	r3, r2
 80035e4:	3355      	adds	r3, #85	; 0x55
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	f083 0301 	eor.w	r3, r3, #1
 80035ec:	b2d8      	uxtb	r0, r3
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	212c      	movs	r1, #44	; 0x2c
 80035f4:	fb01 f303 	mul.w	r3, r1, r3
 80035f8:	4413      	add	r3, r2
 80035fa:	3355      	adds	r3, #85	; 0x55
 80035fc:	4602      	mov	r2, r0
 80035fe:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	2b01      	cmp	r3, #1
 8003606:	f040 80e3 	bne.w	80037d0 <HCD_HC_OUT_IRQHandler+0x69c>
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	212c      	movs	r1, #44	; 0x2c
 8003610:	fb01 f303 	mul.w	r3, r1, r3
 8003614:	4413      	add	r3, r2
 8003616:	334c      	adds	r3, #76	; 0x4c
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	f000 80d8 	beq.w	80037d0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	212c      	movs	r1, #44	; 0x2c
 8003626:	fb01 f303 	mul.w	r3, r1, r3
 800362a:	4413      	add	r3, r2
 800362c:	334c      	adds	r3, #76	; 0x4c
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	202c      	movs	r0, #44	; 0x2c
 8003636:	fb00 f202 	mul.w	r2, r0, r2
 800363a:	440a      	add	r2, r1
 800363c:	3240      	adds	r2, #64	; 0x40
 800363e:	8812      	ldrh	r2, [r2, #0]
 8003640:	4413      	add	r3, r2
 8003642:	3b01      	subs	r3, #1
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	202c      	movs	r0, #44	; 0x2c
 800364a:	fb00 f202 	mul.w	r2, r0, r2
 800364e:	440a      	add	r2, r1
 8003650:	3240      	adds	r2, #64	; 0x40
 8003652:	8812      	ldrh	r2, [r2, #0]
 8003654:	fbb3 f3f2 	udiv	r3, r3, r2
 8003658:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 80b5 	beq.w	80037d0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	212c      	movs	r1, #44	; 0x2c
 800366c:	fb01 f303 	mul.w	r3, r1, r3
 8003670:	4413      	add	r3, r2
 8003672:	3355      	adds	r3, #85	; 0x55
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	f083 0301 	eor.w	r3, r3, #1
 800367a:	b2d8      	uxtb	r0, r3
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	212c      	movs	r1, #44	; 0x2c
 8003682:	fb01 f303 	mul.w	r3, r1, r3
 8003686:	4413      	add	r3, r2
 8003688:	3355      	adds	r3, #85	; 0x55
 800368a:	4602      	mov	r2, r0
 800368c:	701a      	strb	r2, [r3, #0]
 800368e:	e09f      	b.n	80037d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	212c      	movs	r1, #44	; 0x2c
 8003696:	fb01 f303 	mul.w	r3, r1, r3
 800369a:	4413      	add	r3, r2
 800369c:	3361      	adds	r3, #97	; 0x61
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	2b03      	cmp	r3, #3
 80036a2:	d109      	bne.n	80036b8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	212c      	movs	r1, #44	; 0x2c
 80036aa:	fb01 f303 	mul.w	r3, r1, r3
 80036ae:	4413      	add	r3, r2
 80036b0:	3360      	adds	r3, #96	; 0x60
 80036b2:	2202      	movs	r2, #2
 80036b4:	701a      	strb	r2, [r3, #0]
 80036b6:	e08b      	b.n	80037d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	212c      	movs	r1, #44	; 0x2c
 80036be:	fb01 f303 	mul.w	r3, r1, r3
 80036c2:	4413      	add	r3, r2
 80036c4:	3361      	adds	r3, #97	; 0x61
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	2b04      	cmp	r3, #4
 80036ca:	d109      	bne.n	80036e0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	212c      	movs	r1, #44	; 0x2c
 80036d2:	fb01 f303 	mul.w	r3, r1, r3
 80036d6:	4413      	add	r3, r2
 80036d8:	3360      	adds	r3, #96	; 0x60
 80036da:	2202      	movs	r2, #2
 80036dc:	701a      	strb	r2, [r3, #0]
 80036de:	e077      	b.n	80037d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	212c      	movs	r1, #44	; 0x2c
 80036e6:	fb01 f303 	mul.w	r3, r1, r3
 80036ea:	4413      	add	r3, r2
 80036ec:	3361      	adds	r3, #97	; 0x61
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	2b05      	cmp	r3, #5
 80036f2:	d109      	bne.n	8003708 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	212c      	movs	r1, #44	; 0x2c
 80036fa:	fb01 f303 	mul.w	r3, r1, r3
 80036fe:	4413      	add	r3, r2
 8003700:	3360      	adds	r3, #96	; 0x60
 8003702:	2205      	movs	r2, #5
 8003704:	701a      	strb	r2, [r3, #0]
 8003706:	e063      	b.n	80037d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	212c      	movs	r1, #44	; 0x2c
 800370e:	fb01 f303 	mul.w	r3, r1, r3
 8003712:	4413      	add	r3, r2
 8003714:	3361      	adds	r3, #97	; 0x61
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b06      	cmp	r3, #6
 800371a:	d009      	beq.n	8003730 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	212c      	movs	r1, #44	; 0x2c
 8003722:	fb01 f303 	mul.w	r3, r1, r3
 8003726:	4413      	add	r3, r2
 8003728:	3361      	adds	r3, #97	; 0x61
 800372a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800372c:	2b08      	cmp	r3, #8
 800372e:	d14f      	bne.n	80037d0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	212c      	movs	r1, #44	; 0x2c
 8003736:	fb01 f303 	mul.w	r3, r1, r3
 800373a:	4413      	add	r3, r2
 800373c:	335c      	adds	r3, #92	; 0x5c
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	1c5a      	adds	r2, r3, #1
 8003742:	6879      	ldr	r1, [r7, #4]
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	202c      	movs	r0, #44	; 0x2c
 8003748:	fb00 f303 	mul.w	r3, r0, r3
 800374c:	440b      	add	r3, r1
 800374e:	335c      	adds	r3, #92	; 0x5c
 8003750:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	212c      	movs	r1, #44	; 0x2c
 8003758:	fb01 f303 	mul.w	r3, r1, r3
 800375c:	4413      	add	r3, r2
 800375e:	335c      	adds	r3, #92	; 0x5c
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b02      	cmp	r3, #2
 8003764:	d912      	bls.n	800378c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	212c      	movs	r1, #44	; 0x2c
 800376c:	fb01 f303 	mul.w	r3, r1, r3
 8003770:	4413      	add	r3, r2
 8003772:	335c      	adds	r3, #92	; 0x5c
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	212c      	movs	r1, #44	; 0x2c
 800377e:	fb01 f303 	mul.w	r3, r1, r3
 8003782:	4413      	add	r3, r2
 8003784:	3360      	adds	r3, #96	; 0x60
 8003786:	2204      	movs	r2, #4
 8003788:	701a      	strb	r2, [r3, #0]
 800378a:	e021      	b.n	80037d0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	212c      	movs	r1, #44	; 0x2c
 8003792:	fb01 f303 	mul.w	r3, r1, r3
 8003796:	4413      	add	r3, r2
 8003798:	3360      	adds	r3, #96	; 0x60
 800379a:	2202      	movs	r2, #2
 800379c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	015a      	lsls	r2, r3, #5
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	4413      	add	r3, r2
 80037a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037b4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037bc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	015a      	lsls	r2, r3, #5
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	4413      	add	r3, r2
 80037c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ca:	461a      	mov	r2, r3
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	015a      	lsls	r2, r3, #5
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037dc:	461a      	mov	r2, r3
 80037de:	2302      	movs	r3, #2
 80037e0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	b2d9      	uxtb	r1, r3
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	202c      	movs	r0, #44	; 0x2c
 80037ec:	fb00 f303 	mul.w	r3, r0, r3
 80037f0:	4413      	add	r3, r2
 80037f2:	3360      	adds	r3, #96	; 0x60
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	461a      	mov	r2, r3
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f00d fe5d 	bl	80114b8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80037fe:	bf00      	nop
 8003800:	3720      	adds	r7, #32
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b08a      	sub	sp, #40	; 0x28
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	0c5b      	lsrs	r3, r3, #17
 800382c:	f003 030f 	and.w	r3, r3, #15
 8003830:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	091b      	lsrs	r3, r3, #4
 8003836:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800383a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	2b02      	cmp	r3, #2
 8003840:	d004      	beq.n	800384c <HCD_RXQLVL_IRQHandler+0x46>
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	2b05      	cmp	r3, #5
 8003846:	f000 80a9 	beq.w	800399c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800384a:	e0aa      	b.n	80039a2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	2b00      	cmp	r3, #0
 8003850:	f000 80a6 	beq.w	80039a0 <HCD_RXQLVL_IRQHandler+0x19a>
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	212c      	movs	r1, #44	; 0x2c
 800385a:	fb01 f303 	mul.w	r3, r1, r3
 800385e:	4413      	add	r3, r2
 8003860:	3344      	adds	r3, #68	; 0x44
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 809b 	beq.w	80039a0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	212c      	movs	r1, #44	; 0x2c
 8003870:	fb01 f303 	mul.w	r3, r1, r3
 8003874:	4413      	add	r3, r2
 8003876:	3350      	adds	r3, #80	; 0x50
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	441a      	add	r2, r3
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	202c      	movs	r0, #44	; 0x2c
 8003884:	fb00 f303 	mul.w	r3, r0, r3
 8003888:	440b      	add	r3, r1
 800388a:	334c      	adds	r3, #76	; 0x4c
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	429a      	cmp	r2, r3
 8003890:	d87a      	bhi.n	8003988 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6818      	ldr	r0, [r3, #0]
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	212c      	movs	r1, #44	; 0x2c
 800389c:	fb01 f303 	mul.w	r3, r1, r3
 80038a0:	4413      	add	r3, r2
 80038a2:	3344      	adds	r3, #68	; 0x44
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	b292      	uxth	r2, r2
 80038aa:	4619      	mov	r1, r3
 80038ac:	f005 fa96 	bl	8008ddc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	212c      	movs	r1, #44	; 0x2c
 80038b6:	fb01 f303 	mul.w	r3, r1, r3
 80038ba:	4413      	add	r3, r2
 80038bc:	3344      	adds	r3, #68	; 0x44
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	441a      	add	r2, r3
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	202c      	movs	r0, #44	; 0x2c
 80038ca:	fb00 f303 	mul.w	r3, r0, r3
 80038ce:	440b      	add	r3, r1
 80038d0:	3344      	adds	r3, #68	; 0x44
 80038d2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	212c      	movs	r1, #44	; 0x2c
 80038da:	fb01 f303 	mul.w	r3, r1, r3
 80038de:	4413      	add	r3, r2
 80038e0:	3350      	adds	r3, #80	; 0x50
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	441a      	add	r2, r3
 80038e8:	6879      	ldr	r1, [r7, #4]
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	202c      	movs	r0, #44	; 0x2c
 80038ee:	fb00 f303 	mul.w	r3, r0, r3
 80038f2:	440b      	add	r3, r1
 80038f4:	3350      	adds	r3, #80	; 0x50
 80038f6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	015a      	lsls	r2, r3, #5
 80038fc:	6a3b      	ldr	r3, [r7, #32]
 80038fe:	4413      	add	r3, r2
 8003900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	0cdb      	lsrs	r3, r3, #19
 8003908:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800390c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	212c      	movs	r1, #44	; 0x2c
 8003914:	fb01 f303 	mul.w	r3, r1, r3
 8003918:	4413      	add	r3, r2
 800391a:	3340      	adds	r3, #64	; 0x40
 800391c:	881b      	ldrh	r3, [r3, #0]
 800391e:	461a      	mov	r2, r3
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	4293      	cmp	r3, r2
 8003924:	d13c      	bne.n	80039a0 <HCD_RXQLVL_IRQHandler+0x19a>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d039      	beq.n	80039a0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	015a      	lsls	r2, r3, #5
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	4413      	add	r3, r2
 8003934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003942:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800394a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	015a      	lsls	r2, r3, #5
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	4413      	add	r3, r2
 8003954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003958:	461a      	mov	r2, r3
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	212c      	movs	r1, #44	; 0x2c
 8003964:	fb01 f303 	mul.w	r3, r1, r3
 8003968:	4413      	add	r3, r2
 800396a:	3354      	adds	r3, #84	; 0x54
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	f083 0301 	eor.w	r3, r3, #1
 8003972:	b2d8      	uxtb	r0, r3
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	212c      	movs	r1, #44	; 0x2c
 800397a:	fb01 f303 	mul.w	r3, r1, r3
 800397e:	4413      	add	r3, r2
 8003980:	3354      	adds	r3, #84	; 0x54
 8003982:	4602      	mov	r2, r0
 8003984:	701a      	strb	r2, [r3, #0]
      break;
 8003986:	e00b      	b.n	80039a0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	212c      	movs	r1, #44	; 0x2c
 800398e:	fb01 f303 	mul.w	r3, r1, r3
 8003992:	4413      	add	r3, r2
 8003994:	3360      	adds	r3, #96	; 0x60
 8003996:	2204      	movs	r2, #4
 8003998:	701a      	strb	r2, [r3, #0]
      break;
 800399a:	e001      	b.n	80039a0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800399c:	bf00      	nop
 800399e:	e000      	b.n	80039a2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80039a0:	bf00      	nop
  }
}
 80039a2:	bf00      	nop
 80039a4:	3728      	adds	r7, #40	; 0x28
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b086      	sub	sp, #24
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80039d6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d10b      	bne.n	80039fa <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d102      	bne.n	80039f2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f00d fd47 	bl	8011480 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	f043 0302 	orr.w	r3, r3, #2
 80039f8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f003 0308 	and.w	r3, r3, #8
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d132      	bne.n	8003a6a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f043 0308 	orr.w	r3, r3, #8
 8003a0a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f003 0304 	and.w	r3, r3, #4
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	d126      	bne.n	8003a64 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d113      	bne.n	8003a46 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003a24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a28:	d106      	bne.n	8003a38 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2102      	movs	r1, #2
 8003a30:	4618      	mov	r0, r3
 8003a32:	f005 fd71 	bl	8009518 <USB_InitFSLSPClkSel>
 8003a36:	e011      	b.n	8003a5c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f005 fd6a 	bl	8009518 <USB_InitFSLSPClkSel>
 8003a44:	e00a      	b.n	8003a5c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d106      	bne.n	8003a5c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a54:	461a      	mov	r2, r3
 8003a56:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003a5a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f00d fd3d 	bl	80114dc <HAL_HCD_PortEnabled_Callback>
 8003a62:	e002      	b.n	8003a6a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f00d fd47 	bl	80114f8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f003 0320 	and.w	r3, r3, #32
 8003a70:	2b20      	cmp	r3, #32
 8003a72:	d103      	bne.n	8003a7c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	f043 0320 	orr.w	r3, r3, #32
 8003a7a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a82:	461a      	mov	r2, r3
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	6013      	str	r3, [r2, #0]
}
 8003a88:	bf00      	nop
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a92:	b08f      	sub	sp, #60	; 0x3c
 8003a94:	af0a      	add	r7, sp, #40	; 0x28
 8003a96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e116      	b.n	8003cd0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d106      	bne.n	8003ac2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f00d f89d 	bl	8010bfc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2203      	movs	r2, #3
 8003ac6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d102      	bne.n	8003adc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f004 f932 	bl	8007d4a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	603b      	str	r3, [r7, #0]
 8003aec:	687e      	ldr	r6, [r7, #4]
 8003aee:	466d      	mov	r5, sp
 8003af0:	f106 0410 	add.w	r4, r6, #16
 8003af4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003af6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003af8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003afa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003afc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b00:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b04:	1d33      	adds	r3, r6, #4
 8003b06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b08:	6838      	ldr	r0, [r7, #0]
 8003b0a:	f004 f809 	bl	8007b20 <USB_CoreInit>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d005      	beq.n	8003b20 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2202      	movs	r2, #2
 8003b18:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e0d7      	b.n	8003cd0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2100      	movs	r1, #0
 8003b26:	4618      	mov	r0, r3
 8003b28:	f004 f920 	bl	8007d6c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	73fb      	strb	r3, [r7, #15]
 8003b30:	e04a      	b.n	8003bc8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b32:	7bfa      	ldrb	r2, [r7, #15]
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	4613      	mov	r3, r2
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	4413      	add	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	440b      	add	r3, r1
 8003b40:	333d      	adds	r3, #61	; 0x3d
 8003b42:	2201      	movs	r2, #1
 8003b44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b46:	7bfa      	ldrb	r2, [r7, #15]
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	4413      	add	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	440b      	add	r3, r1
 8003b54:	333c      	adds	r3, #60	; 0x3c
 8003b56:	7bfa      	ldrb	r2, [r7, #15]
 8003b58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003b5a:	7bfa      	ldrb	r2, [r7, #15]
 8003b5c:	7bfb      	ldrb	r3, [r7, #15]
 8003b5e:	b298      	uxth	r0, r3
 8003b60:	6879      	ldr	r1, [r7, #4]
 8003b62:	4613      	mov	r3, r2
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	4413      	add	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	440b      	add	r3, r1
 8003b6c:	3344      	adds	r3, #68	; 0x44
 8003b6e:	4602      	mov	r2, r0
 8003b70:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b72:	7bfa      	ldrb	r2, [r7, #15]
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	4613      	mov	r3, r2
 8003b78:	00db      	lsls	r3, r3, #3
 8003b7a:	4413      	add	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	440b      	add	r3, r1
 8003b80:	3340      	adds	r3, #64	; 0x40
 8003b82:	2200      	movs	r2, #0
 8003b84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b86:	7bfa      	ldrb	r2, [r7, #15]
 8003b88:	6879      	ldr	r1, [r7, #4]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	4413      	add	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	440b      	add	r3, r1
 8003b94:	3348      	adds	r3, #72	; 0x48
 8003b96:	2200      	movs	r2, #0
 8003b98:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b9a:	7bfa      	ldrb	r2, [r7, #15]
 8003b9c:	6879      	ldr	r1, [r7, #4]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	00db      	lsls	r3, r3, #3
 8003ba2:	4413      	add	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	440b      	add	r3, r1
 8003ba8:	334c      	adds	r3, #76	; 0x4c
 8003baa:	2200      	movs	r2, #0
 8003bac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003bae:	7bfa      	ldrb	r2, [r7, #15]
 8003bb0:	6879      	ldr	r1, [r7, #4]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	4413      	add	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	440b      	add	r3, r1
 8003bbc:	3354      	adds	r3, #84	; 0x54
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bc2:	7bfb      	ldrb	r3, [r7, #15]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	73fb      	strb	r3, [r7, #15]
 8003bc8:	7bfa      	ldrb	r2, [r7, #15]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d3af      	bcc.n	8003b32 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	73fb      	strb	r3, [r7, #15]
 8003bd6:	e044      	b.n	8003c62 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003bd8:	7bfa      	ldrb	r2, [r7, #15]
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	4413      	add	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003bea:	2200      	movs	r2, #0
 8003bec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003bee:	7bfa      	ldrb	r2, [r7, #15]
 8003bf0:	6879      	ldr	r1, [r7, #4]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	00db      	lsls	r3, r3, #3
 8003bf6:	4413      	add	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	440b      	add	r3, r1
 8003bfc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003c00:	7bfa      	ldrb	r2, [r7, #15]
 8003c02:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c04:	7bfa      	ldrb	r2, [r7, #15]
 8003c06:	6879      	ldr	r1, [r7, #4]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	4413      	add	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	440b      	add	r3, r1
 8003c12:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003c16:	2200      	movs	r2, #0
 8003c18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c1a:	7bfa      	ldrb	r2, [r7, #15]
 8003c1c:	6879      	ldr	r1, [r7, #4]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	4413      	add	r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	440b      	add	r3, r1
 8003c28:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c30:	7bfa      	ldrb	r2, [r7, #15]
 8003c32:	6879      	ldr	r1, [r7, #4]
 8003c34:	4613      	mov	r3, r2
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	4413      	add	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	440b      	add	r3, r1
 8003c3e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003c42:	2200      	movs	r2, #0
 8003c44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c46:	7bfa      	ldrb	r2, [r7, #15]
 8003c48:	6879      	ldr	r1, [r7, #4]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	00db      	lsls	r3, r3, #3
 8003c4e:	4413      	add	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	440b      	add	r3, r1
 8003c54:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c5c:	7bfb      	ldrb	r3, [r7, #15]
 8003c5e:	3301      	adds	r3, #1
 8003c60:	73fb      	strb	r3, [r7, #15]
 8003c62:	7bfa      	ldrb	r2, [r7, #15]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d3b5      	bcc.n	8003bd8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	603b      	str	r3, [r7, #0]
 8003c72:	687e      	ldr	r6, [r7, #4]
 8003c74:	466d      	mov	r5, sp
 8003c76:	f106 0410 	add.w	r4, r6, #16
 8003c7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c86:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c8a:	1d33      	adds	r3, r6, #4
 8003c8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c8e:	6838      	ldr	r0, [r7, #0]
 8003c90:	f004 f8b8 	bl	8007e04 <USB_DevInit>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d005      	beq.n	8003ca6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e014      	b.n	8003cd0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d102      	bne.n	8003cc4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f001 f974 	bl	8004fac <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f005 f9fa 	bl	80090c2 <USB_DevDisconnect>

  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3714      	adds	r7, #20
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003cd8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d101      	bne.n	8003cf4 <HAL_PCD_Start+0x1c>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	e020      	b.n	8003d36 <HAL_PCD_Start+0x5e>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d109      	bne.n	8003d18 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d005      	beq.n	8003d18 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d10:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f004 f803 	bl	8007d28 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f005 f9aa 	bl	8009080 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003d3e:	b590      	push	{r4, r7, lr}
 8003d40:	b08d      	sub	sp, #52	; 0x34
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f005 fa68 	bl	800922a <USB_GetMode>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f040 84b7 	bne.w	80046d0 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f005 f9cc 	bl	8009104 <USB_ReadInterrupts>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 84ad 	beq.w	80046ce <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	0a1b      	lsrs	r3, r3, #8
 8003d7e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f005 f9b9 	bl	8009104 <USB_ReadInterrupts>
 8003d92:	4603      	mov	r3, r0
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d107      	bne.n	8003dac <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	695a      	ldr	r2, [r3, #20]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f002 0202 	and.w	r2, r2, #2
 8003daa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f005 f9a7 	bl	8009104 <USB_ReadInterrupts>
 8003db6:	4603      	mov	r3, r0
 8003db8:	f003 0310 	and.w	r3, r3, #16
 8003dbc:	2b10      	cmp	r3, #16
 8003dbe:	d161      	bne.n	8003e84 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	699a      	ldr	r2, [r3, #24]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0210 	bic.w	r2, r2, #16
 8003dce:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003dd0:	6a3b      	ldr	r3, [r7, #32]
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	f003 020f 	and.w	r2, r3, #15
 8003ddc:	4613      	mov	r3, r2
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	4413      	add	r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	4413      	add	r3, r2
 8003dec:	3304      	adds	r3, #4
 8003dee:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	0c5b      	lsrs	r3, r3, #17
 8003df4:	f003 030f 	and.w	r3, r3, #15
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d124      	bne.n	8003e46 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003e02:	4013      	ands	r3, r2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d035      	beq.n	8003e74 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	091b      	lsrs	r3, r3, #4
 8003e10:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003e12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	461a      	mov	r2, r3
 8003e1a:	6a38      	ldr	r0, [r7, #32]
 8003e1c:	f004 ffde 	bl	8008ddc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	691a      	ldr	r2, [r3, #16]
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	091b      	lsrs	r3, r3, #4
 8003e28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e2c:	441a      	add	r2, r3
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	6a1a      	ldr	r2, [r3, #32]
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	091b      	lsrs	r3, r3, #4
 8003e3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e3e:	441a      	add	r2, r3
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	621a      	str	r2, [r3, #32]
 8003e44:	e016      	b.n	8003e74 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	0c5b      	lsrs	r3, r3, #17
 8003e4a:	f003 030f 	and.w	r3, r3, #15
 8003e4e:	2b06      	cmp	r3, #6
 8003e50:	d110      	bne.n	8003e74 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e58:	2208      	movs	r2, #8
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	6a38      	ldr	r0, [r7, #32]
 8003e5e:	f004 ffbd 	bl	8008ddc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	6a1a      	ldr	r2, [r3, #32]
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	091b      	lsrs	r3, r3, #4
 8003e6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e6e:	441a      	add	r2, r3
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	699a      	ldr	r2, [r3, #24]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f042 0210 	orr.w	r2, r2, #16
 8003e82:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f005 f93b 	bl	8009104 <USB_ReadInterrupts>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e94:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e98:	f040 80a7 	bne.w	8003fea <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f005 f940 	bl	800912a <USB_ReadDevAllOutEpInterrupt>
 8003eaa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003eac:	e099      	b.n	8003fe2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f000 808e 	beq.w	8003fd6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec0:	b2d2      	uxtb	r2, r2
 8003ec2:	4611      	mov	r1, r2
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f005 f964 	bl	8009192 <USB_ReadDevOutEPInterrupt>
 8003eca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00c      	beq.n	8003ef0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	015a      	lsls	r2, r3, #5
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	4413      	add	r3, r2
 8003ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003ee8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 fed8 	bl	8004ca0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	f003 0308 	and.w	r3, r3, #8
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00c      	beq.n	8003f14 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	015a      	lsls	r2, r3, #5
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	4413      	add	r3, r2
 8003f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f06:	461a      	mov	r2, r3
 8003f08:	2308      	movs	r3, #8
 8003f0a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003f0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 ffae 	bl	8004e70 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	f003 0310 	and.w	r3, r3, #16
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d008      	beq.n	8003f30 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	015a      	lsls	r2, r3, #5
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	4413      	add	r3, r2
 8003f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	2310      	movs	r3, #16
 8003f2e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d030      	beq.n	8003f9c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003f3a:	6a3b      	ldr	r3, [r7, #32]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f42:	2b80      	cmp	r3, #128	; 0x80
 8003f44:	d109      	bne.n	8003f5a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	69fa      	ldr	r2, [r7, #28]
 8003f50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f58:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	4413      	add	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	3304      	adds	r3, #4
 8003f6e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	78db      	ldrb	r3, [r3, #3]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d108      	bne.n	8003f8a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	4619      	mov	r1, r3
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f00c ff51 	bl	8010e2c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	015a      	lsls	r2, r3, #5
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	4413      	add	r3, r2
 8003f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f96:	461a      	mov	r2, r3
 8003f98:	2302      	movs	r3, #2
 8003f9a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	f003 0320 	and.w	r3, r3, #32
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d008      	beq.n	8003fb8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa8:	015a      	lsls	r2, r3, #5
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	4413      	add	r3, r2
 8003fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	2320      	movs	r3, #32
 8003fb6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d009      	beq.n	8003fd6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	015a      	lsls	r2, r3, #5
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	4413      	add	r3, r2
 8003fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fce:	461a      	mov	r2, r3
 8003fd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fd4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	3301      	adds	r3, #1
 8003fda:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fde:	085b      	lsrs	r3, r3, #1
 8003fe0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f47f af62 	bne.w	8003eae <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f005 f888 	bl	8009104 <USB_ReadInterrupts>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ffa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ffe:	f040 80db 	bne.w	80041b8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4618      	mov	r0, r3
 8004008:	f005 f8a9 	bl	800915e <USB_ReadDevAllInEpInterrupt>
 800400c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800400e:	2300      	movs	r3, #0
 8004010:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004012:	e0cd      	b.n	80041b0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 80c2 	beq.w	80041a4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	4611      	mov	r1, r2
 800402a:	4618      	mov	r0, r3
 800402c:	f005 f8cf 	bl	80091ce <USB_ReadDevInEPInterrupt>
 8004030:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f003 0301 	and.w	r3, r3, #1
 8004038:	2b00      	cmp	r3, #0
 800403a:	d057      	beq.n	80040ec <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	f003 030f 	and.w	r3, r3, #15
 8004042:	2201      	movs	r2, #1
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	43db      	mvns	r3, r3
 8004056:	69f9      	ldr	r1, [r7, #28]
 8004058:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800405c:	4013      	ands	r3, r2
 800405e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	4413      	add	r3, r2
 8004068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800406c:	461a      	mov	r2, r3
 800406e:	2301      	movs	r3, #1
 8004070:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d132      	bne.n	80040e0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800407a:	6879      	ldr	r1, [r7, #4]
 800407c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800407e:	4613      	mov	r3, r2
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	4413      	add	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	440b      	add	r3, r1
 8004088:	334c      	adds	r3, #76	; 0x4c
 800408a:	6819      	ldr	r1, [r3, #0]
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004090:	4613      	mov	r3, r2
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	4413      	add	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4403      	add	r3, r0
 800409a:	3348      	adds	r3, #72	; 0x48
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4419      	add	r1, r3
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040a4:	4613      	mov	r3, r2
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	4413      	add	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4403      	add	r3, r0
 80040ae:	334c      	adds	r3, #76	; 0x4c
 80040b0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80040b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d113      	bne.n	80040e0 <HAL_PCD_IRQHandler+0x3a2>
 80040b8:	6879      	ldr	r1, [r7, #4]
 80040ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040bc:	4613      	mov	r3, r2
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	4413      	add	r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	440b      	add	r3, r1
 80040c6:	3354      	adds	r3, #84	; 0x54
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d108      	bne.n	80040e0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6818      	ldr	r0, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80040d8:	461a      	mov	r2, r3
 80040da:	2101      	movs	r1, #1
 80040dc:	f005 f8d6 	bl	800928c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	4619      	mov	r1, r3
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f00c fe1b 	bl	8010d22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f003 0308 	and.w	r3, r3, #8
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d008      	beq.n	8004108 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004102:	461a      	mov	r2, r3
 8004104:	2308      	movs	r3, #8
 8004106:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	f003 0310 	and.w	r3, r3, #16
 800410e:	2b00      	cmp	r3, #0
 8004110:	d008      	beq.n	8004124 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004114:	015a      	lsls	r2, r3, #5
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	4413      	add	r3, r2
 800411a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800411e:	461a      	mov	r2, r3
 8004120:	2310      	movs	r3, #16
 8004122:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412a:	2b00      	cmp	r3, #0
 800412c:	d008      	beq.n	8004140 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	015a      	lsls	r2, r3, #5
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	4413      	add	r3, r2
 8004136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800413a:	461a      	mov	r2, r3
 800413c:	2340      	movs	r3, #64	; 0x40
 800413e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d023      	beq.n	8004192 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800414a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800414c:	6a38      	ldr	r0, [r7, #32]
 800414e:	f003 ffb7 	bl	80080c0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004154:	4613      	mov	r3, r2
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	4413      	add	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	3338      	adds	r3, #56	; 0x38
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	4413      	add	r3, r2
 8004162:	3304      	adds	r3, #4
 8004164:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	78db      	ldrb	r3, [r3, #3]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d108      	bne.n	8004180 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2200      	movs	r2, #0
 8004172:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004176:	b2db      	uxtb	r3, r3
 8004178:	4619      	mov	r1, r3
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f00c fe68 	bl	8010e50 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	4413      	add	r3, r2
 8004188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800418c:	461a      	mov	r2, r3
 800418e:	2302      	movs	r3, #2
 8004190:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800419c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 fcf0 	bl	8004b84 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80041a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a6:	3301      	adds	r3, #1
 80041a8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80041aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ac:	085b      	lsrs	r3, r3, #1
 80041ae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80041b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f47f af2e 	bne.w	8004014 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4618      	mov	r0, r3
 80041be:	f004 ffa1 	bl	8009104 <USB_ReadInterrupts>
 80041c2:	4603      	mov	r3, r0
 80041c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041cc:	d122      	bne.n	8004214 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	69fa      	ldr	r2, [r7, #28]
 80041d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041dc:	f023 0301 	bic.w	r3, r3, #1
 80041e0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d108      	bne.n	80041fe <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80041f4:	2100      	movs	r1, #0
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f00c ffd6 	bl	80111a8 <HAL_PCDEx_LPM_Callback>
 80041fc:	e002      	b.n	8004204 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f00c fe06 	bl	8010e10 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	695a      	ldr	r2, [r3, #20]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004212:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4618      	mov	r0, r3
 800421a:	f004 ff73 	bl	8009104 <USB_ReadInterrupts>
 800421e:	4603      	mov	r3, r0
 8004220:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004224:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004228:	d112      	bne.n	8004250 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b01      	cmp	r3, #1
 8004238:	d102      	bne.n	8004240 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f00c fdc2 	bl	8010dc4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695a      	ldr	r2, [r3, #20]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800424e:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4618      	mov	r0, r3
 8004256:	f004 ff55 	bl	8009104 <USB_ReadInterrupts>
 800425a:	4603      	mov	r3, r0
 800425c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004260:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004264:	d121      	bne.n	80042aa <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	695a      	ldr	r2, [r3, #20]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004274:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800427c:	2b00      	cmp	r3, #0
 800427e:	d111      	bne.n	80042a4 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428e:	089b      	lsrs	r3, r3, #2
 8004290:	f003 020f 	and.w	r2, r3, #15
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800429a:	2101      	movs	r1, #1
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f00c ff83 	bl	80111a8 <HAL_PCDEx_LPM_Callback>
 80042a2:	e002      	b.n	80042aa <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f00c fd8d 	bl	8010dc4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f004 ff28 	bl	8009104 <USB_ReadInterrupts>
 80042b4:	4603      	mov	r3, r0
 80042b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042be:	f040 80b7 	bne.w	8004430 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	69fa      	ldr	r2, [r7, #28]
 80042cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042d0:	f023 0301 	bic.w	r3, r3, #1
 80042d4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2110      	movs	r1, #16
 80042dc:	4618      	mov	r0, r3
 80042de:	f003 feef 	bl	80080c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042e2:	2300      	movs	r3, #0
 80042e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042e6:	e046      	b.n	8004376 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80042e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f4:	461a      	mov	r2, r3
 80042f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80042fa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80042fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	4413      	add	r3, r2
 8004304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800430c:	0151      	lsls	r1, r2, #5
 800430e:	69fa      	ldr	r2, [r7, #28]
 8004310:	440a      	add	r2, r1
 8004312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004316:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800431a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800431c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431e:	015a      	lsls	r2, r3, #5
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	4413      	add	r3, r2
 8004324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004328:	461a      	mov	r2, r3
 800432a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800432e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	4413      	add	r3, r2
 8004338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004340:	0151      	lsls	r1, r2, #5
 8004342:	69fa      	ldr	r2, [r7, #28]
 8004344:	440a      	add	r2, r1
 8004346:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800434a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800434e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004352:	015a      	lsls	r2, r3, #5
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	4413      	add	r3, r2
 8004358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004360:	0151      	lsls	r1, r2, #5
 8004362:	69fa      	ldr	r2, [r7, #28]
 8004364:	440a      	add	r2, r1
 8004366:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800436a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800436e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004372:	3301      	adds	r3, #1
 8004374:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800437c:	429a      	cmp	r2, r3
 800437e:	d3b3      	bcc.n	80042e8 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004386:	69db      	ldr	r3, [r3, #28]
 8004388:	69fa      	ldr	r2, [r7, #28]
 800438a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800438e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004392:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004398:	2b00      	cmp	r3, #0
 800439a:	d016      	beq.n	80043ca <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043a6:	69fa      	ldr	r2, [r7, #28]
 80043a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043ac:	f043 030b 	orr.w	r3, r3, #11
 80043b0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043bc:	69fa      	ldr	r2, [r7, #28]
 80043be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043c2:	f043 030b 	orr.w	r3, r3, #11
 80043c6:	6453      	str	r3, [r2, #68]	; 0x44
 80043c8:	e015      	b.n	80043f6 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	69fa      	ldr	r2, [r7, #28]
 80043d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80043dc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80043e0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	69fa      	ldr	r2, [r7, #28]
 80043ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043f0:	f043 030b 	orr.w	r3, r3, #11
 80043f4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	69fa      	ldr	r2, [r7, #28]
 8004400:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004404:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004408:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6818      	ldr	r0, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800441a:	461a      	mov	r2, r3
 800441c:	f004 ff36 	bl	800928c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	695a      	ldr	r2, [r3, #20]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800442e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4618      	mov	r0, r3
 8004436:	f004 fe65 	bl	8009104 <USB_ReadInterrupts>
 800443a:	4603      	mov	r3, r0
 800443c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004440:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004444:	d124      	bne.n	8004490 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4618      	mov	r0, r3
 800444c:	f004 fefb 	bl	8009246 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4618      	mov	r0, r3
 8004456:	f003 feb0 	bl	80081ba <USB_GetDevSpeed>
 800445a:	4603      	mov	r3, r0
 800445c:	461a      	mov	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681c      	ldr	r4, [r3, #0]
 8004466:	f000 feab 	bl	80051c0 <HAL_RCC_GetHCLKFreq>
 800446a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004470:	b2db      	uxtb	r3, r3
 8004472:	461a      	mov	r2, r3
 8004474:	4620      	mov	r0, r4
 8004476:	f003 fbb5 	bl	8007be4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f00c fc79 	bl	8010d72 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	695a      	ldr	r2, [r3, #20]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800448e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4618      	mov	r0, r3
 8004496:	f004 fe35 	bl	8009104 <USB_ReadInterrupts>
 800449a:	4603      	mov	r3, r0
 800449c:	f003 0308 	and.w	r3, r3, #8
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	d10a      	bne.n	80044ba <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f00c fc56 	bl	8010d56 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	695a      	ldr	r2, [r3, #20]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f002 0208 	and.w	r2, r2, #8
 80044b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4618      	mov	r0, r3
 80044c0:	f004 fe20 	bl	8009104 <USB_ReadInterrupts>
 80044c4:	4603      	mov	r3, r0
 80044c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ca:	2b80      	cmp	r3, #128	; 0x80
 80044cc:	d122      	bne.n	8004514 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80044ce:	6a3b      	ldr	r3, [r7, #32]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044d6:	6a3b      	ldr	r3, [r7, #32]
 80044d8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044da:	2301      	movs	r3, #1
 80044dc:	627b      	str	r3, [r7, #36]	; 0x24
 80044de:	e014      	b.n	800450a <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80044e0:	6879      	ldr	r1, [r7, #4]
 80044e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044e4:	4613      	mov	r3, r2
 80044e6:	00db      	lsls	r3, r3, #3
 80044e8:	4413      	add	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	440b      	add	r3, r1
 80044ee:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d105      	bne.n	8004504 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80044f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	4619      	mov	r1, r3
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 fb0f 	bl	8004b22 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004506:	3301      	adds	r3, #1
 8004508:	627b      	str	r3, [r7, #36]	; 0x24
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004510:	429a      	cmp	r2, r3
 8004512:	d3e5      	bcc.n	80044e0 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4618      	mov	r0, r3
 800451a:	f004 fdf3 	bl	8009104 <USB_ReadInterrupts>
 800451e:	4603      	mov	r3, r0
 8004520:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004524:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004528:	d13b      	bne.n	80045a2 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800452a:	2301      	movs	r3, #1
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
 800452e:	e02b      	b.n	8004588 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	015a      	lsls	r2, r3, #5
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	4413      	add	r3, r2
 8004538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004540:	6879      	ldr	r1, [r7, #4]
 8004542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004544:	4613      	mov	r3, r2
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	4413      	add	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	440b      	add	r3, r1
 800454e:	3340      	adds	r3, #64	; 0x40
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d115      	bne.n	8004582 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004556:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004558:	2b00      	cmp	r3, #0
 800455a:	da12      	bge.n	8004582 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800455c:	6879      	ldr	r1, [r7, #4]
 800455e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004560:	4613      	mov	r3, r2
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	4413      	add	r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	440b      	add	r3, r1
 800456a:	333f      	adds	r3, #63	; 0x3f
 800456c:	2201      	movs	r2, #1
 800456e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004572:	b2db      	uxtb	r3, r3
 8004574:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004578:	b2db      	uxtb	r3, r3
 800457a:	4619      	mov	r1, r3
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 fad0 	bl	8004b22 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004584:	3301      	adds	r3, #1
 8004586:	627b      	str	r3, [r7, #36]	; 0x24
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800458e:	429a      	cmp	r2, r3
 8004590:	d3ce      	bcc.n	8004530 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	695a      	ldr	r2, [r3, #20]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80045a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f004 fdac 	bl	8009104 <USB_ReadInterrupts>
 80045ac:	4603      	mov	r3, r0
 80045ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045b6:	d155      	bne.n	8004664 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045b8:	2301      	movs	r3, #1
 80045ba:	627b      	str	r3, [r7, #36]	; 0x24
 80045bc:	e045      	b.n	800464a <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80045be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c0:	015a      	lsls	r2, r3, #5
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	4413      	add	r3, r2
 80045c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80045ce:	6879      	ldr	r1, [r7, #4]
 80045d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d2:	4613      	mov	r3, r2
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	4413      	add	r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	440b      	add	r3, r1
 80045dc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d12e      	bne.n	8004644 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80045e6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	da2b      	bge.n	8004644 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80045f8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d121      	bne.n	8004644 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004600:	6879      	ldr	r1, [r7, #4]
 8004602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004604:	4613      	mov	r3, r2
 8004606:	00db      	lsls	r3, r3, #3
 8004608:	4413      	add	r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	440b      	add	r3, r1
 800460e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004612:	2201      	movs	r2, #1
 8004614:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800461e:	6a3b      	ldr	r3, [r7, #32]
 8004620:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004622:	6a3b      	ldr	r3, [r7, #32]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800462a:	2b00      	cmp	r3, #0
 800462c:	d10a      	bne.n	8004644 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	69fa      	ldr	r2, [r7, #28]
 8004638:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800463c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004640:	6053      	str	r3, [r2, #4]
            break;
 8004642:	e007      	b.n	8004654 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004646:	3301      	adds	r3, #1
 8004648:	627b      	str	r3, [r7, #36]	; 0x24
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004650:	429a      	cmp	r2, r3
 8004652:	d3b4      	bcc.n	80045be <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	695a      	ldr	r2, [r3, #20]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004662:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4618      	mov	r0, r3
 800466a:	f004 fd4b 	bl	8009104 <USB_ReadInterrupts>
 800466e:	4603      	mov	r3, r0
 8004670:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004678:	d10a      	bne.n	8004690 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f00c fbfa 	bl	8010e74 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	695a      	ldr	r2, [r3, #20]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800468e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4618      	mov	r0, r3
 8004696:	f004 fd35 	bl	8009104 <USB_ReadInterrupts>
 800469a:	4603      	mov	r3, r0
 800469c:	f003 0304 	and.w	r3, r3, #4
 80046a0:	2b04      	cmp	r3, #4
 80046a2:	d115      	bne.n	80046d0 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	f003 0304 	and.w	r3, r3, #4
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d002      	beq.n	80046bc <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f00c fbea 	bl	8010e90 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6859      	ldr	r1, [r3, #4]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	430a      	orrs	r2, r1
 80046ca:	605a      	str	r2, [r3, #4]
 80046cc:	e000      	b.n	80046d0 <HAL_PCD_IRQHandler+0x992>
      return;
 80046ce:	bf00      	nop
    }
  }
}
 80046d0:	3734      	adds	r7, #52	; 0x34
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd90      	pop	{r4, r7, pc}

080046d6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b082      	sub	sp, #8
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
 80046de:	460b      	mov	r3, r1
 80046e0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d101      	bne.n	80046f0 <HAL_PCD_SetAddress+0x1a>
 80046ec:	2302      	movs	r3, #2
 80046ee:	e013      	b.n	8004718 <HAL_PCD_SetAddress+0x42>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	78fa      	ldrb	r2, [r7, #3]
 80046fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	78fa      	ldrb	r2, [r7, #3]
 8004706:	4611      	mov	r1, r2
 8004708:	4618      	mov	r0, r3
 800470a:	f004 fc93 	bl	8009034 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	4608      	mov	r0, r1
 800472a:	4611      	mov	r1, r2
 800472c:	461a      	mov	r2, r3
 800472e:	4603      	mov	r3, r0
 8004730:	70fb      	strb	r3, [r7, #3]
 8004732:	460b      	mov	r3, r1
 8004734:	803b      	strh	r3, [r7, #0]
 8004736:	4613      	mov	r3, r2
 8004738:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800473a:	2300      	movs	r3, #0
 800473c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800473e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004742:	2b00      	cmp	r3, #0
 8004744:	da0f      	bge.n	8004766 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004746:	78fb      	ldrb	r3, [r7, #3]
 8004748:	f003 020f 	and.w	r2, r3, #15
 800474c:	4613      	mov	r3, r2
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	4413      	add	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	3338      	adds	r3, #56	; 0x38
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	4413      	add	r3, r2
 800475a:	3304      	adds	r3, #4
 800475c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2201      	movs	r2, #1
 8004762:	705a      	strb	r2, [r3, #1]
 8004764:	e00f      	b.n	8004786 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004766:	78fb      	ldrb	r3, [r7, #3]
 8004768:	f003 020f 	and.w	r2, r3, #15
 800476c:	4613      	mov	r3, r2
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	4413      	add	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	4413      	add	r3, r2
 800477c:	3304      	adds	r3, #4
 800477e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004786:	78fb      	ldrb	r3, [r7, #3]
 8004788:	f003 030f 	and.w	r3, r3, #15
 800478c:	b2da      	uxtb	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004792:	883a      	ldrh	r2, [r7, #0]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	78ba      	ldrb	r2, [r7, #2]
 800479c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	785b      	ldrb	r3, [r3, #1]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d004      	beq.n	80047b0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80047b0:	78bb      	ldrb	r3, [r7, #2]
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d102      	bne.n	80047bc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d101      	bne.n	80047ca <HAL_PCD_EP_Open+0xaa>
 80047c6:	2302      	movs	r3, #2
 80047c8:	e00e      	b.n	80047e8 <HAL_PCD_EP_Open+0xc8>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68f9      	ldr	r1, [r7, #12]
 80047d8:	4618      	mov	r0, r3
 80047da:	f003 fd13 	bl	8008204 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80047e6:	7afb      	ldrb	r3, [r7, #11]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	460b      	mov	r3, r1
 80047fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80047fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004800:	2b00      	cmp	r3, #0
 8004802:	da0f      	bge.n	8004824 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004804:	78fb      	ldrb	r3, [r7, #3]
 8004806:	f003 020f 	and.w	r2, r3, #15
 800480a:	4613      	mov	r3, r2
 800480c:	00db      	lsls	r3, r3, #3
 800480e:	4413      	add	r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	3338      	adds	r3, #56	; 0x38
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	4413      	add	r3, r2
 8004818:	3304      	adds	r3, #4
 800481a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2201      	movs	r2, #1
 8004820:	705a      	strb	r2, [r3, #1]
 8004822:	e00f      	b.n	8004844 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004824:	78fb      	ldrb	r3, [r7, #3]
 8004826:	f003 020f 	and.w	r2, r3, #15
 800482a:	4613      	mov	r3, r2
 800482c:	00db      	lsls	r3, r3, #3
 800482e:	4413      	add	r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	4413      	add	r3, r2
 800483a:	3304      	adds	r3, #4
 800483c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004844:	78fb      	ldrb	r3, [r7, #3]
 8004846:	f003 030f 	and.w	r3, r3, #15
 800484a:	b2da      	uxtb	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004856:	2b01      	cmp	r3, #1
 8004858:	d101      	bne.n	800485e <HAL_PCD_EP_Close+0x6e>
 800485a:	2302      	movs	r3, #2
 800485c:	e00e      	b.n	800487c <HAL_PCD_EP_Close+0x8c>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68f9      	ldr	r1, [r7, #12]
 800486c:	4618      	mov	r0, r3
 800486e:	f003 fd51 	bl	8008314 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	607a      	str	r2, [r7, #4]
 800488e:	603b      	str	r3, [r7, #0]
 8004890:	460b      	mov	r3, r1
 8004892:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004894:	7afb      	ldrb	r3, [r7, #11]
 8004896:	f003 020f 	and.w	r2, r3, #15
 800489a:	4613      	mov	r3, r2
 800489c:	00db      	lsls	r3, r3, #3
 800489e:	4413      	add	r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	4413      	add	r3, r2
 80048aa:	3304      	adds	r3, #4
 80048ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	2200      	movs	r2, #0
 80048be:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	2200      	movs	r2, #0
 80048c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048c6:	7afb      	ldrb	r3, [r7, #11]
 80048c8:	f003 030f 	and.w	r3, r3, #15
 80048cc:	b2da      	uxtb	r2, r3
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d102      	bne.n	80048e0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80048e0:	7afb      	ldrb	r3, [r7, #11]
 80048e2:	f003 030f 	and.w	r3, r3, #15
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d109      	bne.n	80048fe <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6818      	ldr	r0, [r3, #0]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	461a      	mov	r2, r3
 80048f6:	6979      	ldr	r1, [r7, #20]
 80048f8:	f004 f830 	bl	800895c <USB_EP0StartXfer>
 80048fc:	e008      	b.n	8004910 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6818      	ldr	r0, [r3, #0]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	b2db      	uxtb	r3, r3
 8004908:	461a      	mov	r2, r3
 800490a:	6979      	ldr	r1, [r7, #20]
 800490c:	f003 fdde 	bl	80084cc <USB_EPStartXfer>
  }

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3718      	adds	r7, #24
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b086      	sub	sp, #24
 800491e:	af00      	add	r7, sp, #0
 8004920:	60f8      	str	r0, [r7, #12]
 8004922:	607a      	str	r2, [r7, #4]
 8004924:	603b      	str	r3, [r7, #0]
 8004926:	460b      	mov	r3, r1
 8004928:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800492a:	7afb      	ldrb	r3, [r7, #11]
 800492c:	f003 020f 	and.w	r2, r3, #15
 8004930:	4613      	mov	r3, r2
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	4413      	add	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	3338      	adds	r3, #56	; 0x38
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	4413      	add	r3, r2
 800493e:	3304      	adds	r3, #4
 8004940:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	683a      	ldr	r2, [r7, #0]
 800494c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	2200      	movs	r2, #0
 8004952:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	2201      	movs	r2, #1
 8004958:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800495a:	7afb      	ldrb	r3, [r7, #11]
 800495c:	f003 030f 	and.w	r3, r3, #15
 8004960:	b2da      	uxtb	r2, r3
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d102      	bne.n	8004974 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004974:	7afb      	ldrb	r3, [r7, #11]
 8004976:	f003 030f 	and.w	r3, r3, #15
 800497a:	2b00      	cmp	r3, #0
 800497c:	d109      	bne.n	8004992 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6818      	ldr	r0, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	b2db      	uxtb	r3, r3
 8004988:	461a      	mov	r2, r3
 800498a:	6979      	ldr	r1, [r7, #20]
 800498c:	f003 ffe6 	bl	800895c <USB_EP0StartXfer>
 8004990:	e008      	b.n	80049a4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6818      	ldr	r0, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	b2db      	uxtb	r3, r3
 800499c:	461a      	mov	r2, r3
 800499e:	6979      	ldr	r1, [r7, #20]
 80049a0:	f003 fd94 	bl	80084cc <USB_EPStartXfer>
  }

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3718      	adds	r7, #24
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b084      	sub	sp, #16
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
 80049b6:	460b      	mov	r3, r1
 80049b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80049ba:	78fb      	ldrb	r3, [r7, #3]
 80049bc:	f003 020f 	and.w	r2, r3, #15
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d901      	bls.n	80049cc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e050      	b.n	8004a6e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80049cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	da0f      	bge.n	80049f4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049d4:	78fb      	ldrb	r3, [r7, #3]
 80049d6:	f003 020f 	and.w	r2, r3, #15
 80049da:	4613      	mov	r3, r2
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	4413      	add	r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	3338      	adds	r3, #56	; 0x38
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	4413      	add	r3, r2
 80049e8:	3304      	adds	r3, #4
 80049ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2201      	movs	r2, #1
 80049f0:	705a      	strb	r2, [r3, #1]
 80049f2:	e00d      	b.n	8004a10 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80049f4:	78fa      	ldrb	r2, [r7, #3]
 80049f6:	4613      	mov	r3, r2
 80049f8:	00db      	lsls	r3, r3, #3
 80049fa:	4413      	add	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	4413      	add	r3, r2
 8004a06:	3304      	adds	r3, #4
 8004a08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2201      	movs	r2, #1
 8004a14:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a16:	78fb      	ldrb	r3, [r7, #3]
 8004a18:	f003 030f 	and.w	r3, r3, #15
 8004a1c:	b2da      	uxtb	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d101      	bne.n	8004a30 <HAL_PCD_EP_SetStall+0x82>
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	e01e      	b.n	8004a6e <HAL_PCD_EP_SetStall+0xc0>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68f9      	ldr	r1, [r7, #12]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f004 fa24 	bl	8008e8c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a44:	78fb      	ldrb	r3, [r7, #3]
 8004a46:	f003 030f 	and.w	r3, r3, #15
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10a      	bne.n	8004a64 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6818      	ldr	r0, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	b2d9      	uxtb	r1, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004a5e:	461a      	mov	r2, r3
 8004a60:	f004 fc14 	bl	800928c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b084      	sub	sp, #16
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
 8004a7e:	460b      	mov	r3, r1
 8004a80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004a82:	78fb      	ldrb	r3, [r7, #3]
 8004a84:	f003 020f 	and.w	r2, r3, #15
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d901      	bls.n	8004a94 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e042      	b.n	8004b1a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	da0f      	bge.n	8004abc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a9c:	78fb      	ldrb	r3, [r7, #3]
 8004a9e:	f003 020f 	and.w	r2, r3, #15
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	00db      	lsls	r3, r3, #3
 8004aa6:	4413      	add	r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	3338      	adds	r3, #56	; 0x38
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	4413      	add	r3, r2
 8004ab0:	3304      	adds	r3, #4
 8004ab2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	705a      	strb	r2, [r3, #1]
 8004aba:	e00f      	b.n	8004adc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004abc:	78fb      	ldrb	r3, [r7, #3]
 8004abe:	f003 020f 	and.w	r2, r3, #15
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	00db      	lsls	r3, r3, #3
 8004ac6:	4413      	add	r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ae2:	78fb      	ldrb	r3, [r7, #3]
 8004ae4:	f003 030f 	and.w	r3, r3, #15
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d101      	bne.n	8004afc <HAL_PCD_EP_ClrStall+0x86>
 8004af8:	2302      	movs	r3, #2
 8004afa:	e00e      	b.n	8004b1a <HAL_PCD_EP_ClrStall+0xa4>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68f9      	ldr	r1, [r7, #12]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f004 fa2c 	bl	8008f68 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b084      	sub	sp, #16
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004b2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	da0c      	bge.n	8004b50 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b36:	78fb      	ldrb	r3, [r7, #3]
 8004b38:	f003 020f 	and.w	r2, r3, #15
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	4413      	add	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	3338      	adds	r3, #56	; 0x38
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	4413      	add	r3, r2
 8004b4a:	3304      	adds	r3, #4
 8004b4c:	60fb      	str	r3, [r7, #12]
 8004b4e:	e00c      	b.n	8004b6a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b50:	78fb      	ldrb	r3, [r7, #3]
 8004b52:	f003 020f 	and.w	r2, r3, #15
 8004b56:	4613      	mov	r3, r2
 8004b58:	00db      	lsls	r3, r3, #3
 8004b5a:	4413      	add	r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	4413      	add	r3, r2
 8004b66:	3304      	adds	r3, #4
 8004b68:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68f9      	ldr	r1, [r7, #12]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f004 f84b 	bl	8008c0c <USB_EPStopXfer>
 8004b76:	4603      	mov	r3, r0
 8004b78:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004b7a:	7afb      	ldrb	r3, [r7, #11]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b08a      	sub	sp, #40	; 0x28
 8004b88:	af02      	add	r7, sp, #8
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	00db      	lsls	r3, r3, #3
 8004b9e:	4413      	add	r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	3338      	adds	r3, #56	; 0x38
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	3304      	adds	r3, #4
 8004baa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6a1a      	ldr	r2, [r3, #32]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d901      	bls.n	8004bbc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e06c      	b.n	8004c96 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	699a      	ldr	r2, [r3, #24]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	69fa      	ldr	r2, [r7, #28]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d902      	bls.n	8004bd8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	3303      	adds	r3, #3
 8004bdc:	089b      	lsrs	r3, r3, #2
 8004bde:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004be0:	e02b      	b.n	8004c3a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	699a      	ldr	r2, [r3, #24]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	69fa      	ldr	r2, [r7, #28]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d902      	bls.n	8004bfe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	3303      	adds	r3, #3
 8004c02:	089b      	lsrs	r3, r3, #2
 8004c04:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6919      	ldr	r1, [r3, #16]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	b2da      	uxtb	r2, r3
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	6978      	ldr	r0, [r7, #20]
 8004c1e:	f004 f89f 	bl	8008d60 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	691a      	ldr	r2, [r3, #16]
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	441a      	add	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6a1a      	ldr	r2, [r3, #32]
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	441a      	add	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	015a      	lsls	r2, r3, #5
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	4413      	add	r3, r2
 8004c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	69ba      	ldr	r2, [r7, #24]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d809      	bhi.n	8004c64 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6a1a      	ldr	r2, [r3, #32]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d203      	bcs.n	8004c64 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1be      	bne.n	8004be2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	699a      	ldr	r2, [r3, #24]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6a1b      	ldr	r3, [r3, #32]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d811      	bhi.n	8004c94 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	f003 030f 	and.w	r3, r3, #15
 8004c76:	2201      	movs	r2, #1
 8004c78:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	43db      	mvns	r3, r3
 8004c8a:	6939      	ldr	r1, [r7, #16]
 8004c8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c90:	4013      	ands	r3, r2
 8004c92:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3720      	adds	r7, #32
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
	...

08004ca0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b088      	sub	sp, #32
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	333c      	adds	r3, #60	; 0x3c
 8004cb8:	3304      	adds	r3, #4
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	015a      	lsls	r2, r3, #5
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d17b      	bne.n	8004dce <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	f003 0308 	and.w	r3, r3, #8
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d015      	beq.n	8004d0c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	4a61      	ldr	r2, [pc, #388]	; (8004e68 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	f240 80b9 	bls.w	8004e5c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 80b3 	beq.w	8004e5c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	015a      	lsls	r2, r3, #5
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d02:	461a      	mov	r2, r3
 8004d04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d08:	6093      	str	r3, [r2, #8]
 8004d0a:	e0a7      	b.n	8004e5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	f003 0320 	and.w	r3, r3, #32
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d009      	beq.n	8004d2a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d22:	461a      	mov	r2, r3
 8004d24:	2320      	movs	r3, #32
 8004d26:	6093      	str	r3, [r2, #8]
 8004d28:	e098      	b.n	8004e5c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f040 8093 	bne.w	8004e5c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	4a4b      	ldr	r2, [pc, #300]	; (8004e68 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d90f      	bls.n	8004d5e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00a      	beq.n	8004d5e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	015a      	lsls	r2, r3, #5
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d54:	461a      	mov	r2, r3
 8004d56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d5a:	6093      	str	r3, [r2, #8]
 8004d5c:	e07e      	b.n	8004e5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	4613      	mov	r3, r2
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	4413      	add	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	4413      	add	r3, r2
 8004d70:	3304      	adds	r3, #4
 8004d72:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	69da      	ldr	r2, [r3, #28]
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	0159      	lsls	r1, r3, #5
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	440b      	add	r3, r1
 8004d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d8a:	1ad2      	subs	r2, r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d114      	bne.n	8004dc0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d109      	bne.n	8004db2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6818      	ldr	r0, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004da8:	461a      	mov	r2, r3
 8004daa:	2101      	movs	r1, #1
 8004dac:	f004 fa6e 	bl	800928c <USB_EP0_OutStart>
 8004db0:	e006      	b.n	8004dc0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	691a      	ldr	r2, [r3, #16]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	441a      	add	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f00b ff90 	bl	8010cec <HAL_PCD_DataOutStageCallback>
 8004dcc:	e046      	b.n	8004e5c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	4a26      	ldr	r2, [pc, #152]	; (8004e6c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d124      	bne.n	8004e20 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00a      	beq.n	8004df6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	015a      	lsls	r2, r3, #5
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dec:	461a      	mov	r2, r3
 8004dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004df2:	6093      	str	r3, [r2, #8]
 8004df4:	e032      	b.n	8004e5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f003 0320 	and.w	r3, r3, #32
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d008      	beq.n	8004e12 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	015a      	lsls	r2, r3, #5
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	4413      	add	r3, r2
 8004e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	2320      	movs	r3, #32
 8004e10:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	4619      	mov	r1, r3
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f00b ff67 	bl	8010cec <HAL_PCD_DataOutStageCallback>
 8004e1e:	e01d      	b.n	8004e5c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d114      	bne.n	8004e50 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004e26:	6879      	ldr	r1, [r7, #4]
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	4413      	add	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	440b      	add	r3, r1
 8004e34:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d108      	bne.n	8004e50 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6818      	ldr	r0, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004e48:	461a      	mov	r2, r3
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	f004 fa1e 	bl	800928c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	4619      	mov	r1, r3
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f00b ff48 	bl	8010cec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3720      	adds	r7, #32
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	4f54300a 	.word	0x4f54300a
 8004e6c:	4f54310a 	.word	0x4f54310a

08004e70 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	333c      	adds	r3, #60	; 0x3c
 8004e88:	3304      	adds	r3, #4
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	015a      	lsls	r2, r3, #5
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	4413      	add	r3, r2
 8004e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	4a15      	ldr	r2, [pc, #84]	; (8004ef8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d90e      	bls.n	8004ec4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d009      	beq.n	8004ec4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ec2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f00b feff 	bl	8010cc8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	4a0a      	ldr	r2, [pc, #40]	; (8004ef8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d90c      	bls.n	8004eec <PCD_EP_OutSetupPacket_int+0x7c>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d108      	bne.n	8004eec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6818      	ldr	r0, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	2101      	movs	r1, #1
 8004ee8:	f004 f9d0 	bl	800928c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3718      	adds	r7, #24
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	4f54300a 	.word	0x4f54300a

08004efc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	460b      	mov	r3, r1
 8004f06:	70fb      	strb	r3, [r7, #3]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f12:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004f14:	78fb      	ldrb	r3, [r7, #3]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d107      	bne.n	8004f2a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004f1a:	883b      	ldrh	r3, [r7, #0]
 8004f1c:	0419      	lsls	r1, r3, #16
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	430a      	orrs	r2, r1
 8004f26:	629a      	str	r2, [r3, #40]	; 0x28
 8004f28:	e028      	b.n	8004f7c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f30:	0c1b      	lsrs	r3, r3, #16
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	4413      	add	r3, r2
 8004f36:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f38:	2300      	movs	r3, #0
 8004f3a:	73fb      	strb	r3, [r7, #15]
 8004f3c:	e00d      	b.n	8004f5a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	7bfb      	ldrb	r3, [r7, #15]
 8004f44:	3340      	adds	r3, #64	; 0x40
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	0c1b      	lsrs	r3, r3, #16
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	4413      	add	r3, r2
 8004f52:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f54:	7bfb      	ldrb	r3, [r7, #15]
 8004f56:	3301      	adds	r3, #1
 8004f58:	73fb      	strb	r3, [r7, #15]
 8004f5a:	7bfa      	ldrb	r2, [r7, #15]
 8004f5c:	78fb      	ldrb	r3, [r7, #3]
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d3ec      	bcc.n	8004f3e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004f64:	883b      	ldrh	r3, [r7, #0]
 8004f66:	0418      	lsls	r0, r3, #16
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6819      	ldr	r1, [r3, #0]
 8004f6c:	78fb      	ldrb	r3, [r7, #3]
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	4302      	orrs	r2, r0
 8004f74:	3340      	adds	r3, #64	; 0x40
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	440b      	add	r3, r1
 8004f7a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3714      	adds	r7, #20
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b083      	sub	sp, #12
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
 8004f92:	460b      	mov	r3, r1
 8004f94:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	887a      	ldrh	r2, [r7, #2]
 8004f9c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fde:	f043 0303 	orr.w	r3, r3, #3
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3714      	adds	r7, #20
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d101      	bne.n	8005008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e0cc      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005008:	4b68      	ldr	r3, [pc, #416]	; (80051ac <HAL_RCC_ClockConfig+0x1b8>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 030f 	and.w	r3, r3, #15
 8005010:	683a      	ldr	r2, [r7, #0]
 8005012:	429a      	cmp	r2, r3
 8005014:	d90c      	bls.n	8005030 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005016:	4b65      	ldr	r3, [pc, #404]	; (80051ac <HAL_RCC_ClockConfig+0x1b8>)
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	b2d2      	uxtb	r2, r2
 800501c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800501e:	4b63      	ldr	r3, [pc, #396]	; (80051ac <HAL_RCC_ClockConfig+0x1b8>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 030f 	and.w	r3, r3, #15
 8005026:	683a      	ldr	r2, [r7, #0]
 8005028:	429a      	cmp	r2, r3
 800502a:	d001      	beq.n	8005030 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e0b8      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d020      	beq.n	800507e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0304 	and.w	r3, r3, #4
 8005044:	2b00      	cmp	r3, #0
 8005046:	d005      	beq.n	8005054 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005048:	4b59      	ldr	r3, [pc, #356]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	4a58      	ldr	r2, [pc, #352]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 800504e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005052:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0308 	and.w	r3, r3, #8
 800505c:	2b00      	cmp	r3, #0
 800505e:	d005      	beq.n	800506c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005060:	4b53      	ldr	r3, [pc, #332]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	4a52      	ldr	r2, [pc, #328]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005066:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800506a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800506c:	4b50      	ldr	r3, [pc, #320]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	494d      	ldr	r1, [pc, #308]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 800507a:	4313      	orrs	r3, r2
 800507c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b00      	cmp	r3, #0
 8005088:	d044      	beq.n	8005114 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d107      	bne.n	80050a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005092:	4b47      	ldr	r3, [pc, #284]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d119      	bne.n	80050d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e07f      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d003      	beq.n	80050b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050ae:	2b03      	cmp	r3, #3
 80050b0:	d107      	bne.n	80050c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050b2:	4b3f      	ldr	r3, [pc, #252]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d109      	bne.n	80050d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e06f      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050c2:	4b3b      	ldr	r3, [pc, #236]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d101      	bne.n	80050d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e067      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050d2:	4b37      	ldr	r3, [pc, #220]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f023 0203 	bic.w	r2, r3, #3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	4934      	ldr	r1, [pc, #208]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050e4:	f7fc fd60 	bl	8001ba8 <HAL_GetTick>
 80050e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ea:	e00a      	b.n	8005102 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050ec:	f7fc fd5c 	bl	8001ba8 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e04f      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005102:	4b2b      	ldr	r3, [pc, #172]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f003 020c 	and.w	r2, r3, #12
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	429a      	cmp	r2, r3
 8005112:	d1eb      	bne.n	80050ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005114:	4b25      	ldr	r3, [pc, #148]	; (80051ac <HAL_RCC_ClockConfig+0x1b8>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 030f 	and.w	r3, r3, #15
 800511c:	683a      	ldr	r2, [r7, #0]
 800511e:	429a      	cmp	r2, r3
 8005120:	d20c      	bcs.n	800513c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005122:	4b22      	ldr	r3, [pc, #136]	; (80051ac <HAL_RCC_ClockConfig+0x1b8>)
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	b2d2      	uxtb	r2, r2
 8005128:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800512a:	4b20      	ldr	r3, [pc, #128]	; (80051ac <HAL_RCC_ClockConfig+0x1b8>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 030f 	and.w	r3, r3, #15
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	429a      	cmp	r2, r3
 8005136:	d001      	beq.n	800513c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e032      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b00      	cmp	r3, #0
 8005146:	d008      	beq.n	800515a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005148:	4b19      	ldr	r3, [pc, #100]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	4916      	ldr	r1, [pc, #88]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005156:	4313      	orrs	r3, r2
 8005158:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0308 	and.w	r3, r3, #8
 8005162:	2b00      	cmp	r3, #0
 8005164:	d009      	beq.n	800517a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005166:	4b12      	ldr	r3, [pc, #72]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	00db      	lsls	r3, r3, #3
 8005174:	490e      	ldr	r1, [pc, #56]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005176:	4313      	orrs	r3, r2
 8005178:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800517a:	f000 fbb1 	bl	80058e0 <HAL_RCC_GetSysClockFreq>
 800517e:	4602      	mov	r2, r0
 8005180:	4b0b      	ldr	r3, [pc, #44]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	091b      	lsrs	r3, r3, #4
 8005186:	f003 030f 	and.w	r3, r3, #15
 800518a:	490a      	ldr	r1, [pc, #40]	; (80051b4 <HAL_RCC_ClockConfig+0x1c0>)
 800518c:	5ccb      	ldrb	r3, [r1, r3]
 800518e:	fa22 f303 	lsr.w	r3, r2, r3
 8005192:	4a09      	ldr	r2, [pc, #36]	; (80051b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005196:	4b09      	ldr	r3, [pc, #36]	; (80051bc <HAL_RCC_ClockConfig+0x1c8>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4618      	mov	r0, r3
 800519c:	f7fc fba2 	bl	80018e4 <HAL_InitTick>

  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	40023c00 	.word	0x40023c00
 80051b0:	40023800 	.word	0x40023800
 80051b4:	0801249c 	.word	0x0801249c
 80051b8:	20000008 	.word	0x20000008
 80051bc:	2000000c 	.word	0x2000000c

080051c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051c0:	b480      	push	{r7}
 80051c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051c4:	4b03      	ldr	r3, [pc, #12]	; (80051d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80051c6:	681b      	ldr	r3, [r3, #0]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	20000008 	.word	0x20000008

080051d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80051dc:	f7ff fff0 	bl	80051c0 <HAL_RCC_GetHCLKFreq>
 80051e0:	4602      	mov	r2, r0
 80051e2:	4b05      	ldr	r3, [pc, #20]	; (80051f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	0a9b      	lsrs	r3, r3, #10
 80051e8:	f003 0307 	and.w	r3, r3, #7
 80051ec:	4903      	ldr	r1, [pc, #12]	; (80051fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80051ee:	5ccb      	ldrb	r3, [r1, r3]
 80051f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	40023800 	.word	0x40023800
 80051fc:	080124ac 	.word	0x080124ac

08005200 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005204:	f7ff ffdc 	bl	80051c0 <HAL_RCC_GetHCLKFreq>
 8005208:	4602      	mov	r2, r0
 800520a:	4b05      	ldr	r3, [pc, #20]	; (8005220 <HAL_RCC_GetPCLK2Freq+0x20>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	0b5b      	lsrs	r3, r3, #13
 8005210:	f003 0307 	and.w	r3, r3, #7
 8005214:	4903      	ldr	r1, [pc, #12]	; (8005224 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005216:	5ccb      	ldrb	r3, [r1, r3]
 8005218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800521c:	4618      	mov	r0, r3
 800521e:	bd80      	pop	{r7, pc}
 8005220:	40023800 	.word	0x40023800
 8005224:	080124ac 	.word	0x080124ac

08005228 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	220f      	movs	r2, #15
 8005236:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005238:	4b12      	ldr	r3, [pc, #72]	; (8005284 <HAL_RCC_GetClockConfig+0x5c>)
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f003 0203 	and.w	r2, r3, #3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005244:	4b0f      	ldr	r3, [pc, #60]	; (8005284 <HAL_RCC_GetClockConfig+0x5c>)
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005250:	4b0c      	ldr	r3, [pc, #48]	; (8005284 <HAL_RCC_GetClockConfig+0x5c>)
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800525c:	4b09      	ldr	r3, [pc, #36]	; (8005284 <HAL_RCC_GetClockConfig+0x5c>)
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	08db      	lsrs	r3, r3, #3
 8005262:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800526a:	4b07      	ldr	r3, [pc, #28]	; (8005288 <HAL_RCC_GetClockConfig+0x60>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 020f 	and.w	r2, r3, #15
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	601a      	str	r2, [r3, #0]
}
 8005276:	bf00      	nop
 8005278:	370c      	adds	r7, #12
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	40023800 	.word	0x40023800
 8005288:	40023c00 	.word	0x40023c00

0800528c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b08c      	sub	sp, #48	; 0x30
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005294:	2300      	movs	r3, #0
 8005296:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8005298:	2300      	movs	r3, #0
 800529a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800529c:	2300      	movs	r3, #0
 800529e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80052a0:	2300      	movs	r3, #0
 80052a2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80052a4:	2300      	movs	r3, #0
 80052a6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80052a8:	2300      	movs	r3, #0
 80052aa:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80052ac:	2300      	movs	r3, #0
 80052ae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80052b0:	2300      	movs	r3, #0
 80052b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80052b4:	2300      	movs	r3, #0
 80052b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d010      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80052c4:	4b6f      	ldr	r3, [pc, #444]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80052c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052ca:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d2:	496c      	ldr	r1, [pc, #432]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80052e2:	2301      	movs	r3, #1
 80052e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0302 	and.w	r3, r3, #2
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d010      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80052f2:	4b64      	ldr	r3, [pc, #400]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80052f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052f8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005300:	4960      	ldr	r1, [pc, #384]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005302:	4313      	orrs	r3, r2
 8005304:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800530c:	2b00      	cmp	r3, #0
 800530e:	d101      	bne.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8005310:	2301      	movs	r3, #1
 8005312:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0304 	and.w	r3, r3, #4
 800531c:	2b00      	cmp	r3, #0
 800531e:	d017      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005320:	4b58      	ldr	r3, [pc, #352]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005322:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005326:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532e:	4955      	ldr	r1, [pc, #340]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005330:	4313      	orrs	r3, r2
 8005332:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800533e:	d101      	bne.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8005340:	2301      	movs	r3, #1
 8005342:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005348:	2b00      	cmp	r3, #0
 800534a:	d101      	bne.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800534c:	2301      	movs	r3, #1
 800534e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0308 	and.w	r3, r3, #8
 8005358:	2b00      	cmp	r3, #0
 800535a:	d017      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800535c:	4b49      	ldr	r3, [pc, #292]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800535e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005362:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800536a:	4946      	ldr	r1, [pc, #280]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800536c:	4313      	orrs	r3, r2
 800536e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005376:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800537a:	d101      	bne.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800537c:	2301      	movs	r3, #1
 800537e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005384:	2b00      	cmp	r3, #0
 8005386:	d101      	bne.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8005388:	2301      	movs	r3, #1
 800538a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0320 	and.w	r3, r3, #32
 8005394:	2b00      	cmp	r3, #0
 8005396:	f000 808a 	beq.w	80054ae <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800539a:	2300      	movs	r3, #0
 800539c:	60bb      	str	r3, [r7, #8]
 800539e:	4b39      	ldr	r3, [pc, #228]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	4a38      	ldr	r2, [pc, #224]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80053a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053a8:	6413      	str	r3, [r2, #64]	; 0x40
 80053aa:	4b36      	ldr	r3, [pc, #216]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80053ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053b2:	60bb      	str	r3, [r7, #8]
 80053b4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80053b6:	4b34      	ldr	r3, [pc, #208]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a33      	ldr	r2, [pc, #204]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80053bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053c0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80053c2:	f7fc fbf1 	bl	8001ba8 <HAL_GetTick>
 80053c6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80053c8:	e008      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80053ca:	f7fc fbed 	bl	8001ba8 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d901      	bls.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e278      	b.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80053dc:	4b2a      	ldr	r3, [pc, #168]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d0f0      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053e8:	4b26      	ldr	r3, [pc, #152]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80053ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053f0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053f2:	6a3b      	ldr	r3, [r7, #32]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d02f      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005400:	6a3a      	ldr	r2, [r7, #32]
 8005402:	429a      	cmp	r2, r3
 8005404:	d028      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005406:	4b1f      	ldr	r3, [pc, #124]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800540a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800540e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005410:	4b1e      	ldr	r3, [pc, #120]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005412:	2201      	movs	r2, #1
 8005414:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005416:	4b1d      	ldr	r3, [pc, #116]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005418:	2200      	movs	r2, #0
 800541a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800541c:	4a19      	ldr	r2, [pc, #100]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800541e:	6a3b      	ldr	r3, [r7, #32]
 8005420:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005422:	4b18      	ldr	r3, [pc, #96]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b01      	cmp	r3, #1
 800542c:	d114      	bne.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800542e:	f7fc fbbb 	bl	8001ba8 <HAL_GetTick>
 8005432:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005434:	e00a      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005436:	f7fc fbb7 	bl	8001ba8 <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	f241 3288 	movw	r2, #5000	; 0x1388
 8005444:	4293      	cmp	r3, r2
 8005446:	d901      	bls.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e240      	b.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800544c:	4b0d      	ldr	r3, [pc, #52]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800544e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005450:	f003 0302 	and.w	r3, r3, #2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d0ee      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005460:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005464:	d114      	bne.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8005466:	4b07      	ldr	r3, [pc, #28]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005472:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005476:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800547a:	4902      	ldr	r1, [pc, #8]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800547c:	4313      	orrs	r3, r2
 800547e:	608b      	str	r3, [r1, #8]
 8005480:	e00c      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005482:	bf00      	nop
 8005484:	40023800 	.word	0x40023800
 8005488:	40007000 	.word	0x40007000
 800548c:	42470e40 	.word	0x42470e40
 8005490:	4b4a      	ldr	r3, [pc, #296]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	4a49      	ldr	r2, [pc, #292]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005496:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800549a:	6093      	str	r3, [r2, #8]
 800549c:	4b47      	ldr	r3, [pc, #284]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800549e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054a8:	4944      	ldr	r1, [pc, #272]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0310 	and.w	r3, r3, #16
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d004      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80054c0:	4b3f      	ldr	r3, [pc, #252]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80054c2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00a      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80054d0:	4b3a      	ldr	r3, [pc, #232]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80054d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054de:	4937      	ldr	r1, [pc, #220]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00a      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80054f2:	4b32      	ldr	r3, [pc, #200]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80054f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054f8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005500:	492e      	ldr	r1, [pc, #184]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005502:	4313      	orrs	r3, r2
 8005504:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005510:	2b00      	cmp	r3, #0
 8005512:	d011      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005514:	4b29      	ldr	r3, [pc, #164]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005516:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800551a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005522:	4926      	ldr	r1, [pc, #152]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005524:	4313      	orrs	r3, r2
 8005526:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800552e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005532:	d101      	bne.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8005534:	2301      	movs	r3, #1
 8005536:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00a      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005544:	4b1d      	ldr	r3, [pc, #116]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005546:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800554a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005552:	491a      	ldr	r1, [pc, #104]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005554:	4313      	orrs	r3, r2
 8005556:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005562:	2b00      	cmp	r3, #0
 8005564:	d011      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8005566:	4b15      	ldr	r3, [pc, #84]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005568:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800556c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005574:	4911      	ldr	r1, [pc, #68]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005576:	4313      	orrs	r3, r2
 8005578:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005580:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005584:	d101      	bne.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8005586:	2301      	movs	r3, #1
 8005588:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800558a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800558c:	2b01      	cmp	r3, #1
 800558e:	d005      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005598:	f040 80ff 	bne.w	800579a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800559c:	4b09      	ldr	r3, [pc, #36]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800559e:	2200      	movs	r2, #0
 80055a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055a2:	f7fc fb01 	bl	8001ba8 <HAL_GetTick>
 80055a6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055a8:	e00e      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80055aa:	f7fc fafd 	bl	8001ba8 <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d907      	bls.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e188      	b.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x642>
 80055bc:	40023800 	.word	0x40023800
 80055c0:	424711e0 	.word	0x424711e0
 80055c4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055c8:	4b7e      	ldr	r3, [pc, #504]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1ea      	bne.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0301 	and.w	r3, r3, #1
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d003      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d009      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d028      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d124      	bne.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80055fc:	4b71      	ldr	r3, [pc, #452]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80055fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005602:	0c1b      	lsrs	r3, r3, #16
 8005604:	f003 0303 	and.w	r3, r3, #3
 8005608:	3301      	adds	r3, #1
 800560a:	005b      	lsls	r3, r3, #1
 800560c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800560e:	4b6d      	ldr	r3, [pc, #436]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005614:	0e1b      	lsrs	r3, r3, #24
 8005616:	f003 030f 	and.w	r3, r3, #15
 800561a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685a      	ldr	r2, [r3, #4]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	019b      	lsls	r3, r3, #6
 8005626:	431a      	orrs	r2, r3
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	085b      	lsrs	r3, r3, #1
 800562c:	3b01      	subs	r3, #1
 800562e:	041b      	lsls	r3, r3, #16
 8005630:	431a      	orrs	r2, r3
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	061b      	lsls	r3, r3, #24
 8005636:	431a      	orrs	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	071b      	lsls	r3, r3, #28
 800563e:	4961      	ldr	r1, [pc, #388]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005640:	4313      	orrs	r3, r2
 8005642:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0304 	and.w	r3, r3, #4
 800564e:	2b00      	cmp	r3, #0
 8005650:	d004      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005656:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800565a:	d00a      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005664:	2b00      	cmp	r3, #0
 8005666:	d035      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800566c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005670:	d130      	bne.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005672:	4b54      	ldr	r3, [pc, #336]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005674:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005678:	0c1b      	lsrs	r3, r3, #16
 800567a:	f003 0303 	and.w	r3, r3, #3
 800567e:	3301      	adds	r3, #1
 8005680:	005b      	lsls	r3, r3, #1
 8005682:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005684:	4b4f      	ldr	r3, [pc, #316]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800568a:	0f1b      	lsrs	r3, r3, #28
 800568c:	f003 0307 	and.w	r3, r3, #7
 8005690:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685a      	ldr	r2, [r3, #4]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	019b      	lsls	r3, r3, #6
 800569c:	431a      	orrs	r2, r3
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	085b      	lsrs	r3, r3, #1
 80056a2:	3b01      	subs	r3, #1
 80056a4:	041b      	lsls	r3, r3, #16
 80056a6:	431a      	orrs	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	061b      	lsls	r3, r3, #24
 80056ae:	431a      	orrs	r2, r3
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	071b      	lsls	r3, r3, #28
 80056b4:	4943      	ldr	r1, [pc, #268]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80056bc:	4b41      	ldr	r3, [pc, #260]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80056be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056c2:	f023 021f 	bic.w	r2, r3, #31
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ca:	3b01      	subs	r3, #1
 80056cc:	493d      	ldr	r1, [pc, #244]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d029      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056e8:	d124      	bne.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80056ea:	4b36      	ldr	r3, [pc, #216]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80056ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056f0:	0c1b      	lsrs	r3, r3, #16
 80056f2:	f003 0303 	and.w	r3, r3, #3
 80056f6:	3301      	adds	r3, #1
 80056f8:	005b      	lsls	r3, r3, #1
 80056fa:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056fc:	4b31      	ldr	r3, [pc, #196]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80056fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005702:	0f1b      	lsrs	r3, r3, #28
 8005704:	f003 0307 	and.w	r3, r3, #7
 8005708:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685a      	ldr	r2, [r3, #4]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	019b      	lsls	r3, r3, #6
 8005714:	431a      	orrs	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	085b      	lsrs	r3, r3, #1
 800571c:	3b01      	subs	r3, #1
 800571e:	041b      	lsls	r3, r3, #16
 8005720:	431a      	orrs	r2, r3
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	061b      	lsls	r3, r3, #24
 8005726:	431a      	orrs	r2, r3
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	071b      	lsls	r3, r3, #28
 800572c:	4925      	ldr	r1, [pc, #148]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800572e:	4313      	orrs	r3, r2
 8005730:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800573c:	2b00      	cmp	r3, #0
 800573e:	d016      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	019b      	lsls	r3, r3, #6
 800574a:	431a      	orrs	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	085b      	lsrs	r3, r3, #1
 8005752:	3b01      	subs	r3, #1
 8005754:	041b      	lsls	r3, r3, #16
 8005756:	431a      	orrs	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	061b      	lsls	r3, r3, #24
 800575e:	431a      	orrs	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	071b      	lsls	r3, r3, #28
 8005766:	4917      	ldr	r1, [pc, #92]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005768:	4313      	orrs	r3, r2
 800576a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800576e:	4b16      	ldr	r3, [pc, #88]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005770:	2201      	movs	r2, #1
 8005772:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005774:	f7fc fa18 	bl	8001ba8 <HAL_GetTick>
 8005778:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800577a:	e008      	b.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800577c:	f7fc fa14 	bl	8001ba8 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	2b02      	cmp	r3, #2
 8005788:	d901      	bls.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e09f      	b.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800578e:	4b0d      	ldr	r3, [pc, #52]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d0f0      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800579a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579c:	2b01      	cmp	r3, #1
 800579e:	f040 8095 	bne.w	80058cc <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80057a2:	4b0a      	ldr	r3, [pc, #40]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80057a8:	f7fc f9fe 	bl	8001ba8 <HAL_GetTick>
 80057ac:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80057ae:	e00f      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80057b0:	f7fc f9fa 	bl	8001ba8 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d908      	bls.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e085      	b.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x642>
 80057c2:	bf00      	nop
 80057c4:	40023800 	.word	0x40023800
 80057c8:	42470068 	.word	0x42470068
 80057cc:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80057d0:	4b41      	ldr	r3, [pc, #260]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057dc:	d0e8      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0304 	and.w	r3, r3, #4
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d009      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d02b      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005802:	2b00      	cmp	r3, #0
 8005804:	d127      	bne.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005806:	4b34      	ldr	r3, [pc, #208]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800580c:	0c1b      	lsrs	r3, r3, #16
 800580e:	f003 0303 	and.w	r3, r3, #3
 8005812:	3301      	adds	r3, #1
 8005814:	005b      	lsls	r3, r3, #1
 8005816:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	699a      	ldr	r2, [r3, #24]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	69db      	ldr	r3, [r3, #28]
 8005820:	019b      	lsls	r3, r3, #6
 8005822:	431a      	orrs	r2, r3
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	085b      	lsrs	r3, r3, #1
 8005828:	3b01      	subs	r3, #1
 800582a:	041b      	lsls	r3, r3, #16
 800582c:	431a      	orrs	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005832:	061b      	lsls	r3, r3, #24
 8005834:	4928      	ldr	r1, [pc, #160]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005836:	4313      	orrs	r3, r2
 8005838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800583c:	4b26      	ldr	r3, [pc, #152]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800583e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005842:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584a:	3b01      	subs	r3, #1
 800584c:	021b      	lsls	r3, r3, #8
 800584e:	4922      	ldr	r1, [pc, #136]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005850:	4313      	orrs	r3, r2
 8005852:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800585e:	2b00      	cmp	r3, #0
 8005860:	d01d      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005866:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800586a:	d118      	bne.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800586c:	4b1a      	ldr	r3, [pc, #104]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800586e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005872:	0e1b      	lsrs	r3, r3, #24
 8005874:	f003 030f 	and.w	r3, r3, #15
 8005878:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	699a      	ldr	r2, [r3, #24]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	69db      	ldr	r3, [r3, #28]
 8005882:	019b      	lsls	r3, r3, #6
 8005884:	431a      	orrs	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	085b      	lsrs	r3, r3, #1
 800588c:	3b01      	subs	r3, #1
 800588e:	041b      	lsls	r3, r3, #16
 8005890:	431a      	orrs	r2, r3
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	061b      	lsls	r3, r3, #24
 8005896:	4910      	ldr	r1, [pc, #64]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005898:	4313      	orrs	r3, r2
 800589a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800589e:	4b0f      	ldr	r3, [pc, #60]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80058a0:	2201      	movs	r2, #1
 80058a2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80058a4:	f7fc f980 	bl	8001ba8 <HAL_GetTick>
 80058a8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058aa:	e008      	b.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80058ac:	f7fc f97c 	bl	8001ba8 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d901      	bls.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e007      	b.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058be:	4b06      	ldr	r3, [pc, #24]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058ca:	d1ef      	bne.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3730      	adds	r7, #48	; 0x30
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	40023800 	.word	0x40023800
 80058dc:	42470070 	.word	0x42470070

080058e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058e4:	b0ae      	sub	sp, #184	; 0xb8
 80058e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80058e8:	2300      	movs	r3, #0
 80058ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80058ee:	2300      	movs	r3, #0
 80058f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80058f4:	2300      	movs	r3, #0
 80058f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80058fa:	2300      	movs	r3, #0
 80058fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8005900:	2300      	movs	r3, #0
 8005902:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005906:	4bcb      	ldr	r3, [pc, #812]	; (8005c34 <HAL_RCC_GetSysClockFreq+0x354>)
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f003 030c 	and.w	r3, r3, #12
 800590e:	2b0c      	cmp	r3, #12
 8005910:	f200 8206 	bhi.w	8005d20 <HAL_RCC_GetSysClockFreq+0x440>
 8005914:	a201      	add	r2, pc, #4	; (adr r2, 800591c <HAL_RCC_GetSysClockFreq+0x3c>)
 8005916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800591a:	bf00      	nop
 800591c:	08005951 	.word	0x08005951
 8005920:	08005d21 	.word	0x08005d21
 8005924:	08005d21 	.word	0x08005d21
 8005928:	08005d21 	.word	0x08005d21
 800592c:	08005959 	.word	0x08005959
 8005930:	08005d21 	.word	0x08005d21
 8005934:	08005d21 	.word	0x08005d21
 8005938:	08005d21 	.word	0x08005d21
 800593c:	08005961 	.word	0x08005961
 8005940:	08005d21 	.word	0x08005d21
 8005944:	08005d21 	.word	0x08005d21
 8005948:	08005d21 	.word	0x08005d21
 800594c:	08005b51 	.word	0x08005b51
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005950:	4bb9      	ldr	r3, [pc, #740]	; (8005c38 <HAL_RCC_GetSysClockFreq+0x358>)
 8005952:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8005956:	e1e7      	b.n	8005d28 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005958:	4bb8      	ldr	r3, [pc, #736]	; (8005c3c <HAL_RCC_GetSysClockFreq+0x35c>)
 800595a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800595e:	e1e3      	b.n	8005d28 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005960:	4bb4      	ldr	r3, [pc, #720]	; (8005c34 <HAL_RCC_GetSysClockFreq+0x354>)
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005968:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800596c:	4bb1      	ldr	r3, [pc, #708]	; (8005c34 <HAL_RCC_GetSysClockFreq+0x354>)
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d071      	beq.n	8005a5c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005978:	4bae      	ldr	r3, [pc, #696]	; (8005c34 <HAL_RCC_GetSysClockFreq+0x354>)
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	099b      	lsrs	r3, r3, #6
 800597e:	2200      	movs	r2, #0
 8005980:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005984:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005988:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800598c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005990:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005994:	2300      	movs	r3, #0
 8005996:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800599a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800599e:	4622      	mov	r2, r4
 80059a0:	462b      	mov	r3, r5
 80059a2:	f04f 0000 	mov.w	r0, #0
 80059a6:	f04f 0100 	mov.w	r1, #0
 80059aa:	0159      	lsls	r1, r3, #5
 80059ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059b0:	0150      	lsls	r0, r2, #5
 80059b2:	4602      	mov	r2, r0
 80059b4:	460b      	mov	r3, r1
 80059b6:	4621      	mov	r1, r4
 80059b8:	1a51      	subs	r1, r2, r1
 80059ba:	6439      	str	r1, [r7, #64]	; 0x40
 80059bc:	4629      	mov	r1, r5
 80059be:	eb63 0301 	sbc.w	r3, r3, r1
 80059c2:	647b      	str	r3, [r7, #68]	; 0x44
 80059c4:	f04f 0200 	mov.w	r2, #0
 80059c8:	f04f 0300 	mov.w	r3, #0
 80059cc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80059d0:	4649      	mov	r1, r9
 80059d2:	018b      	lsls	r3, r1, #6
 80059d4:	4641      	mov	r1, r8
 80059d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80059da:	4641      	mov	r1, r8
 80059dc:	018a      	lsls	r2, r1, #6
 80059de:	4641      	mov	r1, r8
 80059e0:	1a51      	subs	r1, r2, r1
 80059e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80059e4:	4649      	mov	r1, r9
 80059e6:	eb63 0301 	sbc.w	r3, r3, r1
 80059ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059ec:	f04f 0200 	mov.w	r2, #0
 80059f0:	f04f 0300 	mov.w	r3, #0
 80059f4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80059f8:	4649      	mov	r1, r9
 80059fa:	00cb      	lsls	r3, r1, #3
 80059fc:	4641      	mov	r1, r8
 80059fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a02:	4641      	mov	r1, r8
 8005a04:	00ca      	lsls	r2, r1, #3
 8005a06:	4610      	mov	r0, r2
 8005a08:	4619      	mov	r1, r3
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	4622      	mov	r2, r4
 8005a0e:	189b      	adds	r3, r3, r2
 8005a10:	633b      	str	r3, [r7, #48]	; 0x30
 8005a12:	462b      	mov	r3, r5
 8005a14:	460a      	mov	r2, r1
 8005a16:	eb42 0303 	adc.w	r3, r2, r3
 8005a1a:	637b      	str	r3, [r7, #52]	; 0x34
 8005a1c:	f04f 0200 	mov.w	r2, #0
 8005a20:	f04f 0300 	mov.w	r3, #0
 8005a24:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005a28:	4629      	mov	r1, r5
 8005a2a:	024b      	lsls	r3, r1, #9
 8005a2c:	4621      	mov	r1, r4
 8005a2e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005a32:	4621      	mov	r1, r4
 8005a34:	024a      	lsls	r2, r1, #9
 8005a36:	4610      	mov	r0, r2
 8005a38:	4619      	mov	r1, r3
 8005a3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005a48:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005a4c:	f7fa fbe0 	bl	8000210 <__aeabi_uldivmod>
 8005a50:	4602      	mov	r2, r0
 8005a52:	460b      	mov	r3, r1
 8005a54:	4613      	mov	r3, r2
 8005a56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a5a:	e067      	b.n	8005b2c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a5c:	4b75      	ldr	r3, [pc, #468]	; (8005c34 <HAL_RCC_GetSysClockFreq+0x354>)
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	099b      	lsrs	r3, r3, #6
 8005a62:	2200      	movs	r2, #0
 8005a64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a68:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005a6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a74:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a76:	2300      	movs	r3, #0
 8005a78:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005a7a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8005a7e:	4622      	mov	r2, r4
 8005a80:	462b      	mov	r3, r5
 8005a82:	f04f 0000 	mov.w	r0, #0
 8005a86:	f04f 0100 	mov.w	r1, #0
 8005a8a:	0159      	lsls	r1, r3, #5
 8005a8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a90:	0150      	lsls	r0, r2, #5
 8005a92:	4602      	mov	r2, r0
 8005a94:	460b      	mov	r3, r1
 8005a96:	4621      	mov	r1, r4
 8005a98:	1a51      	subs	r1, r2, r1
 8005a9a:	62b9      	str	r1, [r7, #40]	; 0x28
 8005a9c:	4629      	mov	r1, r5
 8005a9e:	eb63 0301 	sbc.w	r3, r3, r1
 8005aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005aa4:	f04f 0200 	mov.w	r2, #0
 8005aa8:	f04f 0300 	mov.w	r3, #0
 8005aac:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8005ab0:	4649      	mov	r1, r9
 8005ab2:	018b      	lsls	r3, r1, #6
 8005ab4:	4641      	mov	r1, r8
 8005ab6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005aba:	4641      	mov	r1, r8
 8005abc:	018a      	lsls	r2, r1, #6
 8005abe:	4641      	mov	r1, r8
 8005ac0:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ac4:	4649      	mov	r1, r9
 8005ac6:	eb63 0b01 	sbc.w	fp, r3, r1
 8005aca:	f04f 0200 	mov.w	r2, #0
 8005ace:	f04f 0300 	mov.w	r3, #0
 8005ad2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ad6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ada:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ade:	4692      	mov	sl, r2
 8005ae0:	469b      	mov	fp, r3
 8005ae2:	4623      	mov	r3, r4
 8005ae4:	eb1a 0303 	adds.w	r3, sl, r3
 8005ae8:	623b      	str	r3, [r7, #32]
 8005aea:	462b      	mov	r3, r5
 8005aec:	eb4b 0303 	adc.w	r3, fp, r3
 8005af0:	627b      	str	r3, [r7, #36]	; 0x24
 8005af2:	f04f 0200 	mov.w	r2, #0
 8005af6:	f04f 0300 	mov.w	r3, #0
 8005afa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005afe:	4629      	mov	r1, r5
 8005b00:	028b      	lsls	r3, r1, #10
 8005b02:	4621      	mov	r1, r4
 8005b04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b08:	4621      	mov	r1, r4
 8005b0a:	028a      	lsls	r2, r1, #10
 8005b0c:	4610      	mov	r0, r2
 8005b0e:	4619      	mov	r1, r3
 8005b10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b14:	2200      	movs	r2, #0
 8005b16:	673b      	str	r3, [r7, #112]	; 0x70
 8005b18:	677a      	str	r2, [r7, #116]	; 0x74
 8005b1a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005b1e:	f7fa fb77 	bl	8000210 <__aeabi_uldivmod>
 8005b22:	4602      	mov	r2, r0
 8005b24:	460b      	mov	r3, r1
 8005b26:	4613      	mov	r3, r2
 8005b28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b2c:	4b41      	ldr	r3, [pc, #260]	; (8005c34 <HAL_RCC_GetSysClockFreq+0x354>)
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	0c1b      	lsrs	r3, r3, #16
 8005b32:	f003 0303 	and.w	r3, r3, #3
 8005b36:	3301      	adds	r3, #1
 8005b38:	005b      	lsls	r3, r3, #1
 8005b3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8005b3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005b4e:	e0eb      	b.n	8005d28 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b50:	4b38      	ldr	r3, [pc, #224]	; (8005c34 <HAL_RCC_GetSysClockFreq+0x354>)
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b5c:	4b35      	ldr	r3, [pc, #212]	; (8005c34 <HAL_RCC_GetSysClockFreq+0x354>)
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d06b      	beq.n	8005c40 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b68:	4b32      	ldr	r3, [pc, #200]	; (8005c34 <HAL_RCC_GetSysClockFreq+0x354>)
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	099b      	lsrs	r3, r3, #6
 8005b6e:	2200      	movs	r2, #0
 8005b70:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005b74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b7a:	663b      	str	r3, [r7, #96]	; 0x60
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	667b      	str	r3, [r7, #100]	; 0x64
 8005b80:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005b84:	4622      	mov	r2, r4
 8005b86:	462b      	mov	r3, r5
 8005b88:	f04f 0000 	mov.w	r0, #0
 8005b8c:	f04f 0100 	mov.w	r1, #0
 8005b90:	0159      	lsls	r1, r3, #5
 8005b92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b96:	0150      	lsls	r0, r2, #5
 8005b98:	4602      	mov	r2, r0
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	4621      	mov	r1, r4
 8005b9e:	1a51      	subs	r1, r2, r1
 8005ba0:	61b9      	str	r1, [r7, #24]
 8005ba2:	4629      	mov	r1, r5
 8005ba4:	eb63 0301 	sbc.w	r3, r3, r1
 8005ba8:	61fb      	str	r3, [r7, #28]
 8005baa:	f04f 0200 	mov.w	r2, #0
 8005bae:	f04f 0300 	mov.w	r3, #0
 8005bb2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005bb6:	4659      	mov	r1, fp
 8005bb8:	018b      	lsls	r3, r1, #6
 8005bba:	4651      	mov	r1, sl
 8005bbc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005bc0:	4651      	mov	r1, sl
 8005bc2:	018a      	lsls	r2, r1, #6
 8005bc4:	4651      	mov	r1, sl
 8005bc6:	ebb2 0801 	subs.w	r8, r2, r1
 8005bca:	4659      	mov	r1, fp
 8005bcc:	eb63 0901 	sbc.w	r9, r3, r1
 8005bd0:	f04f 0200 	mov.w	r2, #0
 8005bd4:	f04f 0300 	mov.w	r3, #0
 8005bd8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bdc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005be0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005be4:	4690      	mov	r8, r2
 8005be6:	4699      	mov	r9, r3
 8005be8:	4623      	mov	r3, r4
 8005bea:	eb18 0303 	adds.w	r3, r8, r3
 8005bee:	613b      	str	r3, [r7, #16]
 8005bf0:	462b      	mov	r3, r5
 8005bf2:	eb49 0303 	adc.w	r3, r9, r3
 8005bf6:	617b      	str	r3, [r7, #20]
 8005bf8:	f04f 0200 	mov.w	r2, #0
 8005bfc:	f04f 0300 	mov.w	r3, #0
 8005c00:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005c04:	4629      	mov	r1, r5
 8005c06:	024b      	lsls	r3, r1, #9
 8005c08:	4621      	mov	r1, r4
 8005c0a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c0e:	4621      	mov	r1, r4
 8005c10:	024a      	lsls	r2, r1, #9
 8005c12:	4610      	mov	r0, r2
 8005c14:	4619      	mov	r1, r3
 8005c16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c1e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005c20:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005c24:	f7fa faf4 	bl	8000210 <__aeabi_uldivmod>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c32:	e065      	b.n	8005d00 <HAL_RCC_GetSysClockFreq+0x420>
 8005c34:	40023800 	.word	0x40023800
 8005c38:	00f42400 	.word	0x00f42400
 8005c3c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c40:	4b3d      	ldr	r3, [pc, #244]	; (8005d38 <HAL_RCC_GetSysClockFreq+0x458>)
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	099b      	lsrs	r3, r3, #6
 8005c46:	2200      	movs	r2, #0
 8005c48:	4618      	mov	r0, r3
 8005c4a:	4611      	mov	r1, r2
 8005c4c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005c50:	653b      	str	r3, [r7, #80]	; 0x50
 8005c52:	2300      	movs	r3, #0
 8005c54:	657b      	str	r3, [r7, #84]	; 0x54
 8005c56:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8005c5a:	4642      	mov	r2, r8
 8005c5c:	464b      	mov	r3, r9
 8005c5e:	f04f 0000 	mov.w	r0, #0
 8005c62:	f04f 0100 	mov.w	r1, #0
 8005c66:	0159      	lsls	r1, r3, #5
 8005c68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c6c:	0150      	lsls	r0, r2, #5
 8005c6e:	4602      	mov	r2, r0
 8005c70:	460b      	mov	r3, r1
 8005c72:	4641      	mov	r1, r8
 8005c74:	1a51      	subs	r1, r2, r1
 8005c76:	60b9      	str	r1, [r7, #8]
 8005c78:	4649      	mov	r1, r9
 8005c7a:	eb63 0301 	sbc.w	r3, r3, r1
 8005c7e:	60fb      	str	r3, [r7, #12]
 8005c80:	f04f 0200 	mov.w	r2, #0
 8005c84:	f04f 0300 	mov.w	r3, #0
 8005c88:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005c8c:	4659      	mov	r1, fp
 8005c8e:	018b      	lsls	r3, r1, #6
 8005c90:	4651      	mov	r1, sl
 8005c92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c96:	4651      	mov	r1, sl
 8005c98:	018a      	lsls	r2, r1, #6
 8005c9a:	4651      	mov	r1, sl
 8005c9c:	1a54      	subs	r4, r2, r1
 8005c9e:	4659      	mov	r1, fp
 8005ca0:	eb63 0501 	sbc.w	r5, r3, r1
 8005ca4:	f04f 0200 	mov.w	r2, #0
 8005ca8:	f04f 0300 	mov.w	r3, #0
 8005cac:	00eb      	lsls	r3, r5, #3
 8005cae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cb2:	00e2      	lsls	r2, r4, #3
 8005cb4:	4614      	mov	r4, r2
 8005cb6:	461d      	mov	r5, r3
 8005cb8:	4643      	mov	r3, r8
 8005cba:	18e3      	adds	r3, r4, r3
 8005cbc:	603b      	str	r3, [r7, #0]
 8005cbe:	464b      	mov	r3, r9
 8005cc0:	eb45 0303 	adc.w	r3, r5, r3
 8005cc4:	607b      	str	r3, [r7, #4]
 8005cc6:	f04f 0200 	mov.w	r2, #0
 8005cca:	f04f 0300 	mov.w	r3, #0
 8005cce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005cd2:	4629      	mov	r1, r5
 8005cd4:	028b      	lsls	r3, r1, #10
 8005cd6:	4621      	mov	r1, r4
 8005cd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005cdc:	4621      	mov	r1, r4
 8005cde:	028a      	lsls	r2, r1, #10
 8005ce0:	4610      	mov	r0, r2
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ce8:	2200      	movs	r2, #0
 8005cea:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cec:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005cee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005cf2:	f7fa fa8d 	bl	8000210 <__aeabi_uldivmod>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005d00:	4b0d      	ldr	r3, [pc, #52]	; (8005d38 <HAL_RCC_GetSysClockFreq+0x458>)
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	0f1b      	lsrs	r3, r3, #28
 8005d06:	f003 0307 	and.w	r3, r3, #7
 8005d0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8005d0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005d12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005d1e:	e003      	b.n	8005d28 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d20:	4b06      	ldr	r3, [pc, #24]	; (8005d3c <HAL_RCC_GetSysClockFreq+0x45c>)
 8005d22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005d26:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	37b8      	adds	r7, #184	; 0xb8
 8005d30:	46bd      	mov	sp, r7
 8005d32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d36:	bf00      	nop
 8005d38:	40023800 	.word	0x40023800
 8005d3c:	00f42400 	.word	0x00f42400

08005d40 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b086      	sub	sp, #24
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d101      	bne.n	8005d52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e28d      	b.n	800626e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	f000 8083 	beq.w	8005e66 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005d60:	4b94      	ldr	r3, [pc, #592]	; (8005fb4 <HAL_RCC_OscConfig+0x274>)
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f003 030c 	and.w	r3, r3, #12
 8005d68:	2b04      	cmp	r3, #4
 8005d6a:	d019      	beq.n	8005da0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005d6c:	4b91      	ldr	r3, [pc, #580]	; (8005fb4 <HAL_RCC_OscConfig+0x274>)
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005d74:	2b08      	cmp	r3, #8
 8005d76:	d106      	bne.n	8005d86 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005d78:	4b8e      	ldr	r3, [pc, #568]	; (8005fb4 <HAL_RCC_OscConfig+0x274>)
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d84:	d00c      	beq.n	8005da0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d86:	4b8b      	ldr	r3, [pc, #556]	; (8005fb4 <HAL_RCC_OscConfig+0x274>)
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005d8e:	2b0c      	cmp	r3, #12
 8005d90:	d112      	bne.n	8005db8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d92:	4b88      	ldr	r3, [pc, #544]	; (8005fb4 <HAL_RCC_OscConfig+0x274>)
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d9e:	d10b      	bne.n	8005db8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005da0:	4b84      	ldr	r3, [pc, #528]	; (8005fb4 <HAL_RCC_OscConfig+0x274>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d05b      	beq.n	8005e64 <HAL_RCC_OscConfig+0x124>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d157      	bne.n	8005e64 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e25a      	b.n	800626e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dc0:	d106      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x90>
 8005dc2:	4b7c      	ldr	r3, [pc, #496]	; (8005fb4 <HAL_RCC_OscConfig+0x274>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a7b      	ldr	r2, [pc, #492]	; (8005fb4 <HAL_RCC_OscConfig+0x274>)
 8005dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dcc:	6013      	str	r3, [r2, #0]
 8005dce:	e01d      	b.n	8005e0c <HAL_RCC_OscConfig+0xcc>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005dd8:	d10c      	bne.n	8005df4 <HAL_RCC_OscConfig+0xb4>
 8005dda:	4b76      	ldr	r3, [pc, #472]	; (8005fb4 <HAL_RCC_OscConfig+0x274>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a75      	ldr	r2, [pc, #468]	; (8005fb4 <HAL_RCC_OscConfig+0x274>)
 8005de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005de4:	6013      	str	r3, [r2, #0]
 8005de6:	4b73      	ldr	r3, [pc, #460]	; (8005fb4 <HAL_RCC_OscConfig+0x274>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a72      	ldr	r2, [pc, #456]	; (8005fb4 <HAL_RCC_OscConfig+0x274>)
 8005dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005df0:	6013      	str	r3, [r2, #0]
 8005df2:	e00b      	b.n	8005e0c <HAL_RCC_OscConfig+0xcc>
 8005df4:	4b6f      	ldr	r3, [pc, #444]	; (8005fb4 <HAL_RCC_OscConfig+0x274>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a6e      	ldr	r2, [pc, #440]	; (8005fb4 <HAL_RCC_OscConfig+0x274>)
 8005dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dfe:	6013      	str	r3, [r2, #0]
 8005e00:	4b6c      	ldr	r3, [pc, #432]	; (8005fb4 <HAL_RCC_OscConfig+0x274>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a6b      	ldr	r2, [pc, #428]	; (8005fb4 <HAL_RCC_OscConfig+0x274>)
 8005e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d013      	beq.n	8005e3c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e14:	f7fb fec8 	bl	8001ba8 <HAL_GetTick>
 8005e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e1a:	e008      	b.n	8005e2e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e1c:	f7fb fec4 	bl	8001ba8 <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	2b64      	cmp	r3, #100	; 0x64
 8005e28:	d901      	bls.n	8005e2e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e21f      	b.n	800626e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e2e:	4b61      	ldr	r3, [pc, #388]	; (8005fb4 <HAL_RCC_OscConfig+0x274>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d0f0      	beq.n	8005e1c <HAL_RCC_OscConfig+0xdc>
 8005e3a:	e014      	b.n	8005e66 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e3c:	f7fb feb4 	bl	8001ba8 <HAL_GetTick>
 8005e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e42:	e008      	b.n	8005e56 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e44:	f7fb feb0 	bl	8001ba8 <HAL_GetTick>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	2b64      	cmp	r3, #100	; 0x64
 8005e50:	d901      	bls.n	8005e56 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e20b      	b.n	800626e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e56:	4b57      	ldr	r3, [pc, #348]	; (8005fb4 <HAL_RCC_OscConfig+0x274>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1f0      	bne.n	8005e44 <HAL_RCC_OscConfig+0x104>
 8005e62:	e000      	b.n	8005e66 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0302 	and.w	r3, r3, #2
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d06f      	beq.n	8005f52 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005e72:	4b50      	ldr	r3, [pc, #320]	; (8005fb4 <HAL_RCC_OscConfig+0x274>)
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	f003 030c 	and.w	r3, r3, #12
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d017      	beq.n	8005eae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005e7e:	4b4d      	ldr	r3, [pc, #308]	; (8005fb4 <HAL_RCC_OscConfig+0x274>)
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005e86:	2b08      	cmp	r3, #8
 8005e88:	d105      	bne.n	8005e96 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005e8a:	4b4a      	ldr	r3, [pc, #296]	; (8005fb4 <HAL_RCC_OscConfig+0x274>)
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00b      	beq.n	8005eae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e96:	4b47      	ldr	r3, [pc, #284]	; (8005fb4 <HAL_RCC_OscConfig+0x274>)
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005e9e:	2b0c      	cmp	r3, #12
 8005ea0:	d11c      	bne.n	8005edc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ea2:	4b44      	ldr	r3, [pc, #272]	; (8005fb4 <HAL_RCC_OscConfig+0x274>)
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d116      	bne.n	8005edc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005eae:	4b41      	ldr	r3, [pc, #260]	; (8005fb4 <HAL_RCC_OscConfig+0x274>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0302 	and.w	r3, r3, #2
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d005      	beq.n	8005ec6 <HAL_RCC_OscConfig+0x186>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d001      	beq.n	8005ec6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e1d3      	b.n	800626e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ec6:	4b3b      	ldr	r3, [pc, #236]	; (8005fb4 <HAL_RCC_OscConfig+0x274>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	00db      	lsls	r3, r3, #3
 8005ed4:	4937      	ldr	r1, [pc, #220]	; (8005fb4 <HAL_RCC_OscConfig+0x274>)
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005eda:	e03a      	b.n	8005f52 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d020      	beq.n	8005f26 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ee4:	4b34      	ldr	r3, [pc, #208]	; (8005fb8 <HAL_RCC_OscConfig+0x278>)
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eea:	f7fb fe5d 	bl	8001ba8 <HAL_GetTick>
 8005eee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ef0:	e008      	b.n	8005f04 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ef2:	f7fb fe59 	bl	8001ba8 <HAL_GetTick>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d901      	bls.n	8005f04 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005f00:	2303      	movs	r3, #3
 8005f02:	e1b4      	b.n	800626e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f04:	4b2b      	ldr	r3, [pc, #172]	; (8005fb4 <HAL_RCC_OscConfig+0x274>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0302 	and.w	r3, r3, #2
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d0f0      	beq.n	8005ef2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f10:	4b28      	ldr	r3, [pc, #160]	; (8005fb4 <HAL_RCC_OscConfig+0x274>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	00db      	lsls	r3, r3, #3
 8005f1e:	4925      	ldr	r1, [pc, #148]	; (8005fb4 <HAL_RCC_OscConfig+0x274>)
 8005f20:	4313      	orrs	r3, r2
 8005f22:	600b      	str	r3, [r1, #0]
 8005f24:	e015      	b.n	8005f52 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f26:	4b24      	ldr	r3, [pc, #144]	; (8005fb8 <HAL_RCC_OscConfig+0x278>)
 8005f28:	2200      	movs	r2, #0
 8005f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f2c:	f7fb fe3c 	bl	8001ba8 <HAL_GetTick>
 8005f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f32:	e008      	b.n	8005f46 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f34:	f7fb fe38 	bl	8001ba8 <HAL_GetTick>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d901      	bls.n	8005f46 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e193      	b.n	800626e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f46:	4b1b      	ldr	r3, [pc, #108]	; (8005fb4 <HAL_RCC_OscConfig+0x274>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0302 	and.w	r3, r3, #2
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1f0      	bne.n	8005f34 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0308 	and.w	r3, r3, #8
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d036      	beq.n	8005fcc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d016      	beq.n	8005f94 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f66:	4b15      	ldr	r3, [pc, #84]	; (8005fbc <HAL_RCC_OscConfig+0x27c>)
 8005f68:	2201      	movs	r2, #1
 8005f6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f6c:	f7fb fe1c 	bl	8001ba8 <HAL_GetTick>
 8005f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f72:	e008      	b.n	8005f86 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f74:	f7fb fe18 	bl	8001ba8 <HAL_GetTick>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d901      	bls.n	8005f86 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e173      	b.n	800626e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f86:	4b0b      	ldr	r3, [pc, #44]	; (8005fb4 <HAL_RCC_OscConfig+0x274>)
 8005f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f8a:	f003 0302 	and.w	r3, r3, #2
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d0f0      	beq.n	8005f74 <HAL_RCC_OscConfig+0x234>
 8005f92:	e01b      	b.n	8005fcc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f94:	4b09      	ldr	r3, [pc, #36]	; (8005fbc <HAL_RCC_OscConfig+0x27c>)
 8005f96:	2200      	movs	r2, #0
 8005f98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f9a:	f7fb fe05 	bl	8001ba8 <HAL_GetTick>
 8005f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fa0:	e00e      	b.n	8005fc0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fa2:	f7fb fe01 	bl	8001ba8 <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d907      	bls.n	8005fc0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e15c      	b.n	800626e <HAL_RCC_OscConfig+0x52e>
 8005fb4:	40023800 	.word	0x40023800
 8005fb8:	42470000 	.word	0x42470000
 8005fbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fc0:	4b8a      	ldr	r3, [pc, #552]	; (80061ec <HAL_RCC_OscConfig+0x4ac>)
 8005fc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d1ea      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0304 	and.w	r3, r3, #4
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f000 8097 	beq.w	8006108 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fde:	4b83      	ldr	r3, [pc, #524]	; (80061ec <HAL_RCC_OscConfig+0x4ac>)
 8005fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10f      	bne.n	800600a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fea:	2300      	movs	r3, #0
 8005fec:	60bb      	str	r3, [r7, #8]
 8005fee:	4b7f      	ldr	r3, [pc, #508]	; (80061ec <HAL_RCC_OscConfig+0x4ac>)
 8005ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff2:	4a7e      	ldr	r2, [pc, #504]	; (80061ec <HAL_RCC_OscConfig+0x4ac>)
 8005ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8005ffa:	4b7c      	ldr	r3, [pc, #496]	; (80061ec <HAL_RCC_OscConfig+0x4ac>)
 8005ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006002:	60bb      	str	r3, [r7, #8]
 8006004:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006006:	2301      	movs	r3, #1
 8006008:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800600a:	4b79      	ldr	r3, [pc, #484]	; (80061f0 <HAL_RCC_OscConfig+0x4b0>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006012:	2b00      	cmp	r3, #0
 8006014:	d118      	bne.n	8006048 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006016:	4b76      	ldr	r3, [pc, #472]	; (80061f0 <HAL_RCC_OscConfig+0x4b0>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a75      	ldr	r2, [pc, #468]	; (80061f0 <HAL_RCC_OscConfig+0x4b0>)
 800601c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006020:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006022:	f7fb fdc1 	bl	8001ba8 <HAL_GetTick>
 8006026:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006028:	e008      	b.n	800603c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800602a:	f7fb fdbd 	bl	8001ba8 <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	2b02      	cmp	r3, #2
 8006036:	d901      	bls.n	800603c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e118      	b.n	800626e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800603c:	4b6c      	ldr	r3, [pc, #432]	; (80061f0 <HAL_RCC_OscConfig+0x4b0>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006044:	2b00      	cmp	r3, #0
 8006046:	d0f0      	beq.n	800602a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d106      	bne.n	800605e <HAL_RCC_OscConfig+0x31e>
 8006050:	4b66      	ldr	r3, [pc, #408]	; (80061ec <HAL_RCC_OscConfig+0x4ac>)
 8006052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006054:	4a65      	ldr	r2, [pc, #404]	; (80061ec <HAL_RCC_OscConfig+0x4ac>)
 8006056:	f043 0301 	orr.w	r3, r3, #1
 800605a:	6713      	str	r3, [r2, #112]	; 0x70
 800605c:	e01c      	b.n	8006098 <HAL_RCC_OscConfig+0x358>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	2b05      	cmp	r3, #5
 8006064:	d10c      	bne.n	8006080 <HAL_RCC_OscConfig+0x340>
 8006066:	4b61      	ldr	r3, [pc, #388]	; (80061ec <HAL_RCC_OscConfig+0x4ac>)
 8006068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800606a:	4a60      	ldr	r2, [pc, #384]	; (80061ec <HAL_RCC_OscConfig+0x4ac>)
 800606c:	f043 0304 	orr.w	r3, r3, #4
 8006070:	6713      	str	r3, [r2, #112]	; 0x70
 8006072:	4b5e      	ldr	r3, [pc, #376]	; (80061ec <HAL_RCC_OscConfig+0x4ac>)
 8006074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006076:	4a5d      	ldr	r2, [pc, #372]	; (80061ec <HAL_RCC_OscConfig+0x4ac>)
 8006078:	f043 0301 	orr.w	r3, r3, #1
 800607c:	6713      	str	r3, [r2, #112]	; 0x70
 800607e:	e00b      	b.n	8006098 <HAL_RCC_OscConfig+0x358>
 8006080:	4b5a      	ldr	r3, [pc, #360]	; (80061ec <HAL_RCC_OscConfig+0x4ac>)
 8006082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006084:	4a59      	ldr	r2, [pc, #356]	; (80061ec <HAL_RCC_OscConfig+0x4ac>)
 8006086:	f023 0301 	bic.w	r3, r3, #1
 800608a:	6713      	str	r3, [r2, #112]	; 0x70
 800608c:	4b57      	ldr	r3, [pc, #348]	; (80061ec <HAL_RCC_OscConfig+0x4ac>)
 800608e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006090:	4a56      	ldr	r2, [pc, #344]	; (80061ec <HAL_RCC_OscConfig+0x4ac>)
 8006092:	f023 0304 	bic.w	r3, r3, #4
 8006096:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d015      	beq.n	80060cc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060a0:	f7fb fd82 	bl	8001ba8 <HAL_GetTick>
 80060a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060a6:	e00a      	b.n	80060be <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060a8:	f7fb fd7e 	bl	8001ba8 <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d901      	bls.n	80060be <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e0d7      	b.n	800626e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060be:	4b4b      	ldr	r3, [pc, #300]	; (80061ec <HAL_RCC_OscConfig+0x4ac>)
 80060c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c2:	f003 0302 	and.w	r3, r3, #2
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d0ee      	beq.n	80060a8 <HAL_RCC_OscConfig+0x368>
 80060ca:	e014      	b.n	80060f6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060cc:	f7fb fd6c 	bl	8001ba8 <HAL_GetTick>
 80060d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060d2:	e00a      	b.n	80060ea <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060d4:	f7fb fd68 	bl	8001ba8 <HAL_GetTick>
 80060d8:	4602      	mov	r2, r0
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	f241 3288 	movw	r2, #5000	; 0x1388
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d901      	bls.n	80060ea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e0c1      	b.n	800626e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060ea:	4b40      	ldr	r3, [pc, #256]	; (80061ec <HAL_RCC_OscConfig+0x4ac>)
 80060ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ee:	f003 0302 	and.w	r3, r3, #2
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1ee      	bne.n	80060d4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060f6:	7dfb      	ldrb	r3, [r7, #23]
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d105      	bne.n	8006108 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060fc:	4b3b      	ldr	r3, [pc, #236]	; (80061ec <HAL_RCC_OscConfig+0x4ac>)
 80060fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006100:	4a3a      	ldr	r2, [pc, #232]	; (80061ec <HAL_RCC_OscConfig+0x4ac>)
 8006102:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006106:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	699b      	ldr	r3, [r3, #24]
 800610c:	2b00      	cmp	r3, #0
 800610e:	f000 80ad 	beq.w	800626c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006112:	4b36      	ldr	r3, [pc, #216]	; (80061ec <HAL_RCC_OscConfig+0x4ac>)
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f003 030c 	and.w	r3, r3, #12
 800611a:	2b08      	cmp	r3, #8
 800611c:	d060      	beq.n	80061e0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	2b02      	cmp	r3, #2
 8006124:	d145      	bne.n	80061b2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006126:	4b33      	ldr	r3, [pc, #204]	; (80061f4 <HAL_RCC_OscConfig+0x4b4>)
 8006128:	2200      	movs	r2, #0
 800612a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800612c:	f7fb fd3c 	bl	8001ba8 <HAL_GetTick>
 8006130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006132:	e008      	b.n	8006146 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006134:	f7fb fd38 	bl	8001ba8 <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	2b02      	cmp	r3, #2
 8006140:	d901      	bls.n	8006146 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e093      	b.n	800626e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006146:	4b29      	ldr	r3, [pc, #164]	; (80061ec <HAL_RCC_OscConfig+0x4ac>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1f0      	bne.n	8006134 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	69da      	ldr	r2, [r3, #28]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	431a      	orrs	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006160:	019b      	lsls	r3, r3, #6
 8006162:	431a      	orrs	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006168:	085b      	lsrs	r3, r3, #1
 800616a:	3b01      	subs	r3, #1
 800616c:	041b      	lsls	r3, r3, #16
 800616e:	431a      	orrs	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006174:	061b      	lsls	r3, r3, #24
 8006176:	431a      	orrs	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617c:	071b      	lsls	r3, r3, #28
 800617e:	491b      	ldr	r1, [pc, #108]	; (80061ec <HAL_RCC_OscConfig+0x4ac>)
 8006180:	4313      	orrs	r3, r2
 8006182:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006184:	4b1b      	ldr	r3, [pc, #108]	; (80061f4 <HAL_RCC_OscConfig+0x4b4>)
 8006186:	2201      	movs	r2, #1
 8006188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800618a:	f7fb fd0d 	bl	8001ba8 <HAL_GetTick>
 800618e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006190:	e008      	b.n	80061a4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006192:	f7fb fd09 	bl	8001ba8 <HAL_GetTick>
 8006196:	4602      	mov	r2, r0
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	2b02      	cmp	r3, #2
 800619e:	d901      	bls.n	80061a4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e064      	b.n	800626e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061a4:	4b11      	ldr	r3, [pc, #68]	; (80061ec <HAL_RCC_OscConfig+0x4ac>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d0f0      	beq.n	8006192 <HAL_RCC_OscConfig+0x452>
 80061b0:	e05c      	b.n	800626c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061b2:	4b10      	ldr	r3, [pc, #64]	; (80061f4 <HAL_RCC_OscConfig+0x4b4>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b8:	f7fb fcf6 	bl	8001ba8 <HAL_GetTick>
 80061bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061be:	e008      	b.n	80061d2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061c0:	f7fb fcf2 	bl	8001ba8 <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d901      	bls.n	80061d2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e04d      	b.n	800626e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061d2:	4b06      	ldr	r3, [pc, #24]	; (80061ec <HAL_RCC_OscConfig+0x4ac>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1f0      	bne.n	80061c0 <HAL_RCC_OscConfig+0x480>
 80061de:	e045      	b.n	800626c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	699b      	ldr	r3, [r3, #24]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d107      	bne.n	80061f8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e040      	b.n	800626e <HAL_RCC_OscConfig+0x52e>
 80061ec:	40023800 	.word	0x40023800
 80061f0:	40007000 	.word	0x40007000
 80061f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80061f8:	4b1f      	ldr	r3, [pc, #124]	; (8006278 <HAL_RCC_OscConfig+0x538>)
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d030      	beq.n	8006268 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006210:	429a      	cmp	r2, r3
 8006212:	d129      	bne.n	8006268 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800621e:	429a      	cmp	r2, r3
 8006220:	d122      	bne.n	8006268 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006228:	4013      	ands	r3, r2
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800622e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006230:	4293      	cmp	r3, r2
 8006232:	d119      	bne.n	8006268 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623e:	085b      	lsrs	r3, r3, #1
 8006240:	3b01      	subs	r3, #1
 8006242:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006244:	429a      	cmp	r2, r3
 8006246:	d10f      	bne.n	8006268 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006252:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006254:	429a      	cmp	r2, r3
 8006256:	d107      	bne.n	8006268 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006262:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006264:	429a      	cmp	r2, r3
 8006266:	d001      	beq.n	800626c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e000      	b.n	800626e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3718      	adds	r7, #24
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	40023800 	.word	0x40023800

0800627c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d101      	bne.n	800628e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e07b      	b.n	8006386 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006292:	2b00      	cmp	r3, #0
 8006294:	d108      	bne.n	80062a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800629e:	d009      	beq.n	80062b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	61da      	str	r2, [r3, #28]
 80062a6:	e005      	b.n	80062b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d106      	bne.n	80062d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f7fb fa70 	bl	80017b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2202      	movs	r2, #2
 80062d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80062fc:	431a      	orrs	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006306:	431a      	orrs	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	f003 0302 	and.w	r3, r3, #2
 8006310:	431a      	orrs	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	431a      	orrs	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006324:	431a      	orrs	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800632e:	431a      	orrs	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a1b      	ldr	r3, [r3, #32]
 8006334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006338:	ea42 0103 	orr.w	r1, r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006340:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	430a      	orrs	r2, r1
 800634a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	0c1b      	lsrs	r3, r3, #16
 8006352:	f003 0104 	and.w	r1, r3, #4
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635a:	f003 0210 	and.w	r2, r3, #16
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	430a      	orrs	r2, r1
 8006364:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	69da      	ldr	r2, [r3, #28]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006374:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3708      	adds	r7, #8
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800638e:	b580      	push	{r7, lr}
 8006390:	b088      	sub	sp, #32
 8006392:	af00      	add	r7, sp, #0
 8006394:	60f8      	str	r0, [r7, #12]
 8006396:	60b9      	str	r1, [r7, #8]
 8006398:	603b      	str	r3, [r7, #0]
 800639a:	4613      	mov	r3, r2
 800639c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800639e:	2300      	movs	r3, #0
 80063a0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d101      	bne.n	80063b0 <HAL_SPI_Transmit+0x22>
 80063ac:	2302      	movs	r3, #2
 80063ae:	e126      	b.n	80065fe <HAL_SPI_Transmit+0x270>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063b8:	f7fb fbf6 	bl	8001ba8 <HAL_GetTick>
 80063bc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80063be:	88fb      	ldrh	r3, [r7, #6]
 80063c0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d002      	beq.n	80063d4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80063ce:	2302      	movs	r3, #2
 80063d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063d2:	e10b      	b.n	80065ec <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d002      	beq.n	80063e0 <HAL_SPI_Transmit+0x52>
 80063da:	88fb      	ldrh	r3, [r7, #6]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d102      	bne.n	80063e6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063e4:	e102      	b.n	80065ec <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2203      	movs	r2, #3
 80063ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	88fa      	ldrh	r2, [r7, #6]
 80063fe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	88fa      	ldrh	r2, [r7, #6]
 8006404:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2200      	movs	r2, #0
 8006410:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800642c:	d10f      	bne.n	800644e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800643c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800644c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006458:	2b40      	cmp	r3, #64	; 0x40
 800645a:	d007      	beq.n	800646c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800646a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006474:	d14b      	bne.n	800650e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d002      	beq.n	8006484 <HAL_SPI_Transmit+0xf6>
 800647e:	8afb      	ldrh	r3, [r7, #22]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d13e      	bne.n	8006502 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006488:	881a      	ldrh	r2, [r3, #0]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006494:	1c9a      	adds	r2, r3, #2
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800649e:	b29b      	uxth	r3, r3
 80064a0:	3b01      	subs	r3, #1
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80064a8:	e02b      	b.n	8006502 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f003 0302 	and.w	r3, r3, #2
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d112      	bne.n	80064de <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064bc:	881a      	ldrh	r2, [r3, #0]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c8:	1c9a      	adds	r2, r3, #2
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	3b01      	subs	r3, #1
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	86da      	strh	r2, [r3, #54]	; 0x36
 80064dc:	e011      	b.n	8006502 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064de:	f7fb fb63 	bl	8001ba8 <HAL_GetTick>
 80064e2:	4602      	mov	r2, r0
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	683a      	ldr	r2, [r7, #0]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d803      	bhi.n	80064f6 <HAL_SPI_Transmit+0x168>
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f4:	d102      	bne.n	80064fc <HAL_SPI_Transmit+0x16e>
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d102      	bne.n	8006502 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80064fc:	2303      	movs	r3, #3
 80064fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006500:	e074      	b.n	80065ec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006506:	b29b      	uxth	r3, r3
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1ce      	bne.n	80064aa <HAL_SPI_Transmit+0x11c>
 800650c:	e04c      	b.n	80065a8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d002      	beq.n	800651c <HAL_SPI_Transmit+0x18e>
 8006516:	8afb      	ldrh	r3, [r7, #22]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d140      	bne.n	800659e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	330c      	adds	r3, #12
 8006526:	7812      	ldrb	r2, [r2, #0]
 8006528:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652e:	1c5a      	adds	r2, r3, #1
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006538:	b29b      	uxth	r3, r3
 800653a:	3b01      	subs	r3, #1
 800653c:	b29a      	uxth	r2, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006542:	e02c      	b.n	800659e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f003 0302 	and.w	r3, r3, #2
 800654e:	2b02      	cmp	r3, #2
 8006550:	d113      	bne.n	800657a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	330c      	adds	r3, #12
 800655c:	7812      	ldrb	r2, [r2, #0]
 800655e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006564:	1c5a      	adds	r2, r3, #1
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800656e:	b29b      	uxth	r3, r3
 8006570:	3b01      	subs	r3, #1
 8006572:	b29a      	uxth	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	86da      	strh	r2, [r3, #54]	; 0x36
 8006578:	e011      	b.n	800659e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800657a:	f7fb fb15 	bl	8001ba8 <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	683a      	ldr	r2, [r7, #0]
 8006586:	429a      	cmp	r2, r3
 8006588:	d803      	bhi.n	8006592 <HAL_SPI_Transmit+0x204>
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006590:	d102      	bne.n	8006598 <HAL_SPI_Transmit+0x20a>
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d102      	bne.n	800659e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006598:	2303      	movs	r3, #3
 800659a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800659c:	e026      	b.n	80065ec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1cd      	bne.n	8006544 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065a8:	69ba      	ldr	r2, [r7, #24]
 80065aa:	6839      	ldr	r1, [r7, #0]
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	f000 f8b3 	bl	8006718 <SPI_EndRxTxTransaction>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d002      	beq.n	80065be <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2220      	movs	r2, #32
 80065bc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10a      	bne.n	80065dc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065c6:	2300      	movs	r3, #0
 80065c8:	613b      	str	r3, [r7, #16]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	613b      	str	r3, [r7, #16]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	613b      	str	r3, [r7, #16]
 80065da:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d002      	beq.n	80065ea <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	77fb      	strb	r3, [r7, #31]
 80065e8:	e000      	b.n	80065ec <HAL_SPI_Transmit+0x25e>
  }

error:
 80065ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80065fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3720      	adds	r7, #32
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
	...

08006608 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b088      	sub	sp, #32
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	603b      	str	r3, [r7, #0]
 8006614:	4613      	mov	r3, r2
 8006616:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006618:	f7fb fac6 	bl	8001ba8 <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006620:	1a9b      	subs	r3, r3, r2
 8006622:	683a      	ldr	r2, [r7, #0]
 8006624:	4413      	add	r3, r2
 8006626:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006628:	f7fb fabe 	bl	8001ba8 <HAL_GetTick>
 800662c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800662e:	4b39      	ldr	r3, [pc, #228]	; (8006714 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	015b      	lsls	r3, r3, #5
 8006634:	0d1b      	lsrs	r3, r3, #20
 8006636:	69fa      	ldr	r2, [r7, #28]
 8006638:	fb02 f303 	mul.w	r3, r2, r3
 800663c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800663e:	e054      	b.n	80066ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006646:	d050      	beq.n	80066ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006648:	f7fb faae 	bl	8001ba8 <HAL_GetTick>
 800664c:	4602      	mov	r2, r0
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	1ad3      	subs	r3, r2, r3
 8006652:	69fa      	ldr	r2, [r7, #28]
 8006654:	429a      	cmp	r2, r3
 8006656:	d902      	bls.n	800665e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d13d      	bne.n	80066da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	685a      	ldr	r2, [r3, #4]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800666c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006676:	d111      	bne.n	800669c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006680:	d004      	beq.n	800668c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800668a:	d107      	bne.n	800669c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800669a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066a4:	d10f      	bne.n	80066c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066b4:	601a      	str	r2, [r3, #0]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80066d6:	2303      	movs	r3, #3
 80066d8:	e017      	b.n	800670a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d101      	bne.n	80066e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80066e0:	2300      	movs	r3, #0
 80066e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	3b01      	subs	r3, #1
 80066e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	689a      	ldr	r2, [r3, #8]
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	4013      	ands	r3, r2
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	bf0c      	ite	eq
 80066fa:	2301      	moveq	r3, #1
 80066fc:	2300      	movne	r3, #0
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	461a      	mov	r2, r3
 8006702:	79fb      	ldrb	r3, [r7, #7]
 8006704:	429a      	cmp	r2, r3
 8006706:	d19b      	bne.n	8006640 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3720      	adds	r7, #32
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	20000008 	.word	0x20000008

08006718 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b088      	sub	sp, #32
 800671c:	af02      	add	r7, sp, #8
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006724:	4b1b      	ldr	r3, [pc, #108]	; (8006794 <SPI_EndRxTxTransaction+0x7c>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a1b      	ldr	r2, [pc, #108]	; (8006798 <SPI_EndRxTxTransaction+0x80>)
 800672a:	fba2 2303 	umull	r2, r3, r2, r3
 800672e:	0d5b      	lsrs	r3, r3, #21
 8006730:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006734:	fb02 f303 	mul.w	r3, r2, r3
 8006738:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006742:	d112      	bne.n	800676a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	9300      	str	r3, [sp, #0]
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	2200      	movs	r2, #0
 800674c:	2180      	movs	r1, #128	; 0x80
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f7ff ff5a 	bl	8006608 <SPI_WaitFlagStateUntilTimeout>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d016      	beq.n	8006788 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800675e:	f043 0220 	orr.w	r2, r3, #32
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006766:	2303      	movs	r3, #3
 8006768:	e00f      	b.n	800678a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00a      	beq.n	8006786 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	3b01      	subs	r3, #1
 8006774:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006780:	2b80      	cmp	r3, #128	; 0x80
 8006782:	d0f2      	beq.n	800676a <SPI_EndRxTxTransaction+0x52>
 8006784:	e000      	b.n	8006788 <SPI_EndRxTxTransaction+0x70>
        break;
 8006786:	bf00      	nop
  }

  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3718      	adds	r7, #24
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	20000008 	.word	0x20000008
 8006798:	165e9f81 	.word	0x165e9f81

0800679c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d101      	bne.n	80067ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e041      	b.n	8006832 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d106      	bne.n	80067c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f839 	bl	800683a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2202      	movs	r2, #2
 80067cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	3304      	adds	r3, #4
 80067d8:	4619      	mov	r1, r3
 80067da:	4610      	mov	r0, r2
 80067dc:	f000 f9d8 	bl	8006b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3708      	adds	r7, #8
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800683a:	b480      	push	{r7}
 800683c:	b083      	sub	sp, #12
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006842:	bf00      	nop
 8006844:	370c      	adds	r7, #12
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
	...

08006850 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800685e:	b2db      	uxtb	r3, r3
 8006860:	2b01      	cmp	r3, #1
 8006862:	d001      	beq.n	8006868 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e04e      	b.n	8006906 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2202      	movs	r2, #2
 800686c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68da      	ldr	r2, [r3, #12]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f042 0201 	orr.w	r2, r2, #1
 800687e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a23      	ldr	r2, [pc, #140]	; (8006914 <HAL_TIM_Base_Start_IT+0xc4>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d022      	beq.n	80068d0 <HAL_TIM_Base_Start_IT+0x80>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006892:	d01d      	beq.n	80068d0 <HAL_TIM_Base_Start_IT+0x80>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a1f      	ldr	r2, [pc, #124]	; (8006918 <HAL_TIM_Base_Start_IT+0xc8>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d018      	beq.n	80068d0 <HAL_TIM_Base_Start_IT+0x80>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a1e      	ldr	r2, [pc, #120]	; (800691c <HAL_TIM_Base_Start_IT+0xcc>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d013      	beq.n	80068d0 <HAL_TIM_Base_Start_IT+0x80>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a1c      	ldr	r2, [pc, #112]	; (8006920 <HAL_TIM_Base_Start_IT+0xd0>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d00e      	beq.n	80068d0 <HAL_TIM_Base_Start_IT+0x80>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a1b      	ldr	r2, [pc, #108]	; (8006924 <HAL_TIM_Base_Start_IT+0xd4>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d009      	beq.n	80068d0 <HAL_TIM_Base_Start_IT+0x80>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a19      	ldr	r2, [pc, #100]	; (8006928 <HAL_TIM_Base_Start_IT+0xd8>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d004      	beq.n	80068d0 <HAL_TIM_Base_Start_IT+0x80>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a18      	ldr	r2, [pc, #96]	; (800692c <HAL_TIM_Base_Start_IT+0xdc>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d111      	bne.n	80068f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	f003 0307 	and.w	r3, r3, #7
 80068da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2b06      	cmp	r3, #6
 80068e0:	d010      	beq.n	8006904 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f042 0201 	orr.w	r2, r2, #1
 80068f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068f2:	e007      	b.n	8006904 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f042 0201 	orr.w	r2, r2, #1
 8006902:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3714      	adds	r7, #20
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	40010000 	.word	0x40010000
 8006918:	40000400 	.word	0x40000400
 800691c:	40000800 	.word	0x40000800
 8006920:	40000c00 	.word	0x40000c00
 8006924:	40010400 	.word	0x40010400
 8006928:	40014000 	.word	0x40014000
 800692c:	40001800 	.word	0x40001800

08006930 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	f003 0302 	and.w	r3, r3, #2
 8006942:	2b02      	cmp	r3, #2
 8006944:	d122      	bne.n	800698c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	f003 0302 	and.w	r3, r3, #2
 8006950:	2b02      	cmp	r3, #2
 8006952:	d11b      	bne.n	800698c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f06f 0202 	mvn.w	r2, #2
 800695c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2201      	movs	r2, #1
 8006962:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	699b      	ldr	r3, [r3, #24]
 800696a:	f003 0303 	and.w	r3, r3, #3
 800696e:	2b00      	cmp	r3, #0
 8006970:	d003      	beq.n	800697a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 f8ee 	bl	8006b54 <HAL_TIM_IC_CaptureCallback>
 8006978:	e005      	b.n	8006986 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 f8e0 	bl	8006b40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 f8f1 	bl	8006b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	f003 0304 	and.w	r3, r3, #4
 8006996:	2b04      	cmp	r3, #4
 8006998:	d122      	bne.n	80069e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	f003 0304 	and.w	r3, r3, #4
 80069a4:	2b04      	cmp	r3, #4
 80069a6:	d11b      	bne.n	80069e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f06f 0204 	mvn.w	r2, #4
 80069b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2202      	movs	r2, #2
 80069b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d003      	beq.n	80069ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f8c4 	bl	8006b54 <HAL_TIM_IC_CaptureCallback>
 80069cc:	e005      	b.n	80069da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 f8b6 	bl	8006b40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 f8c7 	bl	8006b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	f003 0308 	and.w	r3, r3, #8
 80069ea:	2b08      	cmp	r3, #8
 80069ec:	d122      	bne.n	8006a34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	f003 0308 	and.w	r3, r3, #8
 80069f8:	2b08      	cmp	r3, #8
 80069fa:	d11b      	bne.n	8006a34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f06f 0208 	mvn.w	r2, #8
 8006a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2204      	movs	r2, #4
 8006a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	69db      	ldr	r3, [r3, #28]
 8006a12:	f003 0303 	and.w	r3, r3, #3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d003      	beq.n	8006a22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 f89a 	bl	8006b54 <HAL_TIM_IC_CaptureCallback>
 8006a20:	e005      	b.n	8006a2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f88c 	bl	8006b40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 f89d 	bl	8006b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	f003 0310 	and.w	r3, r3, #16
 8006a3e:	2b10      	cmp	r3, #16
 8006a40:	d122      	bne.n	8006a88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	f003 0310 	and.w	r3, r3, #16
 8006a4c:	2b10      	cmp	r3, #16
 8006a4e:	d11b      	bne.n	8006a88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f06f 0210 	mvn.w	r2, #16
 8006a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2208      	movs	r2, #8
 8006a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	69db      	ldr	r3, [r3, #28]
 8006a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d003      	beq.n	8006a76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f870 	bl	8006b54 <HAL_TIM_IC_CaptureCallback>
 8006a74:	e005      	b.n	8006a82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f862 	bl	8006b40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 f873 	bl	8006b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	f003 0301 	and.w	r3, r3, #1
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d10e      	bne.n	8006ab4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	f003 0301 	and.w	r3, r3, #1
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d107      	bne.n	8006ab4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f06f 0201 	mvn.w	r2, #1
 8006aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f7fa fe3c 	bl	800172c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006abe:	2b80      	cmp	r3, #128	; 0x80
 8006ac0:	d10e      	bne.n	8006ae0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006acc:	2b80      	cmp	r3, #128	; 0x80
 8006ace:	d107      	bne.n	8006ae0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 f902 	bl	8006ce4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aea:	2b40      	cmp	r3, #64	; 0x40
 8006aec:	d10e      	bne.n	8006b0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af8:	2b40      	cmp	r3, #64	; 0x40
 8006afa:	d107      	bne.n	8006b0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 f838 	bl	8006b7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	f003 0320 	and.w	r3, r3, #32
 8006b16:	2b20      	cmp	r3, #32
 8006b18:	d10e      	bne.n	8006b38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	f003 0320 	and.w	r3, r3, #32
 8006b24:	2b20      	cmp	r3, #32
 8006b26:	d107      	bne.n	8006b38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f06f 0220 	mvn.w	r2, #32
 8006b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f8cc 	bl	8006cd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b38:	bf00      	nop
 8006b3a:	3708      	adds	r7, #8
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b48:	bf00      	nop
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b70:	bf00      	nop
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b84:	bf00      	nop
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a40      	ldr	r2, [pc, #256]	; (8006ca4 <TIM_Base_SetConfig+0x114>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d013      	beq.n	8006bd0 <TIM_Base_SetConfig+0x40>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bae:	d00f      	beq.n	8006bd0 <TIM_Base_SetConfig+0x40>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a3d      	ldr	r2, [pc, #244]	; (8006ca8 <TIM_Base_SetConfig+0x118>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d00b      	beq.n	8006bd0 <TIM_Base_SetConfig+0x40>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a3c      	ldr	r2, [pc, #240]	; (8006cac <TIM_Base_SetConfig+0x11c>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d007      	beq.n	8006bd0 <TIM_Base_SetConfig+0x40>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a3b      	ldr	r2, [pc, #236]	; (8006cb0 <TIM_Base_SetConfig+0x120>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d003      	beq.n	8006bd0 <TIM_Base_SetConfig+0x40>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a3a      	ldr	r2, [pc, #232]	; (8006cb4 <TIM_Base_SetConfig+0x124>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d108      	bne.n	8006be2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a2f      	ldr	r2, [pc, #188]	; (8006ca4 <TIM_Base_SetConfig+0x114>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d02b      	beq.n	8006c42 <TIM_Base_SetConfig+0xb2>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bf0:	d027      	beq.n	8006c42 <TIM_Base_SetConfig+0xb2>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a2c      	ldr	r2, [pc, #176]	; (8006ca8 <TIM_Base_SetConfig+0x118>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d023      	beq.n	8006c42 <TIM_Base_SetConfig+0xb2>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a2b      	ldr	r2, [pc, #172]	; (8006cac <TIM_Base_SetConfig+0x11c>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d01f      	beq.n	8006c42 <TIM_Base_SetConfig+0xb2>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a2a      	ldr	r2, [pc, #168]	; (8006cb0 <TIM_Base_SetConfig+0x120>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d01b      	beq.n	8006c42 <TIM_Base_SetConfig+0xb2>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a29      	ldr	r2, [pc, #164]	; (8006cb4 <TIM_Base_SetConfig+0x124>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d017      	beq.n	8006c42 <TIM_Base_SetConfig+0xb2>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a28      	ldr	r2, [pc, #160]	; (8006cb8 <TIM_Base_SetConfig+0x128>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d013      	beq.n	8006c42 <TIM_Base_SetConfig+0xb2>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a27      	ldr	r2, [pc, #156]	; (8006cbc <TIM_Base_SetConfig+0x12c>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d00f      	beq.n	8006c42 <TIM_Base_SetConfig+0xb2>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a26      	ldr	r2, [pc, #152]	; (8006cc0 <TIM_Base_SetConfig+0x130>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d00b      	beq.n	8006c42 <TIM_Base_SetConfig+0xb2>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a25      	ldr	r2, [pc, #148]	; (8006cc4 <TIM_Base_SetConfig+0x134>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d007      	beq.n	8006c42 <TIM_Base_SetConfig+0xb2>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a24      	ldr	r2, [pc, #144]	; (8006cc8 <TIM_Base_SetConfig+0x138>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d003      	beq.n	8006c42 <TIM_Base_SetConfig+0xb2>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a23      	ldr	r2, [pc, #140]	; (8006ccc <TIM_Base_SetConfig+0x13c>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d108      	bne.n	8006c54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	695b      	ldr	r3, [r3, #20]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	689a      	ldr	r2, [r3, #8]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a0a      	ldr	r2, [pc, #40]	; (8006ca4 <TIM_Base_SetConfig+0x114>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d003      	beq.n	8006c88 <TIM_Base_SetConfig+0xf8>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a0c      	ldr	r2, [pc, #48]	; (8006cb4 <TIM_Base_SetConfig+0x124>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d103      	bne.n	8006c90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	691a      	ldr	r2, [r3, #16]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	615a      	str	r2, [r3, #20]
}
 8006c96:	bf00      	nop
 8006c98:	3714      	adds	r7, #20
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	40010000 	.word	0x40010000
 8006ca8:	40000400 	.word	0x40000400
 8006cac:	40000800 	.word	0x40000800
 8006cb0:	40000c00 	.word	0x40000c00
 8006cb4:	40010400 	.word	0x40010400
 8006cb8:	40014000 	.word	0x40014000
 8006cbc:	40014400 	.word	0x40014400
 8006cc0:	40014800 	.word	0x40014800
 8006cc4:	40001800 	.word	0x40001800
 8006cc8:	40001c00 	.word	0x40001c00
 8006ccc:	40002000 	.word	0x40002000

08006cd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006cd8:	bf00      	nop
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006cec:	bf00      	nop
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d101      	bne.n	8006d0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e03f      	b.n	8006d8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d106      	bne.n	8006d24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f7fa fd90 	bl	8001844 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2224      	movs	r2, #36	; 0x24
 8006d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68da      	ldr	r2, [r3, #12]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 fc7b 	bl	8007638 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	691a      	ldr	r2, [r3, #16]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	695a      	ldr	r2, [r3, #20]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68da      	ldr	r2, [r3, #12]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2220      	movs	r2, #32
 8006d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2220      	movs	r2, #32
 8006d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3708      	adds	r7, #8
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
	...

08006d94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b0ba      	sub	sp, #232	; 0xe8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	695b      	ldr	r3, [r3, #20]
 8006db6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dca:	f003 030f 	and.w	r3, r3, #15
 8006dce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006dd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d10f      	bne.n	8006dfa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dde:	f003 0320 	and.w	r3, r3, #32
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d009      	beq.n	8006dfa <HAL_UART_IRQHandler+0x66>
 8006de6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dea:	f003 0320 	and.w	r3, r3, #32
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d003      	beq.n	8006dfa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 fb65 	bl	80074c2 <UART_Receive_IT>
      return;
 8006df8:	e256      	b.n	80072a8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006dfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	f000 80de 	beq.w	8006fc0 <HAL_UART_IRQHandler+0x22c>
 8006e04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e08:	f003 0301 	and.w	r3, r3, #1
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d106      	bne.n	8006e1e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e14:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	f000 80d1 	beq.w	8006fc0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e22:	f003 0301 	and.w	r3, r3, #1
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00b      	beq.n	8006e42 <HAL_UART_IRQHandler+0xae>
 8006e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d005      	beq.n	8006e42 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3a:	f043 0201 	orr.w	r2, r3, #1
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e46:	f003 0304 	and.w	r3, r3, #4
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d00b      	beq.n	8006e66 <HAL_UART_IRQHandler+0xd2>
 8006e4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d005      	beq.n	8006e66 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5e:	f043 0202 	orr.w	r2, r3, #2
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e6a:	f003 0302 	and.w	r3, r3, #2
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00b      	beq.n	8006e8a <HAL_UART_IRQHandler+0xf6>
 8006e72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e76:	f003 0301 	and.w	r3, r3, #1
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d005      	beq.n	8006e8a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e82:	f043 0204 	orr.w	r2, r3, #4
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e8e:	f003 0308 	and.w	r3, r3, #8
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d011      	beq.n	8006eba <HAL_UART_IRQHandler+0x126>
 8006e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e9a:	f003 0320 	and.w	r3, r3, #32
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d105      	bne.n	8006eae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006ea2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ea6:	f003 0301 	and.w	r3, r3, #1
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d005      	beq.n	8006eba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb2:	f043 0208 	orr.w	r2, r3, #8
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f000 81ed 	beq.w	800729e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ec8:	f003 0320 	and.w	r3, r3, #32
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d008      	beq.n	8006ee2 <HAL_UART_IRQHandler+0x14e>
 8006ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ed4:	f003 0320 	and.w	r3, r3, #32
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d002      	beq.n	8006ee2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 faf0 	bl	80074c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	695b      	ldr	r3, [r3, #20]
 8006ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eec:	2b40      	cmp	r3, #64	; 0x40
 8006eee:	bf0c      	ite	eq
 8006ef0:	2301      	moveq	r3, #1
 8006ef2:	2300      	movne	r3, #0
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efe:	f003 0308 	and.w	r3, r3, #8
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d103      	bne.n	8006f0e <HAL_UART_IRQHandler+0x17a>
 8006f06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d04f      	beq.n	8006fae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 f9f8 	bl	8007304 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	695b      	ldr	r3, [r3, #20]
 8006f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f1e:	2b40      	cmp	r3, #64	; 0x40
 8006f20:	d141      	bne.n	8006fa6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	3314      	adds	r3, #20
 8006f28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f30:	e853 3f00 	ldrex	r3, [r3]
 8006f34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006f38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	3314      	adds	r3, #20
 8006f4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006f4e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006f52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006f5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006f5e:	e841 2300 	strex	r3, r2, [r1]
 8006f62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006f66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d1d9      	bne.n	8006f22 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d013      	beq.n	8006f9e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7a:	4a7d      	ldr	r2, [pc, #500]	; (8007170 <HAL_UART_IRQHandler+0x3dc>)
 8006f7c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7fa ff92 	bl	8001eac <HAL_DMA_Abort_IT>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d016      	beq.n	8006fbc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006f98:	4610      	mov	r0, r2
 8006f9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f9c:	e00e      	b.n	8006fbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 f99a 	bl	80072d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fa4:	e00a      	b.n	8006fbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 f996 	bl	80072d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fac:	e006      	b.n	8006fbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 f992 	bl	80072d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006fba:	e170      	b.n	800729e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fbc:	bf00      	nop
    return;
 8006fbe:	e16e      	b.n	800729e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	f040 814a 	bne.w	800725e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fce:	f003 0310 	and.w	r3, r3, #16
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	f000 8143 	beq.w	800725e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fdc:	f003 0310 	and.w	r3, r3, #16
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f000 813c 	beq.w	800725e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	60bb      	str	r3, [r7, #8]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	60bb      	str	r3, [r7, #8]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	60bb      	str	r3, [r7, #8]
 8006ffa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007006:	2b40      	cmp	r3, #64	; 0x40
 8007008:	f040 80b4 	bne.w	8007174 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007018:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800701c:	2b00      	cmp	r3, #0
 800701e:	f000 8140 	beq.w	80072a2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007026:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800702a:	429a      	cmp	r2, r3
 800702c:	f080 8139 	bcs.w	80072a2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007036:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703c:	69db      	ldr	r3, [r3, #28]
 800703e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007042:	f000 8088 	beq.w	8007156 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	330c      	adds	r3, #12
 800704c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007050:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007054:	e853 3f00 	ldrex	r3, [r3]
 8007058:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800705c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007064:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	330c      	adds	r3, #12
 800706e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007072:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007076:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800707e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007082:	e841 2300 	strex	r3, r2, [r1]
 8007086:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800708a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1d9      	bne.n	8007046 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	3314      	adds	r3, #20
 8007098:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800709c:	e853 3f00 	ldrex	r3, [r3]
 80070a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80070a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070a4:	f023 0301 	bic.w	r3, r3, #1
 80070a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	3314      	adds	r3, #20
 80070b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80070b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80070ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80070be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80070c2:	e841 2300 	strex	r3, r2, [r1]
 80070c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80070c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d1e1      	bne.n	8007092 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	3314      	adds	r3, #20
 80070d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070d8:	e853 3f00 	ldrex	r3, [r3]
 80070dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80070de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	3314      	adds	r3, #20
 80070ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80070f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80070f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80070f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80070fa:	e841 2300 	strex	r3, r2, [r1]
 80070fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007100:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1e3      	bne.n	80070ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2220      	movs	r2, #32
 800710a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	330c      	adds	r3, #12
 800711a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800711e:	e853 3f00 	ldrex	r3, [r3]
 8007122:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007126:	f023 0310 	bic.w	r3, r3, #16
 800712a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	330c      	adds	r3, #12
 8007134:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007138:	65ba      	str	r2, [r7, #88]	; 0x58
 800713a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800713e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007140:	e841 2300 	strex	r3, r2, [r1]
 8007144:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1e3      	bne.n	8007114 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007150:	4618      	mov	r0, r3
 8007152:	f7fa fe3b 	bl	8001dcc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800715e:	b29b      	uxth	r3, r3
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	b29b      	uxth	r3, r3
 8007164:	4619      	mov	r1, r3
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 f8c0 	bl	80072ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800716c:	e099      	b.n	80072a2 <HAL_UART_IRQHandler+0x50e>
 800716e:	bf00      	nop
 8007170:	080073cb 	.word	0x080073cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800717c:	b29b      	uxth	r3, r3
 800717e:	1ad3      	subs	r3, r2, r3
 8007180:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007188:	b29b      	uxth	r3, r3
 800718a:	2b00      	cmp	r3, #0
 800718c:	f000 808b 	beq.w	80072a6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007190:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007194:	2b00      	cmp	r3, #0
 8007196:	f000 8086 	beq.w	80072a6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	330c      	adds	r3, #12
 80071a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a4:	e853 3f00 	ldrex	r3, [r3]
 80071a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	330c      	adds	r3, #12
 80071ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80071be:	647a      	str	r2, [r7, #68]	; 0x44
 80071c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80071c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071c6:	e841 2300 	strex	r3, r2, [r1]
 80071ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80071cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1e3      	bne.n	800719a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	3314      	adds	r3, #20
 80071d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071dc:	e853 3f00 	ldrex	r3, [r3]
 80071e0:	623b      	str	r3, [r7, #32]
   return(result);
 80071e2:	6a3b      	ldr	r3, [r7, #32]
 80071e4:	f023 0301 	bic.w	r3, r3, #1
 80071e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	3314      	adds	r3, #20
 80071f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80071f6:	633a      	str	r2, [r7, #48]	; 0x30
 80071f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071fe:	e841 2300 	strex	r3, r2, [r1]
 8007202:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1e3      	bne.n	80071d2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2220      	movs	r2, #32
 800720e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	330c      	adds	r3, #12
 800721e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	e853 3f00 	ldrex	r3, [r3]
 8007226:	60fb      	str	r3, [r7, #12]
   return(result);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f023 0310 	bic.w	r3, r3, #16
 800722e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	330c      	adds	r3, #12
 8007238:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800723c:	61fa      	str	r2, [r7, #28]
 800723e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007240:	69b9      	ldr	r1, [r7, #24]
 8007242:	69fa      	ldr	r2, [r7, #28]
 8007244:	e841 2300 	strex	r3, r2, [r1]
 8007248:	617b      	str	r3, [r7, #20]
   return(result);
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1e3      	bne.n	8007218 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007250:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007254:	4619      	mov	r1, r3
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 f848 	bl	80072ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800725c:	e023      	b.n	80072a6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800725e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007266:	2b00      	cmp	r3, #0
 8007268:	d009      	beq.n	800727e <HAL_UART_IRQHandler+0x4ea>
 800726a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800726e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007272:	2b00      	cmp	r3, #0
 8007274:	d003      	beq.n	800727e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f8bb 	bl	80073f2 <UART_Transmit_IT>
    return;
 800727c:	e014      	b.n	80072a8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800727e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00e      	beq.n	80072a8 <HAL_UART_IRQHandler+0x514>
 800728a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800728e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007292:	2b00      	cmp	r3, #0
 8007294:	d008      	beq.n	80072a8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 f8fb 	bl	8007492 <UART_EndTransmit_IT>
    return;
 800729c:	e004      	b.n	80072a8 <HAL_UART_IRQHandler+0x514>
    return;
 800729e:	bf00      	nop
 80072a0:	e002      	b.n	80072a8 <HAL_UART_IRQHandler+0x514>
      return;
 80072a2:	bf00      	nop
 80072a4:	e000      	b.n	80072a8 <HAL_UART_IRQHandler+0x514>
      return;
 80072a6:	bf00      	nop
  }
}
 80072a8:	37e8      	adds	r7, #232	; 0xe8
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop

080072b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80072b8:	bf00      	nop
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80072cc:	bf00      	nop
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80072e0:	bf00      	nop
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	460b      	mov	r3, r1
 80072f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80072f8:	bf00      	nop
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007304:	b480      	push	{r7}
 8007306:	b095      	sub	sp, #84	; 0x54
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	330c      	adds	r3, #12
 8007312:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007316:	e853 3f00 	ldrex	r3, [r3]
 800731a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800731c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007322:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	330c      	adds	r3, #12
 800732a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800732c:	643a      	str	r2, [r7, #64]	; 0x40
 800732e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007330:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007332:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007334:	e841 2300 	strex	r3, r2, [r1]
 8007338:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800733a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800733c:	2b00      	cmp	r3, #0
 800733e:	d1e5      	bne.n	800730c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	3314      	adds	r3, #20
 8007346:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007348:	6a3b      	ldr	r3, [r7, #32]
 800734a:	e853 3f00 	ldrex	r3, [r3]
 800734e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	f023 0301 	bic.w	r3, r3, #1
 8007356:	64bb      	str	r3, [r7, #72]	; 0x48
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	3314      	adds	r3, #20
 800735e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007360:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007362:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007364:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007366:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007368:	e841 2300 	strex	r3, r2, [r1]
 800736c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800736e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1e5      	bne.n	8007340 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007378:	2b01      	cmp	r3, #1
 800737a:	d119      	bne.n	80073b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	330c      	adds	r3, #12
 8007382:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	e853 3f00 	ldrex	r3, [r3]
 800738a:	60bb      	str	r3, [r7, #8]
   return(result);
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	f023 0310 	bic.w	r3, r3, #16
 8007392:	647b      	str	r3, [r7, #68]	; 0x44
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	330c      	adds	r3, #12
 800739a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800739c:	61ba      	str	r2, [r7, #24]
 800739e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a0:	6979      	ldr	r1, [r7, #20]
 80073a2:	69ba      	ldr	r2, [r7, #24]
 80073a4:	e841 2300 	strex	r3, r2, [r1]
 80073a8:	613b      	str	r3, [r7, #16]
   return(result);
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d1e5      	bne.n	800737c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2220      	movs	r2, #32
 80073b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80073be:	bf00      	nop
 80073c0:	3754      	adds	r7, #84	; 0x54
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr

080073ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b084      	sub	sp, #16
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2200      	movs	r2, #0
 80073dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2200      	movs	r2, #0
 80073e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f7ff ff77 	bl	80072d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073ea:	bf00      	nop
 80073ec:	3710      	adds	r7, #16
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}

080073f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80073f2:	b480      	push	{r7}
 80073f4:	b085      	sub	sp, #20
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007400:	b2db      	uxtb	r3, r3
 8007402:	2b21      	cmp	r3, #33	; 0x21
 8007404:	d13e      	bne.n	8007484 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800740e:	d114      	bne.n	800743a <UART_Transmit_IT+0x48>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	691b      	ldr	r3, [r3, #16]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d110      	bne.n	800743a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6a1b      	ldr	r3, [r3, #32]
 800741c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	881b      	ldrh	r3, [r3, #0]
 8007422:	461a      	mov	r2, r3
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800742c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a1b      	ldr	r3, [r3, #32]
 8007432:	1c9a      	adds	r2, r3, #2
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	621a      	str	r2, [r3, #32]
 8007438:	e008      	b.n	800744c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a1b      	ldr	r3, [r3, #32]
 800743e:	1c59      	adds	r1, r3, #1
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	6211      	str	r1, [r2, #32]
 8007444:	781a      	ldrb	r2, [r3, #0]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007450:	b29b      	uxth	r3, r3
 8007452:	3b01      	subs	r3, #1
 8007454:	b29b      	uxth	r3, r3
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	4619      	mov	r1, r3
 800745a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800745c:	2b00      	cmp	r3, #0
 800745e:	d10f      	bne.n	8007480 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68da      	ldr	r2, [r3, #12]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800746e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	68da      	ldr	r2, [r3, #12]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800747e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007480:	2300      	movs	r3, #0
 8007482:	e000      	b.n	8007486 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007484:	2302      	movs	r3, #2
  }
}
 8007486:	4618      	mov	r0, r3
 8007488:	3714      	adds	r7, #20
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr

08007492 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007492:	b580      	push	{r7, lr}
 8007494:	b082      	sub	sp, #8
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	68da      	ldr	r2, [r3, #12]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2220      	movs	r2, #32
 80074ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f7ff fefc 	bl	80072b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3708      	adds	r7, #8
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b08c      	sub	sp, #48	; 0x30
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	2b22      	cmp	r3, #34	; 0x22
 80074d4:	f040 80ab 	bne.w	800762e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074e0:	d117      	bne.n	8007512 <UART_Receive_IT+0x50>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d113      	bne.n	8007512 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80074ea:	2300      	movs	r3, #0
 80074ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007500:	b29a      	uxth	r2, r3
 8007502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007504:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800750a:	1c9a      	adds	r2, r3, #2
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	629a      	str	r2, [r3, #40]	; 0x28
 8007510:	e026      	b.n	8007560 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007516:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007518:	2300      	movs	r3, #0
 800751a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007524:	d007      	beq.n	8007536 <UART_Receive_IT+0x74>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d10a      	bne.n	8007544 <UART_Receive_IT+0x82>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d106      	bne.n	8007544 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	b2da      	uxtb	r2, r3
 800753e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007540:	701a      	strb	r2, [r3, #0]
 8007542:	e008      	b.n	8007556 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	b2db      	uxtb	r3, r3
 800754c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007550:	b2da      	uxtb	r2, r3
 8007552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007554:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800755a:	1c5a      	adds	r2, r3, #1
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007564:	b29b      	uxth	r3, r3
 8007566:	3b01      	subs	r3, #1
 8007568:	b29b      	uxth	r3, r3
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	4619      	mov	r1, r3
 800756e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007570:	2b00      	cmp	r3, #0
 8007572:	d15a      	bne.n	800762a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68da      	ldr	r2, [r3, #12]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f022 0220 	bic.w	r2, r2, #32
 8007582:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	68da      	ldr	r2, [r3, #12]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007592:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	695a      	ldr	r2, [r3, #20]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f022 0201 	bic.w	r2, r2, #1
 80075a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2220      	movs	r2, #32
 80075a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d135      	bne.n	8007620 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	330c      	adds	r3, #12
 80075c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	e853 3f00 	ldrex	r3, [r3]
 80075c8:	613b      	str	r3, [r7, #16]
   return(result);
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	f023 0310 	bic.w	r3, r3, #16
 80075d0:	627b      	str	r3, [r7, #36]	; 0x24
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	330c      	adds	r3, #12
 80075d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075da:	623a      	str	r2, [r7, #32]
 80075dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075de:	69f9      	ldr	r1, [r7, #28]
 80075e0:	6a3a      	ldr	r2, [r7, #32]
 80075e2:	e841 2300 	strex	r3, r2, [r1]
 80075e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1e5      	bne.n	80075ba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 0310 	and.w	r3, r3, #16
 80075f8:	2b10      	cmp	r3, #16
 80075fa:	d10a      	bne.n	8007612 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80075fc:	2300      	movs	r3, #0
 80075fe:	60fb      	str	r3, [r7, #12]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	60fb      	str	r3, [r7, #12]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	60fb      	str	r3, [r7, #12]
 8007610:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007616:	4619      	mov	r1, r3
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f7ff fe67 	bl	80072ec <HAL_UARTEx_RxEventCallback>
 800761e:	e002      	b.n	8007626 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f7ff fe4f 	bl	80072c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007626:	2300      	movs	r3, #0
 8007628:	e002      	b.n	8007630 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800762a:	2300      	movs	r3, #0
 800762c:	e000      	b.n	8007630 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800762e:	2302      	movs	r3, #2
  }
}
 8007630:	4618      	mov	r0, r3
 8007632:	3730      	adds	r7, #48	; 0x30
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007638:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800763c:	b0c0      	sub	sp, #256	; 0x100
 800763e:	af00      	add	r7, sp, #0
 8007640:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007654:	68d9      	ldr	r1, [r3, #12]
 8007656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	ea40 0301 	orr.w	r3, r0, r1
 8007660:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007666:	689a      	ldr	r2, [r3, #8]
 8007668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	431a      	orrs	r2, r3
 8007670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007674:	695b      	ldr	r3, [r3, #20]
 8007676:	431a      	orrs	r2, r3
 8007678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800767c:	69db      	ldr	r3, [r3, #28]
 800767e:	4313      	orrs	r3, r2
 8007680:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007690:	f021 010c 	bic.w	r1, r1, #12
 8007694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800769e:	430b      	orrs	r3, r1
 80076a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80076a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	695b      	ldr	r3, [r3, #20]
 80076aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80076ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076b2:	6999      	ldr	r1, [r3, #24]
 80076b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	ea40 0301 	orr.w	r3, r0, r1
 80076be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80076c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	4b8f      	ldr	r3, [pc, #572]	; (8007904 <UART_SetConfig+0x2cc>)
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d005      	beq.n	80076d8 <UART_SetConfig+0xa0>
 80076cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	4b8d      	ldr	r3, [pc, #564]	; (8007908 <UART_SetConfig+0x2d0>)
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d104      	bne.n	80076e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80076d8:	f7fd fd92 	bl	8005200 <HAL_RCC_GetPCLK2Freq>
 80076dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80076e0:	e003      	b.n	80076ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80076e2:	f7fd fd79 	bl	80051d8 <HAL_RCC_GetPCLK1Freq>
 80076e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076ee:	69db      	ldr	r3, [r3, #28]
 80076f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076f4:	f040 810c 	bne.w	8007910 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80076f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076fc:	2200      	movs	r2, #0
 80076fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007702:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007706:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800770a:	4622      	mov	r2, r4
 800770c:	462b      	mov	r3, r5
 800770e:	1891      	adds	r1, r2, r2
 8007710:	65b9      	str	r1, [r7, #88]	; 0x58
 8007712:	415b      	adcs	r3, r3
 8007714:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007716:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800771a:	4621      	mov	r1, r4
 800771c:	eb12 0801 	adds.w	r8, r2, r1
 8007720:	4629      	mov	r1, r5
 8007722:	eb43 0901 	adc.w	r9, r3, r1
 8007726:	f04f 0200 	mov.w	r2, #0
 800772a:	f04f 0300 	mov.w	r3, #0
 800772e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007732:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007736:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800773a:	4690      	mov	r8, r2
 800773c:	4699      	mov	r9, r3
 800773e:	4623      	mov	r3, r4
 8007740:	eb18 0303 	adds.w	r3, r8, r3
 8007744:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007748:	462b      	mov	r3, r5
 800774a:	eb49 0303 	adc.w	r3, r9, r3
 800774e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800775e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007762:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007766:	460b      	mov	r3, r1
 8007768:	18db      	adds	r3, r3, r3
 800776a:	653b      	str	r3, [r7, #80]	; 0x50
 800776c:	4613      	mov	r3, r2
 800776e:	eb42 0303 	adc.w	r3, r2, r3
 8007772:	657b      	str	r3, [r7, #84]	; 0x54
 8007774:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007778:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800777c:	f7f8 fd48 	bl	8000210 <__aeabi_uldivmod>
 8007780:	4602      	mov	r2, r0
 8007782:	460b      	mov	r3, r1
 8007784:	4b61      	ldr	r3, [pc, #388]	; (800790c <UART_SetConfig+0x2d4>)
 8007786:	fba3 2302 	umull	r2, r3, r3, r2
 800778a:	095b      	lsrs	r3, r3, #5
 800778c:	011c      	lsls	r4, r3, #4
 800778e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007792:	2200      	movs	r2, #0
 8007794:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007798:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800779c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80077a0:	4642      	mov	r2, r8
 80077a2:	464b      	mov	r3, r9
 80077a4:	1891      	adds	r1, r2, r2
 80077a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80077a8:	415b      	adcs	r3, r3
 80077aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80077b0:	4641      	mov	r1, r8
 80077b2:	eb12 0a01 	adds.w	sl, r2, r1
 80077b6:	4649      	mov	r1, r9
 80077b8:	eb43 0b01 	adc.w	fp, r3, r1
 80077bc:	f04f 0200 	mov.w	r2, #0
 80077c0:	f04f 0300 	mov.w	r3, #0
 80077c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80077c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80077cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80077d0:	4692      	mov	sl, r2
 80077d2:	469b      	mov	fp, r3
 80077d4:	4643      	mov	r3, r8
 80077d6:	eb1a 0303 	adds.w	r3, sl, r3
 80077da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80077de:	464b      	mov	r3, r9
 80077e0:	eb4b 0303 	adc.w	r3, fp, r3
 80077e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80077e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80077f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80077f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80077fc:	460b      	mov	r3, r1
 80077fe:	18db      	adds	r3, r3, r3
 8007800:	643b      	str	r3, [r7, #64]	; 0x40
 8007802:	4613      	mov	r3, r2
 8007804:	eb42 0303 	adc.w	r3, r2, r3
 8007808:	647b      	str	r3, [r7, #68]	; 0x44
 800780a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800780e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007812:	f7f8 fcfd 	bl	8000210 <__aeabi_uldivmod>
 8007816:	4602      	mov	r2, r0
 8007818:	460b      	mov	r3, r1
 800781a:	4611      	mov	r1, r2
 800781c:	4b3b      	ldr	r3, [pc, #236]	; (800790c <UART_SetConfig+0x2d4>)
 800781e:	fba3 2301 	umull	r2, r3, r3, r1
 8007822:	095b      	lsrs	r3, r3, #5
 8007824:	2264      	movs	r2, #100	; 0x64
 8007826:	fb02 f303 	mul.w	r3, r2, r3
 800782a:	1acb      	subs	r3, r1, r3
 800782c:	00db      	lsls	r3, r3, #3
 800782e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007832:	4b36      	ldr	r3, [pc, #216]	; (800790c <UART_SetConfig+0x2d4>)
 8007834:	fba3 2302 	umull	r2, r3, r3, r2
 8007838:	095b      	lsrs	r3, r3, #5
 800783a:	005b      	lsls	r3, r3, #1
 800783c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007840:	441c      	add	r4, r3
 8007842:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007846:	2200      	movs	r2, #0
 8007848:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800784c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007850:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007854:	4642      	mov	r2, r8
 8007856:	464b      	mov	r3, r9
 8007858:	1891      	adds	r1, r2, r2
 800785a:	63b9      	str	r1, [r7, #56]	; 0x38
 800785c:	415b      	adcs	r3, r3
 800785e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007860:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007864:	4641      	mov	r1, r8
 8007866:	1851      	adds	r1, r2, r1
 8007868:	6339      	str	r1, [r7, #48]	; 0x30
 800786a:	4649      	mov	r1, r9
 800786c:	414b      	adcs	r3, r1
 800786e:	637b      	str	r3, [r7, #52]	; 0x34
 8007870:	f04f 0200 	mov.w	r2, #0
 8007874:	f04f 0300 	mov.w	r3, #0
 8007878:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800787c:	4659      	mov	r1, fp
 800787e:	00cb      	lsls	r3, r1, #3
 8007880:	4651      	mov	r1, sl
 8007882:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007886:	4651      	mov	r1, sl
 8007888:	00ca      	lsls	r2, r1, #3
 800788a:	4610      	mov	r0, r2
 800788c:	4619      	mov	r1, r3
 800788e:	4603      	mov	r3, r0
 8007890:	4642      	mov	r2, r8
 8007892:	189b      	adds	r3, r3, r2
 8007894:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007898:	464b      	mov	r3, r9
 800789a:	460a      	mov	r2, r1
 800789c:	eb42 0303 	adc.w	r3, r2, r3
 80078a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80078b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80078b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80078b8:	460b      	mov	r3, r1
 80078ba:	18db      	adds	r3, r3, r3
 80078bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80078be:	4613      	mov	r3, r2
 80078c0:	eb42 0303 	adc.w	r3, r2, r3
 80078c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80078ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80078ce:	f7f8 fc9f 	bl	8000210 <__aeabi_uldivmod>
 80078d2:	4602      	mov	r2, r0
 80078d4:	460b      	mov	r3, r1
 80078d6:	4b0d      	ldr	r3, [pc, #52]	; (800790c <UART_SetConfig+0x2d4>)
 80078d8:	fba3 1302 	umull	r1, r3, r3, r2
 80078dc:	095b      	lsrs	r3, r3, #5
 80078de:	2164      	movs	r1, #100	; 0x64
 80078e0:	fb01 f303 	mul.w	r3, r1, r3
 80078e4:	1ad3      	subs	r3, r2, r3
 80078e6:	00db      	lsls	r3, r3, #3
 80078e8:	3332      	adds	r3, #50	; 0x32
 80078ea:	4a08      	ldr	r2, [pc, #32]	; (800790c <UART_SetConfig+0x2d4>)
 80078ec:	fba2 2303 	umull	r2, r3, r2, r3
 80078f0:	095b      	lsrs	r3, r3, #5
 80078f2:	f003 0207 	and.w	r2, r3, #7
 80078f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4422      	add	r2, r4
 80078fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007900:	e105      	b.n	8007b0e <UART_SetConfig+0x4d6>
 8007902:	bf00      	nop
 8007904:	40011000 	.word	0x40011000
 8007908:	40011400 	.word	0x40011400
 800790c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007910:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007914:	2200      	movs	r2, #0
 8007916:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800791a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800791e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007922:	4642      	mov	r2, r8
 8007924:	464b      	mov	r3, r9
 8007926:	1891      	adds	r1, r2, r2
 8007928:	6239      	str	r1, [r7, #32]
 800792a:	415b      	adcs	r3, r3
 800792c:	627b      	str	r3, [r7, #36]	; 0x24
 800792e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007932:	4641      	mov	r1, r8
 8007934:	1854      	adds	r4, r2, r1
 8007936:	4649      	mov	r1, r9
 8007938:	eb43 0501 	adc.w	r5, r3, r1
 800793c:	f04f 0200 	mov.w	r2, #0
 8007940:	f04f 0300 	mov.w	r3, #0
 8007944:	00eb      	lsls	r3, r5, #3
 8007946:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800794a:	00e2      	lsls	r2, r4, #3
 800794c:	4614      	mov	r4, r2
 800794e:	461d      	mov	r5, r3
 8007950:	4643      	mov	r3, r8
 8007952:	18e3      	adds	r3, r4, r3
 8007954:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007958:	464b      	mov	r3, r9
 800795a:	eb45 0303 	adc.w	r3, r5, r3
 800795e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800796e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007972:	f04f 0200 	mov.w	r2, #0
 8007976:	f04f 0300 	mov.w	r3, #0
 800797a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800797e:	4629      	mov	r1, r5
 8007980:	008b      	lsls	r3, r1, #2
 8007982:	4621      	mov	r1, r4
 8007984:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007988:	4621      	mov	r1, r4
 800798a:	008a      	lsls	r2, r1, #2
 800798c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007990:	f7f8 fc3e 	bl	8000210 <__aeabi_uldivmod>
 8007994:	4602      	mov	r2, r0
 8007996:	460b      	mov	r3, r1
 8007998:	4b60      	ldr	r3, [pc, #384]	; (8007b1c <UART_SetConfig+0x4e4>)
 800799a:	fba3 2302 	umull	r2, r3, r3, r2
 800799e:	095b      	lsrs	r3, r3, #5
 80079a0:	011c      	lsls	r4, r3, #4
 80079a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079a6:	2200      	movs	r2, #0
 80079a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80079ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80079b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80079b4:	4642      	mov	r2, r8
 80079b6:	464b      	mov	r3, r9
 80079b8:	1891      	adds	r1, r2, r2
 80079ba:	61b9      	str	r1, [r7, #24]
 80079bc:	415b      	adcs	r3, r3
 80079be:	61fb      	str	r3, [r7, #28]
 80079c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80079c4:	4641      	mov	r1, r8
 80079c6:	1851      	adds	r1, r2, r1
 80079c8:	6139      	str	r1, [r7, #16]
 80079ca:	4649      	mov	r1, r9
 80079cc:	414b      	adcs	r3, r1
 80079ce:	617b      	str	r3, [r7, #20]
 80079d0:	f04f 0200 	mov.w	r2, #0
 80079d4:	f04f 0300 	mov.w	r3, #0
 80079d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80079dc:	4659      	mov	r1, fp
 80079de:	00cb      	lsls	r3, r1, #3
 80079e0:	4651      	mov	r1, sl
 80079e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079e6:	4651      	mov	r1, sl
 80079e8:	00ca      	lsls	r2, r1, #3
 80079ea:	4610      	mov	r0, r2
 80079ec:	4619      	mov	r1, r3
 80079ee:	4603      	mov	r3, r0
 80079f0:	4642      	mov	r2, r8
 80079f2:	189b      	adds	r3, r3, r2
 80079f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80079f8:	464b      	mov	r3, r9
 80079fa:	460a      	mov	r2, r1
 80079fc:	eb42 0303 	adc.w	r3, r2, r3
 8007a00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a0e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007a10:	f04f 0200 	mov.w	r2, #0
 8007a14:	f04f 0300 	mov.w	r3, #0
 8007a18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007a1c:	4649      	mov	r1, r9
 8007a1e:	008b      	lsls	r3, r1, #2
 8007a20:	4641      	mov	r1, r8
 8007a22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a26:	4641      	mov	r1, r8
 8007a28:	008a      	lsls	r2, r1, #2
 8007a2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007a2e:	f7f8 fbef 	bl	8000210 <__aeabi_uldivmod>
 8007a32:	4602      	mov	r2, r0
 8007a34:	460b      	mov	r3, r1
 8007a36:	4b39      	ldr	r3, [pc, #228]	; (8007b1c <UART_SetConfig+0x4e4>)
 8007a38:	fba3 1302 	umull	r1, r3, r3, r2
 8007a3c:	095b      	lsrs	r3, r3, #5
 8007a3e:	2164      	movs	r1, #100	; 0x64
 8007a40:	fb01 f303 	mul.w	r3, r1, r3
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	011b      	lsls	r3, r3, #4
 8007a48:	3332      	adds	r3, #50	; 0x32
 8007a4a:	4a34      	ldr	r2, [pc, #208]	; (8007b1c <UART_SetConfig+0x4e4>)
 8007a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a50:	095b      	lsrs	r3, r3, #5
 8007a52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a56:	441c      	add	r4, r3
 8007a58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	673b      	str	r3, [r7, #112]	; 0x70
 8007a60:	677a      	str	r2, [r7, #116]	; 0x74
 8007a62:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007a66:	4642      	mov	r2, r8
 8007a68:	464b      	mov	r3, r9
 8007a6a:	1891      	adds	r1, r2, r2
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	415b      	adcs	r3, r3
 8007a70:	60fb      	str	r3, [r7, #12]
 8007a72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a76:	4641      	mov	r1, r8
 8007a78:	1851      	adds	r1, r2, r1
 8007a7a:	6039      	str	r1, [r7, #0]
 8007a7c:	4649      	mov	r1, r9
 8007a7e:	414b      	adcs	r3, r1
 8007a80:	607b      	str	r3, [r7, #4]
 8007a82:	f04f 0200 	mov.w	r2, #0
 8007a86:	f04f 0300 	mov.w	r3, #0
 8007a8a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007a8e:	4659      	mov	r1, fp
 8007a90:	00cb      	lsls	r3, r1, #3
 8007a92:	4651      	mov	r1, sl
 8007a94:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a98:	4651      	mov	r1, sl
 8007a9a:	00ca      	lsls	r2, r1, #3
 8007a9c:	4610      	mov	r0, r2
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	4642      	mov	r2, r8
 8007aa4:	189b      	adds	r3, r3, r2
 8007aa6:	66bb      	str	r3, [r7, #104]	; 0x68
 8007aa8:	464b      	mov	r3, r9
 8007aaa:	460a      	mov	r2, r1
 8007aac:	eb42 0303 	adc.w	r3, r2, r3
 8007ab0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	663b      	str	r3, [r7, #96]	; 0x60
 8007abc:	667a      	str	r2, [r7, #100]	; 0x64
 8007abe:	f04f 0200 	mov.w	r2, #0
 8007ac2:	f04f 0300 	mov.w	r3, #0
 8007ac6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007aca:	4649      	mov	r1, r9
 8007acc:	008b      	lsls	r3, r1, #2
 8007ace:	4641      	mov	r1, r8
 8007ad0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ad4:	4641      	mov	r1, r8
 8007ad6:	008a      	lsls	r2, r1, #2
 8007ad8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007adc:	f7f8 fb98 	bl	8000210 <__aeabi_uldivmod>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	4b0d      	ldr	r3, [pc, #52]	; (8007b1c <UART_SetConfig+0x4e4>)
 8007ae6:	fba3 1302 	umull	r1, r3, r3, r2
 8007aea:	095b      	lsrs	r3, r3, #5
 8007aec:	2164      	movs	r1, #100	; 0x64
 8007aee:	fb01 f303 	mul.w	r3, r1, r3
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	011b      	lsls	r3, r3, #4
 8007af6:	3332      	adds	r3, #50	; 0x32
 8007af8:	4a08      	ldr	r2, [pc, #32]	; (8007b1c <UART_SetConfig+0x4e4>)
 8007afa:	fba2 2303 	umull	r2, r3, r2, r3
 8007afe:	095b      	lsrs	r3, r3, #5
 8007b00:	f003 020f 	and.w	r2, r3, #15
 8007b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4422      	add	r2, r4
 8007b0c:	609a      	str	r2, [r3, #8]
}
 8007b0e:	bf00      	nop
 8007b10:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007b14:	46bd      	mov	sp, r7
 8007b16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b1a:	bf00      	nop
 8007b1c:	51eb851f 	.word	0x51eb851f

08007b20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b20:	b084      	sub	sp, #16
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b084      	sub	sp, #16
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
 8007b2a:	f107 001c 	add.w	r0, r7, #28
 8007b2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d122      	bne.n	8007b7e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d105      	bne.n	8007b72 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f001 fbe8 	bl	8009348 <USB_CoreReset>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	73fb      	strb	r3, [r7, #15]
 8007b7c:	e01a      	b.n	8007bb4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f001 fbdc 	bl	8009348 <USB_CoreReset>
 8007b90:	4603      	mov	r3, r0
 8007b92:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d106      	bne.n	8007ba8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	639a      	str	r2, [r3, #56]	; 0x38
 8007ba6:	e005      	b.n	8007bb4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d10b      	bne.n	8007bd2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	f043 0206 	orr.w	r2, r3, #6
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	f043 0220 	orr.w	r2, r3, #32
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3710      	adds	r7, #16
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007bde:	b004      	add	sp, #16
 8007be0:	4770      	bx	lr
	...

08007be4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b087      	sub	sp, #28
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007bf2:	79fb      	ldrb	r3, [r7, #7]
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d165      	bne.n	8007cc4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	4a41      	ldr	r2, [pc, #260]	; (8007d00 <USB_SetTurnaroundTime+0x11c>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d906      	bls.n	8007c0e <USB_SetTurnaroundTime+0x2a>
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	4a40      	ldr	r2, [pc, #256]	; (8007d04 <USB_SetTurnaroundTime+0x120>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d202      	bcs.n	8007c0e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007c08:	230f      	movs	r3, #15
 8007c0a:	617b      	str	r3, [r7, #20]
 8007c0c:	e062      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	4a3c      	ldr	r2, [pc, #240]	; (8007d04 <USB_SetTurnaroundTime+0x120>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d306      	bcc.n	8007c24 <USB_SetTurnaroundTime+0x40>
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	4a3b      	ldr	r2, [pc, #236]	; (8007d08 <USB_SetTurnaroundTime+0x124>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d202      	bcs.n	8007c24 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007c1e:	230e      	movs	r3, #14
 8007c20:	617b      	str	r3, [r7, #20]
 8007c22:	e057      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	4a38      	ldr	r2, [pc, #224]	; (8007d08 <USB_SetTurnaroundTime+0x124>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d306      	bcc.n	8007c3a <USB_SetTurnaroundTime+0x56>
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	4a37      	ldr	r2, [pc, #220]	; (8007d0c <USB_SetTurnaroundTime+0x128>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d202      	bcs.n	8007c3a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007c34:	230d      	movs	r3, #13
 8007c36:	617b      	str	r3, [r7, #20]
 8007c38:	e04c      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	4a33      	ldr	r2, [pc, #204]	; (8007d0c <USB_SetTurnaroundTime+0x128>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d306      	bcc.n	8007c50 <USB_SetTurnaroundTime+0x6c>
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	4a32      	ldr	r2, [pc, #200]	; (8007d10 <USB_SetTurnaroundTime+0x12c>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d802      	bhi.n	8007c50 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007c4a:	230c      	movs	r3, #12
 8007c4c:	617b      	str	r3, [r7, #20]
 8007c4e:	e041      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	4a2f      	ldr	r2, [pc, #188]	; (8007d10 <USB_SetTurnaroundTime+0x12c>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d906      	bls.n	8007c66 <USB_SetTurnaroundTime+0x82>
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	4a2e      	ldr	r2, [pc, #184]	; (8007d14 <USB_SetTurnaroundTime+0x130>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d802      	bhi.n	8007c66 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007c60:	230b      	movs	r3, #11
 8007c62:	617b      	str	r3, [r7, #20]
 8007c64:	e036      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	4a2a      	ldr	r2, [pc, #168]	; (8007d14 <USB_SetTurnaroundTime+0x130>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d906      	bls.n	8007c7c <USB_SetTurnaroundTime+0x98>
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	4a29      	ldr	r2, [pc, #164]	; (8007d18 <USB_SetTurnaroundTime+0x134>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d802      	bhi.n	8007c7c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007c76:	230a      	movs	r3, #10
 8007c78:	617b      	str	r3, [r7, #20]
 8007c7a:	e02b      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	4a26      	ldr	r2, [pc, #152]	; (8007d18 <USB_SetTurnaroundTime+0x134>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d906      	bls.n	8007c92 <USB_SetTurnaroundTime+0xae>
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	4a25      	ldr	r2, [pc, #148]	; (8007d1c <USB_SetTurnaroundTime+0x138>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d202      	bcs.n	8007c92 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007c8c:	2309      	movs	r3, #9
 8007c8e:	617b      	str	r3, [r7, #20]
 8007c90:	e020      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	4a21      	ldr	r2, [pc, #132]	; (8007d1c <USB_SetTurnaroundTime+0x138>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d306      	bcc.n	8007ca8 <USB_SetTurnaroundTime+0xc4>
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	4a20      	ldr	r2, [pc, #128]	; (8007d20 <USB_SetTurnaroundTime+0x13c>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d802      	bhi.n	8007ca8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007ca2:	2308      	movs	r3, #8
 8007ca4:	617b      	str	r3, [r7, #20]
 8007ca6:	e015      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	4a1d      	ldr	r2, [pc, #116]	; (8007d20 <USB_SetTurnaroundTime+0x13c>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d906      	bls.n	8007cbe <USB_SetTurnaroundTime+0xda>
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	4a1c      	ldr	r2, [pc, #112]	; (8007d24 <USB_SetTurnaroundTime+0x140>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d202      	bcs.n	8007cbe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007cb8:	2307      	movs	r3, #7
 8007cba:	617b      	str	r3, [r7, #20]
 8007cbc:	e00a      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007cbe:	2306      	movs	r3, #6
 8007cc0:	617b      	str	r3, [r7, #20]
 8007cc2:	e007      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007cc4:	79fb      	ldrb	r3, [r7, #7]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d102      	bne.n	8007cd0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007cca:	2309      	movs	r3, #9
 8007ccc:	617b      	str	r3, [r7, #20]
 8007cce:	e001      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007cd0:	2309      	movs	r3, #9
 8007cd2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	68da      	ldr	r2, [r3, #12]
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	029b      	lsls	r3, r3, #10
 8007ce8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007cec:	431a      	orrs	r2, r3
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007cf2:	2300      	movs	r3, #0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	371c      	adds	r7, #28
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr
 8007d00:	00d8acbf 	.word	0x00d8acbf
 8007d04:	00e4e1c0 	.word	0x00e4e1c0
 8007d08:	00f42400 	.word	0x00f42400
 8007d0c:	01067380 	.word	0x01067380
 8007d10:	011a499f 	.word	0x011a499f
 8007d14:	01312cff 	.word	0x01312cff
 8007d18:	014ca43f 	.word	0x014ca43f
 8007d1c:	016e3600 	.word	0x016e3600
 8007d20:	01a6ab1f 	.word	0x01a6ab1f
 8007d24:	01e84800 	.word	0x01e84800

08007d28 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	f043 0201 	orr.w	r2, r3, #1
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	370c      	adds	r7, #12
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr

08007d4a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d4a:	b480      	push	{r7}
 8007d4c:	b083      	sub	sp, #12
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	f023 0201 	bic.w	r2, r3, #1
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	460b      	mov	r3, r1
 8007d76:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007d88:	78fb      	ldrb	r3, [r7, #3]
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d115      	bne.n	8007dba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007d9a:	2001      	movs	r0, #1
 8007d9c:	f7f9 ff10 	bl	8001bc0 <HAL_Delay>
      ms++;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	3301      	adds	r3, #1
 8007da4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f001 fa3f 	bl	800922a <USB_GetMode>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d01e      	beq.n	8007df0 <USB_SetCurrentMode+0x84>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2b31      	cmp	r3, #49	; 0x31
 8007db6:	d9f0      	bls.n	8007d9a <USB_SetCurrentMode+0x2e>
 8007db8:	e01a      	b.n	8007df0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007dba:	78fb      	ldrb	r3, [r7, #3]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d115      	bne.n	8007dec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007dcc:	2001      	movs	r0, #1
 8007dce:	f7f9 fef7 	bl	8001bc0 <HAL_Delay>
      ms++;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f001 fa26 	bl	800922a <USB_GetMode>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d005      	beq.n	8007df0 <USB_SetCurrentMode+0x84>
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2b31      	cmp	r3, #49	; 0x31
 8007de8:	d9f0      	bls.n	8007dcc <USB_SetCurrentMode+0x60>
 8007dea:	e001      	b.n	8007df0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e005      	b.n	8007dfc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2b32      	cmp	r3, #50	; 0x32
 8007df4:	d101      	bne.n	8007dfa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	e000      	b.n	8007dfc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3710      	adds	r7, #16
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e04:	b084      	sub	sp, #16
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b086      	sub	sp, #24
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007e12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007e16:	2300      	movs	r3, #0
 8007e18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007e1e:	2300      	movs	r3, #0
 8007e20:	613b      	str	r3, [r7, #16]
 8007e22:	e009      	b.n	8007e38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	3340      	adds	r3, #64	; 0x40
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	4413      	add	r3, r2
 8007e2e:	2200      	movs	r2, #0
 8007e30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	3301      	adds	r3, #1
 8007e36:	613b      	str	r3, [r7, #16]
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	2b0e      	cmp	r3, #14
 8007e3c:	d9f2      	bls.n	8007e24 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d11c      	bne.n	8007e7e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e52:	f043 0302 	orr.w	r3, r3, #2
 8007e56:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	601a      	str	r2, [r3, #0]
 8007e7c:	e005      	b.n	8007e8a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e82:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e90:	461a      	mov	r2, r3
 8007e92:	2300      	movs	r3, #0
 8007e94:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	680b      	ldr	r3, [r1, #0]
 8007ea8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d10c      	bne.n	8007eca <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d104      	bne.n	8007ec0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 f965 	bl	8008188 <USB_SetDevSpeed>
 8007ebe:	e008      	b.n	8007ed2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007ec0:	2101      	movs	r1, #1
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 f960 	bl	8008188 <USB_SetDevSpeed>
 8007ec8:	e003      	b.n	8007ed2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007eca:	2103      	movs	r1, #3
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 f95b 	bl	8008188 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007ed2:	2110      	movs	r1, #16
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 f8f3 	bl	80080c0 <USB_FlushTxFifo>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d001      	beq.n	8007ee4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 f91f 	bl	8008128 <USB_FlushRxFifo>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d001      	beq.n	8007ef4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007efa:	461a      	mov	r2, r3
 8007efc:	2300      	movs	r3, #0
 8007efe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f06:	461a      	mov	r2, r3
 8007f08:	2300      	movs	r3, #0
 8007f0a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f12:	461a      	mov	r2, r3
 8007f14:	2300      	movs	r3, #0
 8007f16:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f18:	2300      	movs	r3, #0
 8007f1a:	613b      	str	r3, [r7, #16]
 8007f1c:	e043      	b.n	8007fa6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	015a      	lsls	r2, r3, #5
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	4413      	add	r3, r2
 8007f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f34:	d118      	bne.n	8007f68 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d10a      	bne.n	8007f52 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	015a      	lsls	r2, r3, #5
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	4413      	add	r3, r2
 8007f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f48:	461a      	mov	r2, r3
 8007f4a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f4e:	6013      	str	r3, [r2, #0]
 8007f50:	e013      	b.n	8007f7a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	015a      	lsls	r2, r3, #5
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	4413      	add	r3, r2
 8007f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f5e:	461a      	mov	r2, r3
 8007f60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007f64:	6013      	str	r3, [r2, #0]
 8007f66:	e008      	b.n	8007f7a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	015a      	lsls	r2, r3, #5
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	4413      	add	r3, r2
 8007f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f74:	461a      	mov	r2, r3
 8007f76:	2300      	movs	r3, #0
 8007f78:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	015a      	lsls	r2, r3, #5
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	4413      	add	r3, r2
 8007f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f86:	461a      	mov	r2, r3
 8007f88:	2300      	movs	r3, #0
 8007f8a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	015a      	lsls	r2, r3, #5
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	4413      	add	r3, r2
 8007f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f98:	461a      	mov	r2, r3
 8007f9a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f9e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	613b      	str	r3, [r7, #16]
 8007fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d3b7      	bcc.n	8007f1e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fae:	2300      	movs	r3, #0
 8007fb0:	613b      	str	r3, [r7, #16]
 8007fb2:	e043      	b.n	800803c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	015a      	lsls	r2, r3, #5
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	4413      	add	r3, r2
 8007fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fca:	d118      	bne.n	8007ffe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d10a      	bne.n	8007fe8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	015a      	lsls	r2, r3, #5
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	4413      	add	r3, r2
 8007fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fde:	461a      	mov	r2, r3
 8007fe0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007fe4:	6013      	str	r3, [r2, #0]
 8007fe6:	e013      	b.n	8008010 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	015a      	lsls	r2, r3, #5
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	4413      	add	r3, r2
 8007ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007ffa:	6013      	str	r3, [r2, #0]
 8007ffc:	e008      	b.n	8008010 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	015a      	lsls	r2, r3, #5
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	4413      	add	r3, r2
 8008006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800800a:	461a      	mov	r2, r3
 800800c:	2300      	movs	r3, #0
 800800e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	015a      	lsls	r2, r3, #5
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	4413      	add	r3, r2
 8008018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800801c:	461a      	mov	r2, r3
 800801e:	2300      	movs	r3, #0
 8008020:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	015a      	lsls	r2, r3, #5
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	4413      	add	r3, r2
 800802a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800802e:	461a      	mov	r2, r3
 8008030:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008034:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	3301      	adds	r3, #1
 800803a:	613b      	str	r3, [r7, #16]
 800803c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803e:	693a      	ldr	r2, [r7, #16]
 8008040:	429a      	cmp	r2, r3
 8008042:	d3b7      	bcc.n	8007fb4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800804a:	691b      	ldr	r3, [r3, #16]
 800804c:	68fa      	ldr	r2, [r7, #12]
 800804e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008052:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008056:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008064:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008068:	2b00      	cmp	r3, #0
 800806a:	d105      	bne.n	8008078 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	699b      	ldr	r3, [r3, #24]
 8008070:	f043 0210 	orr.w	r2, r3, #16
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	699a      	ldr	r2, [r3, #24]
 800807c:	4b0f      	ldr	r3, [pc, #60]	; (80080bc <USB_DevInit+0x2b8>)
 800807e:	4313      	orrs	r3, r2
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008086:	2b00      	cmp	r3, #0
 8008088:	d005      	beq.n	8008096 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	699b      	ldr	r3, [r3, #24]
 800808e:	f043 0208 	orr.w	r2, r3, #8
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008098:	2b01      	cmp	r3, #1
 800809a:	d107      	bne.n	80080ac <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	699b      	ldr	r3, [r3, #24]
 80080a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80080a4:	f043 0304 	orr.w	r3, r3, #4
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80080ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3718      	adds	r7, #24
 80080b2:	46bd      	mov	sp, r7
 80080b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80080b8:	b004      	add	sp, #16
 80080ba:	4770      	bx	lr
 80080bc:	803c3800 	.word	0x803c3800

080080c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b085      	sub	sp, #20
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80080ca:	2300      	movs	r3, #0
 80080cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	3301      	adds	r3, #1
 80080d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	4a13      	ldr	r2, [pc, #76]	; (8008124 <USB_FlushTxFifo+0x64>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d901      	bls.n	80080e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80080dc:	2303      	movs	r3, #3
 80080de:	e01b      	b.n	8008118 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	691b      	ldr	r3, [r3, #16]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	daf2      	bge.n	80080ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80080e8:	2300      	movs	r3, #0
 80080ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	019b      	lsls	r3, r3, #6
 80080f0:	f043 0220 	orr.w	r2, r3, #32
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	3301      	adds	r3, #1
 80080fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	4a08      	ldr	r2, [pc, #32]	; (8008124 <USB_FlushTxFifo+0x64>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d901      	bls.n	800810a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008106:	2303      	movs	r3, #3
 8008108:	e006      	b.n	8008118 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	691b      	ldr	r3, [r3, #16]
 800810e:	f003 0320 	and.w	r3, r3, #32
 8008112:	2b20      	cmp	r3, #32
 8008114:	d0f0      	beq.n	80080f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008116:	2300      	movs	r3, #0
}
 8008118:	4618      	mov	r0, r3
 800811a:	3714      	adds	r7, #20
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr
 8008124:	00030d40 	.word	0x00030d40

08008128 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008130:	2300      	movs	r3, #0
 8008132:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	3301      	adds	r3, #1
 8008138:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	4a11      	ldr	r2, [pc, #68]	; (8008184 <USB_FlushRxFifo+0x5c>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d901      	bls.n	8008146 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008142:	2303      	movs	r3, #3
 8008144:	e018      	b.n	8008178 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	2b00      	cmp	r3, #0
 800814c:	daf2      	bge.n	8008134 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800814e:	2300      	movs	r3, #0
 8008150:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2210      	movs	r2, #16
 8008156:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	3301      	adds	r3, #1
 800815c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	4a08      	ldr	r2, [pc, #32]	; (8008184 <USB_FlushRxFifo+0x5c>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d901      	bls.n	800816a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008166:	2303      	movs	r3, #3
 8008168:	e006      	b.n	8008178 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	691b      	ldr	r3, [r3, #16]
 800816e:	f003 0310 	and.w	r3, r3, #16
 8008172:	2b10      	cmp	r3, #16
 8008174:	d0f0      	beq.n	8008158 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008176:	2300      	movs	r3, #0
}
 8008178:	4618      	mov	r0, r3
 800817a:	3714      	adds	r7, #20
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr
 8008184:	00030d40 	.word	0x00030d40

08008188 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008188:	b480      	push	{r7}
 800818a:	b085      	sub	sp, #20
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	460b      	mov	r3, r1
 8008192:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	78fb      	ldrb	r3, [r7, #3]
 80081a2:	68f9      	ldr	r1, [r7, #12]
 80081a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081a8:	4313      	orrs	r3, r2
 80081aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3714      	adds	r7, #20
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr

080081ba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80081ba:	b480      	push	{r7}
 80081bc:	b087      	sub	sp, #28
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	f003 0306 	and.w	r3, r3, #6
 80081d2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d102      	bne.n	80081e0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80081da:	2300      	movs	r3, #0
 80081dc:	75fb      	strb	r3, [r7, #23]
 80081de:	e00a      	b.n	80081f6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2b02      	cmp	r3, #2
 80081e4:	d002      	beq.n	80081ec <USB_GetDevSpeed+0x32>
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2b06      	cmp	r3, #6
 80081ea:	d102      	bne.n	80081f2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80081ec:	2302      	movs	r3, #2
 80081ee:	75fb      	strb	r3, [r7, #23]
 80081f0:	e001      	b.n	80081f6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80081f2:	230f      	movs	r3, #15
 80081f4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80081f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	371c      	adds	r7, #28
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	785b      	ldrb	r3, [r3, #1]
 800821c:	2b01      	cmp	r3, #1
 800821e:	d13a      	bne.n	8008296 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008226:	69da      	ldr	r2, [r3, #28]
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	f003 030f 	and.w	r3, r3, #15
 8008230:	2101      	movs	r1, #1
 8008232:	fa01 f303 	lsl.w	r3, r1, r3
 8008236:	b29b      	uxth	r3, r3
 8008238:	68f9      	ldr	r1, [r7, #12]
 800823a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800823e:	4313      	orrs	r3, r2
 8008240:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	015a      	lsls	r2, r3, #5
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	4413      	add	r3, r2
 800824a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008254:	2b00      	cmp	r3, #0
 8008256:	d155      	bne.n	8008304 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	015a      	lsls	r2, r3, #5
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	4413      	add	r3, r2
 8008260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	791b      	ldrb	r3, [r3, #4]
 8008272:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008274:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	059b      	lsls	r3, r3, #22
 800827a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800827c:	4313      	orrs	r3, r2
 800827e:	68ba      	ldr	r2, [r7, #8]
 8008280:	0151      	lsls	r1, r2, #5
 8008282:	68fa      	ldr	r2, [r7, #12]
 8008284:	440a      	add	r2, r1
 8008286:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800828a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800828e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008292:	6013      	str	r3, [r2, #0]
 8008294:	e036      	b.n	8008304 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800829c:	69da      	ldr	r2, [r3, #28]
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	f003 030f 	and.w	r3, r3, #15
 80082a6:	2101      	movs	r1, #1
 80082a8:	fa01 f303 	lsl.w	r3, r1, r3
 80082ac:	041b      	lsls	r3, r3, #16
 80082ae:	68f9      	ldr	r1, [r7, #12]
 80082b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082b4:	4313      	orrs	r3, r2
 80082b6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	015a      	lsls	r2, r3, #5
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	4413      	add	r3, r2
 80082c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d11a      	bne.n	8008304 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	015a      	lsls	r2, r3, #5
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	4413      	add	r3, r2
 80082d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	791b      	ldrb	r3, [r3, #4]
 80082e8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80082ea:	430b      	orrs	r3, r1
 80082ec:	4313      	orrs	r3, r2
 80082ee:	68ba      	ldr	r2, [r7, #8]
 80082f0:	0151      	lsls	r1, r2, #5
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	440a      	add	r2, r1
 80082f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008302:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	3714      	adds	r7, #20
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr
	...

08008314 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008314:	b480      	push	{r7}
 8008316:	b085      	sub	sp, #20
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	785b      	ldrb	r3, [r3, #1]
 800832c:	2b01      	cmp	r3, #1
 800832e:	d161      	bne.n	80083f4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	015a      	lsls	r2, r3, #5
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	4413      	add	r3, r2
 8008338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008342:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008346:	d11f      	bne.n	8008388 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	015a      	lsls	r2, r3, #5
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	4413      	add	r3, r2
 8008350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	68ba      	ldr	r2, [r7, #8]
 8008358:	0151      	lsls	r1, r2, #5
 800835a:	68fa      	ldr	r2, [r7, #12]
 800835c:	440a      	add	r2, r1
 800835e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008362:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008366:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	015a      	lsls	r2, r3, #5
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	4413      	add	r3, r2
 8008370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	68ba      	ldr	r2, [r7, #8]
 8008378:	0151      	lsls	r1, r2, #5
 800837a:	68fa      	ldr	r2, [r7, #12]
 800837c:	440a      	add	r2, r1
 800837e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008382:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008386:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800838e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	f003 030f 	and.w	r3, r3, #15
 8008398:	2101      	movs	r1, #1
 800839a:	fa01 f303 	lsl.w	r3, r1, r3
 800839e:	b29b      	uxth	r3, r3
 80083a0:	43db      	mvns	r3, r3
 80083a2:	68f9      	ldr	r1, [r7, #12]
 80083a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083a8:	4013      	ands	r3, r2
 80083aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083b2:	69da      	ldr	r2, [r3, #28]
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	f003 030f 	and.w	r3, r3, #15
 80083bc:	2101      	movs	r1, #1
 80083be:	fa01 f303 	lsl.w	r3, r1, r3
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	43db      	mvns	r3, r3
 80083c6:	68f9      	ldr	r1, [r7, #12]
 80083c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083cc:	4013      	ands	r3, r2
 80083ce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	015a      	lsls	r2, r3, #5
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	4413      	add	r3, r2
 80083d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	0159      	lsls	r1, r3, #5
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	440b      	add	r3, r1
 80083e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083ea:	4619      	mov	r1, r3
 80083ec:	4b35      	ldr	r3, [pc, #212]	; (80084c4 <USB_DeactivateEndpoint+0x1b0>)
 80083ee:	4013      	ands	r3, r2
 80083f0:	600b      	str	r3, [r1, #0]
 80083f2:	e060      	b.n	80084b6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	015a      	lsls	r2, r3, #5
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	4413      	add	r3, r2
 80083fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008406:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800840a:	d11f      	bne.n	800844c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	015a      	lsls	r2, r3, #5
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	4413      	add	r3, r2
 8008414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	68ba      	ldr	r2, [r7, #8]
 800841c:	0151      	lsls	r1, r2, #5
 800841e:	68fa      	ldr	r2, [r7, #12]
 8008420:	440a      	add	r2, r1
 8008422:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008426:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800842a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	015a      	lsls	r2, r3, #5
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	4413      	add	r3, r2
 8008434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68ba      	ldr	r2, [r7, #8]
 800843c:	0151      	lsls	r1, r2, #5
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	440a      	add	r2, r1
 8008442:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008446:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800844a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008452:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	f003 030f 	and.w	r3, r3, #15
 800845c:	2101      	movs	r1, #1
 800845e:	fa01 f303 	lsl.w	r3, r1, r3
 8008462:	041b      	lsls	r3, r3, #16
 8008464:	43db      	mvns	r3, r3
 8008466:	68f9      	ldr	r1, [r7, #12]
 8008468:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800846c:	4013      	ands	r3, r2
 800846e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008476:	69da      	ldr	r2, [r3, #28]
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	f003 030f 	and.w	r3, r3, #15
 8008480:	2101      	movs	r1, #1
 8008482:	fa01 f303 	lsl.w	r3, r1, r3
 8008486:	041b      	lsls	r3, r3, #16
 8008488:	43db      	mvns	r3, r3
 800848a:	68f9      	ldr	r1, [r7, #12]
 800848c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008490:	4013      	ands	r3, r2
 8008492:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	015a      	lsls	r2, r3, #5
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	4413      	add	r3, r2
 800849c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	0159      	lsls	r1, r3, #5
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	440b      	add	r3, r1
 80084aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ae:	4619      	mov	r1, r3
 80084b0:	4b05      	ldr	r3, [pc, #20]	; (80084c8 <USB_DeactivateEndpoint+0x1b4>)
 80084b2:	4013      	ands	r3, r2
 80084b4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3714      	adds	r7, #20
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr
 80084c4:	ec337800 	.word	0xec337800
 80084c8:	eff37800 	.word	0xeff37800

080084cc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b08a      	sub	sp, #40	; 0x28
 80084d0:	af02      	add	r7, sp, #8
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	4613      	mov	r3, r2
 80084d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	785b      	ldrb	r3, [r3, #1]
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	f040 815c 	bne.w	80087a6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d132      	bne.n	800855c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	015a      	lsls	r2, r3, #5
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	4413      	add	r3, r2
 80084fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008502:	691b      	ldr	r3, [r3, #16]
 8008504:	69ba      	ldr	r2, [r7, #24]
 8008506:	0151      	lsls	r1, r2, #5
 8008508:	69fa      	ldr	r2, [r7, #28]
 800850a:	440a      	add	r2, r1
 800850c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008510:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008514:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008518:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	015a      	lsls	r2, r3, #5
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	4413      	add	r3, r2
 8008522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008526:	691b      	ldr	r3, [r3, #16]
 8008528:	69ba      	ldr	r2, [r7, #24]
 800852a:	0151      	lsls	r1, r2, #5
 800852c:	69fa      	ldr	r2, [r7, #28]
 800852e:	440a      	add	r2, r1
 8008530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008534:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008538:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800853a:	69bb      	ldr	r3, [r7, #24]
 800853c:	015a      	lsls	r2, r3, #5
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	4413      	add	r3, r2
 8008542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008546:	691b      	ldr	r3, [r3, #16]
 8008548:	69ba      	ldr	r2, [r7, #24]
 800854a:	0151      	lsls	r1, r2, #5
 800854c:	69fa      	ldr	r2, [r7, #28]
 800854e:	440a      	add	r2, r1
 8008550:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008554:	0cdb      	lsrs	r3, r3, #19
 8008556:	04db      	lsls	r3, r3, #19
 8008558:	6113      	str	r3, [r2, #16]
 800855a:	e074      	b.n	8008646 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800855c:	69bb      	ldr	r3, [r7, #24]
 800855e:	015a      	lsls	r2, r3, #5
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	4413      	add	r3, r2
 8008564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008568:	691b      	ldr	r3, [r3, #16]
 800856a:	69ba      	ldr	r2, [r7, #24]
 800856c:	0151      	lsls	r1, r2, #5
 800856e:	69fa      	ldr	r2, [r7, #28]
 8008570:	440a      	add	r2, r1
 8008572:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008576:	0cdb      	lsrs	r3, r3, #19
 8008578:	04db      	lsls	r3, r3, #19
 800857a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	015a      	lsls	r2, r3, #5
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	4413      	add	r3, r2
 8008584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008588:	691b      	ldr	r3, [r3, #16]
 800858a:	69ba      	ldr	r2, [r7, #24]
 800858c:	0151      	lsls	r1, r2, #5
 800858e:	69fa      	ldr	r2, [r7, #28]
 8008590:	440a      	add	r2, r1
 8008592:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008596:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800859a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800859e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80085a0:	69bb      	ldr	r3, [r7, #24]
 80085a2:	015a      	lsls	r2, r3, #5
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	4413      	add	r3, r2
 80085a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085ac:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	6999      	ldr	r1, [r3, #24]
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	440b      	add	r3, r1
 80085b8:	1e59      	subs	r1, r3, #1
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	fbb1 f3f3 	udiv	r3, r1, r3
 80085c2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80085c4:	4b9d      	ldr	r3, [pc, #628]	; (800883c <USB_EPStartXfer+0x370>)
 80085c6:	400b      	ands	r3, r1
 80085c8:	69b9      	ldr	r1, [r7, #24]
 80085ca:	0148      	lsls	r0, r1, #5
 80085cc:	69f9      	ldr	r1, [r7, #28]
 80085ce:	4401      	add	r1, r0
 80085d0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80085d4:	4313      	orrs	r3, r2
 80085d6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80085d8:	69bb      	ldr	r3, [r7, #24]
 80085da:	015a      	lsls	r2, r3, #5
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	4413      	add	r3, r2
 80085e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085e4:	691a      	ldr	r2, [r3, #16]
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085ee:	69b9      	ldr	r1, [r7, #24]
 80085f0:	0148      	lsls	r0, r1, #5
 80085f2:	69f9      	ldr	r1, [r7, #28]
 80085f4:	4401      	add	r1, r0
 80085f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80085fa:	4313      	orrs	r3, r2
 80085fc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	791b      	ldrb	r3, [r3, #4]
 8008602:	2b01      	cmp	r3, #1
 8008604:	d11f      	bne.n	8008646 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	015a      	lsls	r2, r3, #5
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	4413      	add	r3, r2
 800860e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008612:	691b      	ldr	r3, [r3, #16]
 8008614:	69ba      	ldr	r2, [r7, #24]
 8008616:	0151      	lsls	r1, r2, #5
 8008618:	69fa      	ldr	r2, [r7, #28]
 800861a:	440a      	add	r2, r1
 800861c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008620:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008624:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008626:	69bb      	ldr	r3, [r7, #24]
 8008628:	015a      	lsls	r2, r3, #5
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	4413      	add	r3, r2
 800862e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	69ba      	ldr	r2, [r7, #24]
 8008636:	0151      	lsls	r1, r2, #5
 8008638:	69fa      	ldr	r2, [r7, #28]
 800863a:	440a      	add	r2, r1
 800863c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008640:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008644:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008646:	79fb      	ldrb	r3, [r7, #7]
 8008648:	2b01      	cmp	r3, #1
 800864a:	d14b      	bne.n	80086e4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	695b      	ldr	r3, [r3, #20]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d009      	beq.n	8008668 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	015a      	lsls	r2, r3, #5
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	4413      	add	r3, r2
 800865c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008660:	461a      	mov	r2, r3
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	695b      	ldr	r3, [r3, #20]
 8008666:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	791b      	ldrb	r3, [r3, #4]
 800866c:	2b01      	cmp	r3, #1
 800866e:	d128      	bne.n	80086c2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800867c:	2b00      	cmp	r3, #0
 800867e:	d110      	bne.n	80086a2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008680:	69bb      	ldr	r3, [r7, #24]
 8008682:	015a      	lsls	r2, r3, #5
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	4413      	add	r3, r2
 8008688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	69ba      	ldr	r2, [r7, #24]
 8008690:	0151      	lsls	r1, r2, #5
 8008692:	69fa      	ldr	r2, [r7, #28]
 8008694:	440a      	add	r2, r1
 8008696:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800869a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800869e:	6013      	str	r3, [r2, #0]
 80086a0:	e00f      	b.n	80086c2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	015a      	lsls	r2, r3, #5
 80086a6:	69fb      	ldr	r3, [r7, #28]
 80086a8:	4413      	add	r3, r2
 80086aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	69ba      	ldr	r2, [r7, #24]
 80086b2:	0151      	lsls	r1, r2, #5
 80086b4:	69fa      	ldr	r2, [r7, #28]
 80086b6:	440a      	add	r2, r1
 80086b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086c0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80086c2:	69bb      	ldr	r3, [r7, #24]
 80086c4:	015a      	lsls	r2, r3, #5
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	4413      	add	r3, r2
 80086ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	69ba      	ldr	r2, [r7, #24]
 80086d2:	0151      	lsls	r1, r2, #5
 80086d4:	69fa      	ldr	r2, [r7, #28]
 80086d6:	440a      	add	r2, r1
 80086d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80086e0:	6013      	str	r3, [r2, #0]
 80086e2:	e133      	b.n	800894c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80086e4:	69bb      	ldr	r3, [r7, #24]
 80086e6:	015a      	lsls	r2, r3, #5
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	4413      	add	r3, r2
 80086ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	69ba      	ldr	r2, [r7, #24]
 80086f4:	0151      	lsls	r1, r2, #5
 80086f6:	69fa      	ldr	r2, [r7, #28]
 80086f8:	440a      	add	r2, r1
 80086fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008702:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	791b      	ldrb	r3, [r3, #4]
 8008708:	2b01      	cmp	r3, #1
 800870a:	d015      	beq.n	8008738 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	699b      	ldr	r3, [r3, #24]
 8008710:	2b00      	cmp	r3, #0
 8008712:	f000 811b 	beq.w	800894c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800871c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	f003 030f 	and.w	r3, r3, #15
 8008726:	2101      	movs	r1, #1
 8008728:	fa01 f303 	lsl.w	r3, r1, r3
 800872c:	69f9      	ldr	r1, [r7, #28]
 800872e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008732:	4313      	orrs	r3, r2
 8008734:	634b      	str	r3, [r1, #52]	; 0x34
 8008736:	e109      	b.n	800894c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008744:	2b00      	cmp	r3, #0
 8008746:	d110      	bne.n	800876a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008748:	69bb      	ldr	r3, [r7, #24]
 800874a:	015a      	lsls	r2, r3, #5
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	4413      	add	r3, r2
 8008750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	69ba      	ldr	r2, [r7, #24]
 8008758:	0151      	lsls	r1, r2, #5
 800875a:	69fa      	ldr	r2, [r7, #28]
 800875c:	440a      	add	r2, r1
 800875e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008762:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008766:	6013      	str	r3, [r2, #0]
 8008768:	e00f      	b.n	800878a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800876a:	69bb      	ldr	r3, [r7, #24]
 800876c:	015a      	lsls	r2, r3, #5
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	4413      	add	r3, r2
 8008772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	69ba      	ldr	r2, [r7, #24]
 800877a:	0151      	lsls	r1, r2, #5
 800877c:	69fa      	ldr	r2, [r7, #28]
 800877e:	440a      	add	r2, r1
 8008780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008788:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	6919      	ldr	r1, [r3, #16]
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	781a      	ldrb	r2, [r3, #0]
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	699b      	ldr	r3, [r3, #24]
 8008796:	b298      	uxth	r0, r3
 8008798:	79fb      	ldrb	r3, [r7, #7]
 800879a:	9300      	str	r3, [sp, #0]
 800879c:	4603      	mov	r3, r0
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	f000 fade 	bl	8008d60 <USB_WritePacket>
 80087a4:	e0d2      	b.n	800894c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	015a      	lsls	r2, r3, #5
 80087aa:	69fb      	ldr	r3, [r7, #28]
 80087ac:	4413      	add	r3, r2
 80087ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087b2:	691b      	ldr	r3, [r3, #16]
 80087b4:	69ba      	ldr	r2, [r7, #24]
 80087b6:	0151      	lsls	r1, r2, #5
 80087b8:	69fa      	ldr	r2, [r7, #28]
 80087ba:	440a      	add	r2, r1
 80087bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087c0:	0cdb      	lsrs	r3, r3, #19
 80087c2:	04db      	lsls	r3, r3, #19
 80087c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	015a      	lsls	r2, r3, #5
 80087ca:	69fb      	ldr	r3, [r7, #28]
 80087cc:	4413      	add	r3, r2
 80087ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087d2:	691b      	ldr	r3, [r3, #16]
 80087d4:	69ba      	ldr	r2, [r7, #24]
 80087d6:	0151      	lsls	r1, r2, #5
 80087d8:	69fa      	ldr	r2, [r7, #28]
 80087da:	440a      	add	r2, r1
 80087dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80087e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80087e8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	699b      	ldr	r3, [r3, #24]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d126      	bne.n	8008840 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80087f2:	69bb      	ldr	r3, [r7, #24]
 80087f4:	015a      	lsls	r2, r3, #5
 80087f6:	69fb      	ldr	r3, [r7, #28]
 80087f8:	4413      	add	r3, r2
 80087fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087fe:	691a      	ldr	r2, [r3, #16]
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	68db      	ldr	r3, [r3, #12]
 8008804:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008808:	69b9      	ldr	r1, [r7, #24]
 800880a:	0148      	lsls	r0, r1, #5
 800880c:	69f9      	ldr	r1, [r7, #28]
 800880e:	4401      	add	r1, r0
 8008810:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008814:	4313      	orrs	r3, r2
 8008816:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008818:	69bb      	ldr	r3, [r7, #24]
 800881a:	015a      	lsls	r2, r3, #5
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	4413      	add	r3, r2
 8008820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008824:	691b      	ldr	r3, [r3, #16]
 8008826:	69ba      	ldr	r2, [r7, #24]
 8008828:	0151      	lsls	r1, r2, #5
 800882a:	69fa      	ldr	r2, [r7, #28]
 800882c:	440a      	add	r2, r1
 800882e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008832:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008836:	6113      	str	r3, [r2, #16]
 8008838:	e03a      	b.n	80088b0 <USB_EPStartXfer+0x3e4>
 800883a:	bf00      	nop
 800883c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	699a      	ldr	r2, [r3, #24]
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	4413      	add	r3, r2
 800884a:	1e5a      	subs	r2, r3, #1
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	fbb2 f3f3 	udiv	r3, r2, r3
 8008854:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	8afa      	ldrh	r2, [r7, #22]
 800885c:	fb03 f202 	mul.w	r2, r3, r2
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008864:	69bb      	ldr	r3, [r7, #24]
 8008866:	015a      	lsls	r2, r3, #5
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	4413      	add	r3, r2
 800886c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008870:	691a      	ldr	r2, [r3, #16]
 8008872:	8afb      	ldrh	r3, [r7, #22]
 8008874:	04d9      	lsls	r1, r3, #19
 8008876:	4b38      	ldr	r3, [pc, #224]	; (8008958 <USB_EPStartXfer+0x48c>)
 8008878:	400b      	ands	r3, r1
 800887a:	69b9      	ldr	r1, [r7, #24]
 800887c:	0148      	lsls	r0, r1, #5
 800887e:	69f9      	ldr	r1, [r7, #28]
 8008880:	4401      	add	r1, r0
 8008882:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008886:	4313      	orrs	r3, r2
 8008888:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800888a:	69bb      	ldr	r3, [r7, #24]
 800888c:	015a      	lsls	r2, r3, #5
 800888e:	69fb      	ldr	r3, [r7, #28]
 8008890:	4413      	add	r3, r2
 8008892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008896:	691a      	ldr	r2, [r3, #16]
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	69db      	ldr	r3, [r3, #28]
 800889c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088a0:	69b9      	ldr	r1, [r7, #24]
 80088a2:	0148      	lsls	r0, r1, #5
 80088a4:	69f9      	ldr	r1, [r7, #28]
 80088a6:	4401      	add	r1, r0
 80088a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80088ac:	4313      	orrs	r3, r2
 80088ae:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80088b0:	79fb      	ldrb	r3, [r7, #7]
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d10d      	bne.n	80088d2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	691b      	ldr	r3, [r3, #16]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d009      	beq.n	80088d2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	6919      	ldr	r1, [r3, #16]
 80088c2:	69bb      	ldr	r3, [r7, #24]
 80088c4:	015a      	lsls	r2, r3, #5
 80088c6:	69fb      	ldr	r3, [r7, #28]
 80088c8:	4413      	add	r3, r2
 80088ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ce:	460a      	mov	r2, r1
 80088d0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	791b      	ldrb	r3, [r3, #4]
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d128      	bne.n	800892c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d110      	bne.n	800890c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80088ea:	69bb      	ldr	r3, [r7, #24]
 80088ec:	015a      	lsls	r2, r3, #5
 80088ee:	69fb      	ldr	r3, [r7, #28]
 80088f0:	4413      	add	r3, r2
 80088f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	69ba      	ldr	r2, [r7, #24]
 80088fa:	0151      	lsls	r1, r2, #5
 80088fc:	69fa      	ldr	r2, [r7, #28]
 80088fe:	440a      	add	r2, r1
 8008900:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008904:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008908:	6013      	str	r3, [r2, #0]
 800890a:	e00f      	b.n	800892c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	015a      	lsls	r2, r3, #5
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	4413      	add	r3, r2
 8008914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	69ba      	ldr	r2, [r7, #24]
 800891c:	0151      	lsls	r1, r2, #5
 800891e:	69fa      	ldr	r2, [r7, #28]
 8008920:	440a      	add	r2, r1
 8008922:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800892a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800892c:	69bb      	ldr	r3, [r7, #24]
 800892e:	015a      	lsls	r2, r3, #5
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	4413      	add	r3, r2
 8008934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	69ba      	ldr	r2, [r7, #24]
 800893c:	0151      	lsls	r1, r2, #5
 800893e:	69fa      	ldr	r2, [r7, #28]
 8008940:	440a      	add	r2, r1
 8008942:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008946:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800894a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	3720      	adds	r7, #32
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	1ff80000 	.word	0x1ff80000

0800895c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800895c:	b480      	push	{r7}
 800895e:	b087      	sub	sp, #28
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	4613      	mov	r3, r2
 8008968:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	785b      	ldrb	r3, [r3, #1]
 8008978:	2b01      	cmp	r3, #1
 800897a:	f040 80ce 	bne.w	8008b1a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	699b      	ldr	r3, [r3, #24]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d132      	bne.n	80089ec <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	015a      	lsls	r2, r3, #5
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	4413      	add	r3, r2
 800898e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008992:	691b      	ldr	r3, [r3, #16]
 8008994:	693a      	ldr	r2, [r7, #16]
 8008996:	0151      	lsls	r1, r2, #5
 8008998:	697a      	ldr	r2, [r7, #20]
 800899a:	440a      	add	r2, r1
 800899c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80089a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80089a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	015a      	lsls	r2, r3, #5
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	4413      	add	r3, r2
 80089b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089b6:	691b      	ldr	r3, [r3, #16]
 80089b8:	693a      	ldr	r2, [r7, #16]
 80089ba:	0151      	lsls	r1, r2, #5
 80089bc:	697a      	ldr	r2, [r7, #20]
 80089be:	440a      	add	r2, r1
 80089c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80089c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	015a      	lsls	r2, r3, #5
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	4413      	add	r3, r2
 80089d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089d6:	691b      	ldr	r3, [r3, #16]
 80089d8:	693a      	ldr	r2, [r7, #16]
 80089da:	0151      	lsls	r1, r2, #5
 80089dc:	697a      	ldr	r2, [r7, #20]
 80089de:	440a      	add	r2, r1
 80089e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089e4:	0cdb      	lsrs	r3, r3, #19
 80089e6:	04db      	lsls	r3, r3, #19
 80089e8:	6113      	str	r3, [r2, #16]
 80089ea:	e04e      	b.n	8008a8a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	015a      	lsls	r2, r3, #5
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	4413      	add	r3, r2
 80089f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089f8:	691b      	ldr	r3, [r3, #16]
 80089fa:	693a      	ldr	r2, [r7, #16]
 80089fc:	0151      	lsls	r1, r2, #5
 80089fe:	697a      	ldr	r2, [r7, #20]
 8008a00:	440a      	add	r2, r1
 8008a02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a06:	0cdb      	lsrs	r3, r3, #19
 8008a08:	04db      	lsls	r3, r3, #19
 8008a0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	015a      	lsls	r2, r3, #5
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	4413      	add	r3, r2
 8008a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a18:	691b      	ldr	r3, [r3, #16]
 8008a1a:	693a      	ldr	r2, [r7, #16]
 8008a1c:	0151      	lsls	r1, r2, #5
 8008a1e:	697a      	ldr	r2, [r7, #20]
 8008a20:	440a      	add	r2, r1
 8008a22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a26:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008a2a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008a2e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	699a      	ldr	r2, [r3, #24]
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	68db      	ldr	r3, [r3, #12]
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d903      	bls.n	8008a44 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	68da      	ldr	r2, [r3, #12]
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	015a      	lsls	r2, r3, #5
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	4413      	add	r3, r2
 8008a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	693a      	ldr	r2, [r7, #16]
 8008a54:	0151      	lsls	r1, r2, #5
 8008a56:	697a      	ldr	r2, [r7, #20]
 8008a58:	440a      	add	r2, r1
 8008a5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	015a      	lsls	r2, r3, #5
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	4413      	add	r3, r2
 8008a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a70:	691a      	ldr	r2, [r3, #16]
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	699b      	ldr	r3, [r3, #24]
 8008a76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a7a:	6939      	ldr	r1, [r7, #16]
 8008a7c:	0148      	lsls	r0, r1, #5
 8008a7e:	6979      	ldr	r1, [r7, #20]
 8008a80:	4401      	add	r1, r0
 8008a82:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008a86:	4313      	orrs	r3, r2
 8008a88:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008a8a:	79fb      	ldrb	r3, [r7, #7]
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d11e      	bne.n	8008ace <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	695b      	ldr	r3, [r3, #20]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d009      	beq.n	8008aac <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	015a      	lsls	r2, r3, #5
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	4413      	add	r3, r2
 8008aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	695b      	ldr	r3, [r3, #20]
 8008aaa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	015a      	lsls	r2, r3, #5
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	4413      	add	r3, r2
 8008ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	693a      	ldr	r2, [r7, #16]
 8008abc:	0151      	lsls	r1, r2, #5
 8008abe:	697a      	ldr	r2, [r7, #20]
 8008ac0:	440a      	add	r2, r1
 8008ac2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ac6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008aca:	6013      	str	r3, [r2, #0]
 8008acc:	e097      	b.n	8008bfe <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	015a      	lsls	r2, r3, #5
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	4413      	add	r3, r2
 8008ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	693a      	ldr	r2, [r7, #16]
 8008ade:	0151      	lsls	r1, r2, #5
 8008ae0:	697a      	ldr	r2, [r7, #20]
 8008ae2:	440a      	add	r2, r1
 8008ae4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ae8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008aec:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	699b      	ldr	r3, [r3, #24]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	f000 8083 	beq.w	8008bfe <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008afe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	f003 030f 	and.w	r3, r3, #15
 8008b08:	2101      	movs	r1, #1
 8008b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8008b0e:	6979      	ldr	r1, [r7, #20]
 8008b10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b14:	4313      	orrs	r3, r2
 8008b16:	634b      	str	r3, [r1, #52]	; 0x34
 8008b18:	e071      	b.n	8008bfe <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	015a      	lsls	r2, r3, #5
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	4413      	add	r3, r2
 8008b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b26:	691b      	ldr	r3, [r3, #16]
 8008b28:	693a      	ldr	r2, [r7, #16]
 8008b2a:	0151      	lsls	r1, r2, #5
 8008b2c:	697a      	ldr	r2, [r7, #20]
 8008b2e:	440a      	add	r2, r1
 8008b30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b34:	0cdb      	lsrs	r3, r3, #19
 8008b36:	04db      	lsls	r3, r3, #19
 8008b38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	015a      	lsls	r2, r3, #5
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	4413      	add	r3, r2
 8008b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b46:	691b      	ldr	r3, [r3, #16]
 8008b48:	693a      	ldr	r2, [r7, #16]
 8008b4a:	0151      	lsls	r1, r2, #5
 8008b4c:	697a      	ldr	r2, [r7, #20]
 8008b4e:	440a      	add	r2, r1
 8008b50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b54:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008b58:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008b5c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	699b      	ldr	r3, [r3, #24]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d003      	beq.n	8008b6e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	68da      	ldr	r2, [r3, #12]
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	68da      	ldr	r2, [r3, #12]
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	015a      	lsls	r2, r3, #5
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b82:	691b      	ldr	r3, [r3, #16]
 8008b84:	693a      	ldr	r2, [r7, #16]
 8008b86:	0151      	lsls	r1, r2, #5
 8008b88:	697a      	ldr	r2, [r7, #20]
 8008b8a:	440a      	add	r2, r1
 8008b8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	015a      	lsls	r2, r3, #5
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ba2:	691a      	ldr	r2, [r3, #16]
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	69db      	ldr	r3, [r3, #28]
 8008ba8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bac:	6939      	ldr	r1, [r7, #16]
 8008bae:	0148      	lsls	r0, r1, #5
 8008bb0:	6979      	ldr	r1, [r7, #20]
 8008bb2:	4401      	add	r1, r0
 8008bb4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008bbc:	79fb      	ldrb	r3, [r7, #7]
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d10d      	bne.n	8008bde <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	691b      	ldr	r3, [r3, #16]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d009      	beq.n	8008bde <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	6919      	ldr	r1, [r3, #16]
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	015a      	lsls	r2, r3, #5
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bda:	460a      	mov	r2, r1
 8008bdc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	015a      	lsls	r2, r3, #5
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	4413      	add	r3, r2
 8008be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	693a      	ldr	r2, [r7, #16]
 8008bee:	0151      	lsls	r1, r2, #5
 8008bf0:	697a      	ldr	r2, [r7, #20]
 8008bf2:	440a      	add	r2, r1
 8008bf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bf8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008bfc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008bfe:	2300      	movs	r3, #0
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	371c      	adds	r7, #28
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b087      	sub	sp, #28
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008c16:	2300      	movs	r3, #0
 8008c18:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	785b      	ldrb	r3, [r3, #1]
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d14a      	bne.n	8008cc0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	015a      	lsls	r2, r3, #5
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	4413      	add	r3, r2
 8008c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c42:	f040 8086 	bne.w	8008d52 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	015a      	lsls	r2, r3, #5
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	4413      	add	r3, r2
 8008c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	683a      	ldr	r2, [r7, #0]
 8008c58:	7812      	ldrb	r2, [r2, #0]
 8008c5a:	0151      	lsls	r1, r2, #5
 8008c5c:	693a      	ldr	r2, [r7, #16]
 8008c5e:	440a      	add	r2, r1
 8008c60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008c68:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	015a      	lsls	r2, r3, #5
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	4413      	add	r3, r2
 8008c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	683a      	ldr	r2, [r7, #0]
 8008c7c:	7812      	ldrb	r2, [r2, #0]
 8008c7e:	0151      	lsls	r1, r2, #5
 8008c80:	693a      	ldr	r2, [r7, #16]
 8008c82:	440a      	add	r2, r1
 8008c84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c8c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	3301      	adds	r3, #1
 8008c92:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f242 7210 	movw	r2, #10000	; 0x2710
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d902      	bls.n	8008ca4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	75fb      	strb	r3, [r7, #23]
          break;
 8008ca2:	e056      	b.n	8008d52 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	015a      	lsls	r2, r3, #5
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	4413      	add	r3, r2
 8008cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008cb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cbc:	d0e7      	beq.n	8008c8e <USB_EPStopXfer+0x82>
 8008cbe:	e048      	b.n	8008d52 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	015a      	lsls	r2, r3, #5
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	4413      	add	r3, r2
 8008cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008cd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cd8:	d13b      	bne.n	8008d52 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	015a      	lsls	r2, r3, #5
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	4413      	add	r3, r2
 8008ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	683a      	ldr	r2, [r7, #0]
 8008cec:	7812      	ldrb	r2, [r2, #0]
 8008cee:	0151      	lsls	r1, r2, #5
 8008cf0:	693a      	ldr	r2, [r7, #16]
 8008cf2:	440a      	add	r2, r1
 8008cf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cf8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008cfc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	015a      	lsls	r2, r3, #5
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	4413      	add	r3, r2
 8008d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	683a      	ldr	r2, [r7, #0]
 8008d10:	7812      	ldrb	r2, [r2, #0]
 8008d12:	0151      	lsls	r1, r2, #5
 8008d14:	693a      	ldr	r2, [r7, #16]
 8008d16:	440a      	add	r2, r1
 8008d18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d20:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	3301      	adds	r3, #1
 8008d26:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f242 7210 	movw	r2, #10000	; 0x2710
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d902      	bls.n	8008d38 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008d32:	2301      	movs	r3, #1
 8008d34:	75fb      	strb	r3, [r7, #23]
          break;
 8008d36:	e00c      	b.n	8008d52 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	015a      	lsls	r2, r3, #5
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	4413      	add	r3, r2
 8008d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d50:	d0e7      	beq.n	8008d22 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	371c      	adds	r7, #28
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr

08008d60 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b089      	sub	sp, #36	; 0x24
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	60f8      	str	r0, [r7, #12]
 8008d68:	60b9      	str	r1, [r7, #8]
 8008d6a:	4611      	mov	r1, r2
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	460b      	mov	r3, r1
 8008d70:	71fb      	strb	r3, [r7, #7]
 8008d72:	4613      	mov	r3, r2
 8008d74:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008d7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d123      	bne.n	8008dce <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008d86:	88bb      	ldrh	r3, [r7, #4]
 8008d88:	3303      	adds	r3, #3
 8008d8a:	089b      	lsrs	r3, r3, #2
 8008d8c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008d8e:	2300      	movs	r3, #0
 8008d90:	61bb      	str	r3, [r7, #24]
 8008d92:	e018      	b.n	8008dc6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008d94:	79fb      	ldrb	r3, [r7, #7]
 8008d96:	031a      	lsls	r2, r3, #12
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	4413      	add	r3, r2
 8008d9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008da0:	461a      	mov	r2, r3
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008da8:	69fb      	ldr	r3, [r7, #28]
 8008daa:	3301      	adds	r3, #1
 8008dac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008dae:	69fb      	ldr	r3, [r7, #28]
 8008db0:	3301      	adds	r3, #1
 8008db2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	3301      	adds	r3, #1
 8008db8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008dba:	69fb      	ldr	r3, [r7, #28]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008dc0:	69bb      	ldr	r3, [r7, #24]
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	61bb      	str	r3, [r7, #24]
 8008dc6:	69ba      	ldr	r2, [r7, #24]
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d3e2      	bcc.n	8008d94 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008dce:	2300      	movs	r3, #0
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3724      	adds	r7, #36	; 0x24
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b08b      	sub	sp, #44	; 0x2c
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	60f8      	str	r0, [r7, #12]
 8008de4:	60b9      	str	r1, [r7, #8]
 8008de6:	4613      	mov	r3, r2
 8008de8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008df2:	88fb      	ldrh	r3, [r7, #6]
 8008df4:	089b      	lsrs	r3, r3, #2
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008dfa:	88fb      	ldrh	r3, [r7, #6]
 8008dfc:	f003 0303 	and.w	r3, r3, #3
 8008e00:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008e02:	2300      	movs	r3, #0
 8008e04:	623b      	str	r3, [r7, #32]
 8008e06:	e014      	b.n	8008e32 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008e08:	69bb      	ldr	r3, [r7, #24]
 8008e0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e12:	601a      	str	r2, [r3, #0]
    pDest++;
 8008e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e16:	3301      	adds	r3, #1
 8008e18:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e22:	3301      	adds	r3, #1
 8008e24:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e28:	3301      	adds	r3, #1
 8008e2a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008e2c:	6a3b      	ldr	r3, [r7, #32]
 8008e2e:	3301      	adds	r3, #1
 8008e30:	623b      	str	r3, [r7, #32]
 8008e32:	6a3a      	ldr	r2, [r7, #32]
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d3e6      	bcc.n	8008e08 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008e3a:	8bfb      	ldrh	r3, [r7, #30]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d01e      	beq.n	8008e7e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008e40:	2300      	movs	r3, #0
 8008e42:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	f107 0310 	add.w	r3, r7, #16
 8008e50:	6812      	ldr	r2, [r2, #0]
 8008e52:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008e54:	693a      	ldr	r2, [r7, #16]
 8008e56:	6a3b      	ldr	r3, [r7, #32]
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	00db      	lsls	r3, r3, #3
 8008e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8008e60:	b2da      	uxtb	r2, r3
 8008e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e64:	701a      	strb	r2, [r3, #0]
      i++;
 8008e66:	6a3b      	ldr	r3, [r7, #32]
 8008e68:	3301      	adds	r3, #1
 8008e6a:	623b      	str	r3, [r7, #32]
      pDest++;
 8008e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6e:	3301      	adds	r3, #1
 8008e70:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008e72:	8bfb      	ldrh	r3, [r7, #30]
 8008e74:	3b01      	subs	r3, #1
 8008e76:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008e78:	8bfb      	ldrh	r3, [r7, #30]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d1ea      	bne.n	8008e54 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	372c      	adds	r7, #44	; 0x2c
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr

08008e8c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b085      	sub	sp, #20
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	785b      	ldrb	r3, [r3, #1]
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d12c      	bne.n	8008f02 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	015a      	lsls	r2, r3, #5
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	4413      	add	r3, r2
 8008eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	db12      	blt.n	8008ee0 <USB_EPSetStall+0x54>
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d00f      	beq.n	8008ee0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	015a      	lsls	r2, r3, #5
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	4413      	add	r3, r2
 8008ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	68ba      	ldr	r2, [r7, #8]
 8008ed0:	0151      	lsls	r1, r2, #5
 8008ed2:	68fa      	ldr	r2, [r7, #12]
 8008ed4:	440a      	add	r2, r1
 8008ed6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eda:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008ede:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	015a      	lsls	r2, r3, #5
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	4413      	add	r3, r2
 8008ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	68ba      	ldr	r2, [r7, #8]
 8008ef0:	0151      	lsls	r1, r2, #5
 8008ef2:	68fa      	ldr	r2, [r7, #12]
 8008ef4:	440a      	add	r2, r1
 8008ef6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008efa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008efe:	6013      	str	r3, [r2, #0]
 8008f00:	e02b      	b.n	8008f5a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	015a      	lsls	r2, r3, #5
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	4413      	add	r3, r2
 8008f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	db12      	blt.n	8008f3a <USB_EPSetStall+0xae>
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00f      	beq.n	8008f3a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	015a      	lsls	r2, r3, #5
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	4413      	add	r3, r2
 8008f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	68ba      	ldr	r2, [r7, #8]
 8008f2a:	0151      	lsls	r1, r2, #5
 8008f2c:	68fa      	ldr	r2, [r7, #12]
 8008f2e:	440a      	add	r2, r1
 8008f30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f34:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008f38:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	015a      	lsls	r2, r3, #5
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	4413      	add	r3, r2
 8008f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	68ba      	ldr	r2, [r7, #8]
 8008f4a:	0151      	lsls	r1, r2, #5
 8008f4c:	68fa      	ldr	r2, [r7, #12]
 8008f4e:	440a      	add	r2, r1
 8008f50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008f58:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008f5a:	2300      	movs	r3, #0
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3714      	adds	r7, #20
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	781b      	ldrb	r3, [r3, #0]
 8008f7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	785b      	ldrb	r3, [r3, #1]
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d128      	bne.n	8008fd6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	015a      	lsls	r2, r3, #5
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	68ba      	ldr	r2, [r7, #8]
 8008f94:	0151      	lsls	r1, r2, #5
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	440a      	add	r2, r1
 8008f9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008fa2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	791b      	ldrb	r3, [r3, #4]
 8008fa8:	2b03      	cmp	r3, #3
 8008faa:	d003      	beq.n	8008fb4 <USB_EPClearStall+0x4c>
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	791b      	ldrb	r3, [r3, #4]
 8008fb0:	2b02      	cmp	r3, #2
 8008fb2:	d138      	bne.n	8009026 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	015a      	lsls	r2, r3, #5
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	4413      	add	r3, r2
 8008fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	68ba      	ldr	r2, [r7, #8]
 8008fc4:	0151      	lsls	r1, r2, #5
 8008fc6:	68fa      	ldr	r2, [r7, #12]
 8008fc8:	440a      	add	r2, r1
 8008fca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fd2:	6013      	str	r3, [r2, #0]
 8008fd4:	e027      	b.n	8009026 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	015a      	lsls	r2, r3, #5
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	4413      	add	r3, r2
 8008fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	68ba      	ldr	r2, [r7, #8]
 8008fe6:	0151      	lsls	r1, r2, #5
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	440a      	add	r2, r1
 8008fec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ff0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008ff4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	791b      	ldrb	r3, [r3, #4]
 8008ffa:	2b03      	cmp	r3, #3
 8008ffc:	d003      	beq.n	8009006 <USB_EPClearStall+0x9e>
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	791b      	ldrb	r3, [r3, #4]
 8009002:	2b02      	cmp	r3, #2
 8009004:	d10f      	bne.n	8009026 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	015a      	lsls	r2, r3, #5
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	4413      	add	r3, r2
 800900e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	68ba      	ldr	r2, [r7, #8]
 8009016:	0151      	lsls	r1, r2, #5
 8009018:	68fa      	ldr	r2, [r7, #12]
 800901a:	440a      	add	r2, r1
 800901c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009024:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009026:	2300      	movs	r3, #0
}
 8009028:	4618      	mov	r0, r3
 800902a:	3714      	adds	r7, #20
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009034:	b480      	push	{r7}
 8009036:	b085      	sub	sp, #20
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	460b      	mov	r3, r1
 800903e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	68fa      	ldr	r2, [r7, #12]
 800904e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009052:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009056:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800905e:	681a      	ldr	r2, [r3, #0]
 8009060:	78fb      	ldrb	r3, [r7, #3]
 8009062:	011b      	lsls	r3, r3, #4
 8009064:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009068:	68f9      	ldr	r1, [r7, #12]
 800906a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800906e:	4313      	orrs	r3, r2
 8009070:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009072:	2300      	movs	r3, #0
}
 8009074:	4618      	mov	r0, r3
 8009076:	3714      	adds	r7, #20
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009080:	b480      	push	{r7}
 8009082:	b085      	sub	sp, #20
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	68fa      	ldr	r2, [r7, #12]
 8009096:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800909a:	f023 0303 	bic.w	r3, r3, #3
 800909e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	68fa      	ldr	r2, [r7, #12]
 80090aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090ae:	f023 0302 	bic.w	r3, r3, #2
 80090b2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80090b4:	2300      	movs	r3, #0
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3714      	adds	r7, #20
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr

080090c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80090c2:	b480      	push	{r7}
 80090c4:	b085      	sub	sp, #20
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	68fa      	ldr	r2, [r7, #12]
 80090d8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80090dc:	f023 0303 	bic.w	r3, r3, #3
 80090e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	68fa      	ldr	r2, [r7, #12]
 80090ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090f0:	f043 0302 	orr.w	r3, r3, #2
 80090f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80090f6:	2300      	movs	r3, #0
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3714      	adds	r7, #20
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr

08009104 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009104:	b480      	push	{r7}
 8009106:	b085      	sub	sp, #20
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	695b      	ldr	r3, [r3, #20]
 8009110:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	699b      	ldr	r3, [r3, #24]
 8009116:	68fa      	ldr	r2, [r7, #12]
 8009118:	4013      	ands	r3, r2
 800911a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800911c:	68fb      	ldr	r3, [r7, #12]
}
 800911e:	4618      	mov	r0, r3
 8009120:	3714      	adds	r7, #20
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr

0800912a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800912a:	b480      	push	{r7}
 800912c:	b085      	sub	sp, #20
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800913c:	699b      	ldr	r3, [r3, #24]
 800913e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009146:	69db      	ldr	r3, [r3, #28]
 8009148:	68ba      	ldr	r2, [r7, #8]
 800914a:	4013      	ands	r3, r2
 800914c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	0c1b      	lsrs	r3, r3, #16
}
 8009152:	4618      	mov	r0, r3
 8009154:	3714      	adds	r7, #20
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr

0800915e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800915e:	b480      	push	{r7}
 8009160:	b085      	sub	sp, #20
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009170:	699b      	ldr	r3, [r3, #24]
 8009172:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800917a:	69db      	ldr	r3, [r3, #28]
 800917c:	68ba      	ldr	r2, [r7, #8]
 800917e:	4013      	ands	r3, r2
 8009180:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	b29b      	uxth	r3, r3
}
 8009186:	4618      	mov	r0, r3
 8009188:	3714      	adds	r7, #20
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr

08009192 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009192:	b480      	push	{r7}
 8009194:	b085      	sub	sp, #20
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
 800919a:	460b      	mov	r3, r1
 800919c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80091a2:	78fb      	ldrb	r3, [r7, #3]
 80091a4:	015a      	lsls	r2, r3, #5
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	4413      	add	r3, r2
 80091aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091b8:	695b      	ldr	r3, [r3, #20]
 80091ba:	68ba      	ldr	r2, [r7, #8]
 80091bc:	4013      	ands	r3, r2
 80091be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80091c0:	68bb      	ldr	r3, [r7, #8]
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3714      	adds	r7, #20
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr

080091ce <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80091ce:	b480      	push	{r7}
 80091d0:	b087      	sub	sp, #28
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]
 80091d6:	460b      	mov	r3, r1
 80091d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091e4:	691b      	ldr	r3, [r3, #16]
 80091e6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091f0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80091f2:	78fb      	ldrb	r3, [r7, #3]
 80091f4:	f003 030f 	and.w	r3, r3, #15
 80091f8:	68fa      	ldr	r2, [r7, #12]
 80091fa:	fa22 f303 	lsr.w	r3, r2, r3
 80091fe:	01db      	lsls	r3, r3, #7
 8009200:	b2db      	uxtb	r3, r3
 8009202:	693a      	ldr	r2, [r7, #16]
 8009204:	4313      	orrs	r3, r2
 8009206:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009208:	78fb      	ldrb	r3, [r7, #3]
 800920a:	015a      	lsls	r2, r3, #5
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	4413      	add	r3, r2
 8009210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	693a      	ldr	r2, [r7, #16]
 8009218:	4013      	ands	r3, r2
 800921a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800921c:	68bb      	ldr	r3, [r7, #8]
}
 800921e:	4618      	mov	r0, r3
 8009220:	371c      	adds	r7, #28
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr

0800922a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800922a:	b480      	push	{r7}
 800922c:	b083      	sub	sp, #12
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	695b      	ldr	r3, [r3, #20]
 8009236:	f003 0301 	and.w	r3, r3, #1
}
 800923a:	4618      	mov	r0, r3
 800923c:	370c      	adds	r7, #12
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr

08009246 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009246:	b480      	push	{r7}
 8009248:	b085      	sub	sp, #20
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	68fa      	ldr	r2, [r7, #12]
 800925c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009260:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009264:	f023 0307 	bic.w	r3, r3, #7
 8009268:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	68fa      	ldr	r2, [r7, #12]
 8009274:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800927c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800927e:	2300      	movs	r3, #0
}
 8009280:	4618      	mov	r0, r3
 8009282:	3714      	adds	r7, #20
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr

0800928c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800928c:	b480      	push	{r7}
 800928e:	b087      	sub	sp, #28
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	460b      	mov	r3, r1
 8009296:	607a      	str	r2, [r7, #4]
 8009298:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	333c      	adds	r3, #60	; 0x3c
 80092a2:	3304      	adds	r3, #4
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	4a26      	ldr	r2, [pc, #152]	; (8009344 <USB_EP0_OutStart+0xb8>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d90a      	bls.n	80092c6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092c0:	d101      	bne.n	80092c6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80092c2:	2300      	movs	r3, #0
 80092c4:	e037      	b.n	8009336 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092cc:	461a      	mov	r2, r3
 80092ce:	2300      	movs	r3, #0
 80092d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092d8:	691b      	ldr	r3, [r3, #16]
 80092da:	697a      	ldr	r2, [r7, #20]
 80092dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80092e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ec:	691b      	ldr	r3, [r3, #16]
 80092ee:	697a      	ldr	r2, [r7, #20]
 80092f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092f4:	f043 0318 	orr.w	r3, r3, #24
 80092f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009300:	691b      	ldr	r3, [r3, #16]
 8009302:	697a      	ldr	r2, [r7, #20]
 8009304:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009308:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800930c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800930e:	7afb      	ldrb	r3, [r7, #11]
 8009310:	2b01      	cmp	r3, #1
 8009312:	d10f      	bne.n	8009334 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800931a:	461a      	mov	r2, r3
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	697a      	ldr	r2, [r7, #20]
 800932a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800932e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009332:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	371c      	adds	r7, #28
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr
 8009342:	bf00      	nop
 8009344:	4f54300a 	.word	0x4f54300a

08009348 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009348:	b480      	push	{r7}
 800934a:	b085      	sub	sp, #20
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009350:	2300      	movs	r3, #0
 8009352:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	3301      	adds	r3, #1
 8009358:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	4a13      	ldr	r2, [pc, #76]	; (80093ac <USB_CoreReset+0x64>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d901      	bls.n	8009366 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009362:	2303      	movs	r3, #3
 8009364:	e01b      	b.n	800939e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	691b      	ldr	r3, [r3, #16]
 800936a:	2b00      	cmp	r3, #0
 800936c:	daf2      	bge.n	8009354 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800936e:	2300      	movs	r3, #0
 8009370:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	691b      	ldr	r3, [r3, #16]
 8009376:	f043 0201 	orr.w	r2, r3, #1
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	3301      	adds	r3, #1
 8009382:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	4a09      	ldr	r2, [pc, #36]	; (80093ac <USB_CoreReset+0x64>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d901      	bls.n	8009390 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800938c:	2303      	movs	r3, #3
 800938e:	e006      	b.n	800939e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	691b      	ldr	r3, [r3, #16]
 8009394:	f003 0301 	and.w	r3, r3, #1
 8009398:	2b01      	cmp	r3, #1
 800939a:	d0f0      	beq.n	800937e <USB_CoreReset+0x36>

  return HAL_OK;
 800939c:	2300      	movs	r3, #0
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3714      	adds	r7, #20
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr
 80093aa:	bf00      	nop
 80093ac:	00030d40 	.word	0x00030d40

080093b0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80093b0:	b084      	sub	sp, #16
 80093b2:	b580      	push	{r7, lr}
 80093b4:	b086      	sub	sp, #24
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
 80093ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80093be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80093c2:	2300      	movs	r3, #0
 80093c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80093d0:	461a      	mov	r2, r3
 80093d2:	2300      	movs	r3, #0
 80093d4:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093da:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d018      	beq.n	8009420 <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80093ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d10a      	bne.n	800940a <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	68fa      	ldr	r2, [r7, #12]
 80093fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009402:	f043 0304 	orr.w	r3, r3, #4
 8009406:	6013      	str	r3, [r2, #0]
 8009408:	e014      	b.n	8009434 <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	68fa      	ldr	r2, [r7, #12]
 8009414:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009418:	f023 0304 	bic.w	r3, r3, #4
 800941c:	6013      	str	r3, [r2, #0]
 800941e:	e009      	b.n	8009434 <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	68fa      	ldr	r2, [r7, #12]
 800942a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800942e:	f023 0304 	bic.w	r3, r3, #4
 8009432:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009434:	2110      	movs	r1, #16
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f7fe fe42 	bl	80080c0 <USB_FlushTxFifo>
 800943c:	4603      	mov	r3, r0
 800943e:	2b00      	cmp	r3, #0
 8009440:	d001      	beq.n	8009446 <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 8009442:	2301      	movs	r3, #1
 8009444:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f7fe fe6e 	bl	8008128 <USB_FlushRxFifo>
 800944c:	4603      	mov	r3, r0
 800944e:	2b00      	cmp	r3, #0
 8009450:	d001      	beq.n	8009456 <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 8009452:	2301      	movs	r3, #1
 8009454:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009456:	2300      	movs	r3, #0
 8009458:	613b      	str	r3, [r7, #16]
 800945a:	e015      	b.n	8009488 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	015a      	lsls	r2, r3, #5
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	4413      	add	r3, r2
 8009464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009468:	461a      	mov	r2, r3
 800946a:	f04f 33ff 	mov.w	r3, #4294967295
 800946e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	015a      	lsls	r2, r3, #5
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	4413      	add	r3, r2
 8009478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800947c:	461a      	mov	r2, r3
 800947e:	2300      	movs	r3, #0
 8009480:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	3301      	adds	r3, #1
 8009486:	613b      	str	r3, [r7, #16]
 8009488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800948a:	693a      	ldr	r2, [r7, #16]
 800948c:	429a      	cmp	r2, r3
 800948e:	d3e5      	bcc.n	800945c <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f04f 32ff 	mov.w	r2, #4294967295
 800949c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d00b      	beq.n	80094c2 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094b0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	4a13      	ldr	r2, [pc, #76]	; (8009504 <USB_HostInit+0x154>)
 80094b6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	4a13      	ldr	r2, [pc, #76]	; (8009508 <USB_HostInit+0x158>)
 80094bc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80094c0:	e009      	b.n	80094d6 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2280      	movs	r2, #128	; 0x80
 80094c6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	4a10      	ldr	r2, [pc, #64]	; (800950c <USB_HostInit+0x15c>)
 80094cc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	4a0f      	ldr	r2, [pc, #60]	; (8009510 <USB_HostInit+0x160>)
 80094d2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80094d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d105      	bne.n	80094e8 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	699b      	ldr	r3, [r3, #24]
 80094e0:	f043 0210 	orr.w	r2, r3, #16
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	699a      	ldr	r2, [r3, #24]
 80094ec:	4b09      	ldr	r3, [pc, #36]	; (8009514 <USB_HostInit+0x164>)
 80094ee:	4313      	orrs	r3, r2
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80094f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3718      	adds	r7, #24
 80094fa:	46bd      	mov	sp, r7
 80094fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009500:	b004      	add	sp, #16
 8009502:	4770      	bx	lr
 8009504:	01000200 	.word	0x01000200
 8009508:	00e00300 	.word	0x00e00300
 800950c:	00600080 	.word	0x00600080
 8009510:	004000e0 	.word	0x004000e0
 8009514:	a3200008 	.word	0xa3200008

08009518 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009518:	b480      	push	{r7}
 800951a:	b085      	sub	sp, #20
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	460b      	mov	r3, r1
 8009522:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	68fa      	ldr	r2, [r7, #12]
 8009532:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009536:	f023 0303 	bic.w	r3, r3, #3
 800953a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	78fb      	ldrb	r3, [r7, #3]
 8009546:	f003 0303 	and.w	r3, r3, #3
 800954a:	68f9      	ldr	r1, [r7, #12]
 800954c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009550:	4313      	orrs	r3, r2
 8009552:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009554:	78fb      	ldrb	r3, [r7, #3]
 8009556:	2b01      	cmp	r3, #1
 8009558:	d107      	bne.n	800956a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009560:	461a      	mov	r2, r3
 8009562:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009566:	6053      	str	r3, [r2, #4]
 8009568:	e009      	b.n	800957e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800956a:	78fb      	ldrb	r3, [r7, #3]
 800956c:	2b02      	cmp	r3, #2
 800956e:	d106      	bne.n	800957e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009576:	461a      	mov	r2, r3
 8009578:	f241 7370 	movw	r3, #6000	; 0x1770
 800957c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800957e:	2300      	movs	r3, #0
}
 8009580:	4618      	mov	r0, r3
 8009582:	3714      	adds	r7, #20
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009598:	2300      	movs	r3, #0
 800959a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80095ac:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	68fa      	ldr	r2, [r7, #12]
 80095b2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80095b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095ba:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80095bc:	2064      	movs	r0, #100	; 0x64
 80095be:	f7f8 faff 	bl	8001bc0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	68fa      	ldr	r2, [r7, #12]
 80095c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80095ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095ce:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80095d0:	200a      	movs	r0, #10
 80095d2:	f7f8 faf5 	bl	8001bc0 <HAL_Delay>

  return HAL_OK;
 80095d6:	2300      	movs	r3, #0
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3710      	adds	r7, #16
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b085      	sub	sp, #20
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	460b      	mov	r3, r1
 80095ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80095f0:	2300      	movs	r3, #0
 80095f2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009604:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800960c:	2b00      	cmp	r3, #0
 800960e:	d109      	bne.n	8009624 <USB_DriveVbus+0x44>
 8009610:	78fb      	ldrb	r3, [r7, #3]
 8009612:	2b01      	cmp	r3, #1
 8009614:	d106      	bne.n	8009624 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	68fa      	ldr	r2, [r7, #12]
 800961a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800961e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009622:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800962a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800962e:	d109      	bne.n	8009644 <USB_DriveVbus+0x64>
 8009630:	78fb      	ldrb	r3, [r7, #3]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d106      	bne.n	8009644 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	68fa      	ldr	r2, [r7, #12]
 800963a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800963e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009642:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009644:	2300      	movs	r3, #0
}
 8009646:	4618      	mov	r0, r3
 8009648:	3714      	adds	r7, #20
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr

08009652 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009652:	b480      	push	{r7}
 8009654:	b085      	sub	sp, #20
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800965e:	2300      	movs	r3, #0
 8009660:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	0c5b      	lsrs	r3, r3, #17
 8009670:	f003 0303 	and.w	r3, r3, #3
}
 8009674:	4618      	mov	r0, r3
 8009676:	3714      	adds	r7, #20
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8009680:	b480      	push	{r7}
 8009682:	b085      	sub	sp, #20
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009692:	689b      	ldr	r3, [r3, #8]
 8009694:	b29b      	uxth	r3, r3
}
 8009696:	4618      	mov	r0, r3
 8009698:	3714      	adds	r7, #20
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr
	...

080096a4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b088      	sub	sp, #32
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	4608      	mov	r0, r1
 80096ae:	4611      	mov	r1, r2
 80096b0:	461a      	mov	r2, r3
 80096b2:	4603      	mov	r3, r0
 80096b4:	70fb      	strb	r3, [r7, #3]
 80096b6:	460b      	mov	r3, r1
 80096b8:	70bb      	strb	r3, [r7, #2]
 80096ba:	4613      	mov	r3, r2
 80096bc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80096be:	2300      	movs	r3, #0
 80096c0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80096c6:	78fb      	ldrb	r3, [r7, #3]
 80096c8:	015a      	lsls	r2, r3, #5
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	4413      	add	r3, r2
 80096ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096d2:	461a      	mov	r2, r3
 80096d4:	f04f 33ff 	mov.w	r3, #4294967295
 80096d8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80096da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80096de:	2b03      	cmp	r3, #3
 80096e0:	d87e      	bhi.n	80097e0 <USB_HC_Init+0x13c>
 80096e2:	a201      	add	r2, pc, #4	; (adr r2, 80096e8 <USB_HC_Init+0x44>)
 80096e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e8:	080096f9 	.word	0x080096f9
 80096ec:	080097a3 	.word	0x080097a3
 80096f0:	080096f9 	.word	0x080096f9
 80096f4:	08009765 	.word	0x08009765
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80096f8:	78fb      	ldrb	r3, [r7, #3]
 80096fa:	015a      	lsls	r2, r3, #5
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	4413      	add	r3, r2
 8009700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009704:	461a      	mov	r2, r3
 8009706:	f240 439d 	movw	r3, #1181	; 0x49d
 800970a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800970c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009710:	2b00      	cmp	r3, #0
 8009712:	da10      	bge.n	8009736 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009714:	78fb      	ldrb	r3, [r7, #3]
 8009716:	015a      	lsls	r2, r3, #5
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	4413      	add	r3, r2
 800971c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	78fa      	ldrb	r2, [r7, #3]
 8009724:	0151      	lsls	r1, r2, #5
 8009726:	693a      	ldr	r2, [r7, #16]
 8009728:	440a      	add	r2, r1
 800972a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800972e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009732:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8009734:	e057      	b.n	80097e6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800973a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800973e:	2b00      	cmp	r3, #0
 8009740:	d051      	beq.n	80097e6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009742:	78fb      	ldrb	r3, [r7, #3]
 8009744:	015a      	lsls	r2, r3, #5
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	4413      	add	r3, r2
 800974a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	78fa      	ldrb	r2, [r7, #3]
 8009752:	0151      	lsls	r1, r2, #5
 8009754:	693a      	ldr	r2, [r7, #16]
 8009756:	440a      	add	r2, r1
 8009758:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800975c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009760:	60d3      	str	r3, [r2, #12]
      break;
 8009762:	e040      	b.n	80097e6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009764:	78fb      	ldrb	r3, [r7, #3]
 8009766:	015a      	lsls	r2, r3, #5
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	4413      	add	r3, r2
 800976c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009770:	461a      	mov	r2, r3
 8009772:	f240 639d 	movw	r3, #1693	; 0x69d
 8009776:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009778:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800977c:	2b00      	cmp	r3, #0
 800977e:	da34      	bge.n	80097ea <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009780:	78fb      	ldrb	r3, [r7, #3]
 8009782:	015a      	lsls	r2, r3, #5
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	4413      	add	r3, r2
 8009788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800978c:	68db      	ldr	r3, [r3, #12]
 800978e:	78fa      	ldrb	r2, [r7, #3]
 8009790:	0151      	lsls	r1, r2, #5
 8009792:	693a      	ldr	r2, [r7, #16]
 8009794:	440a      	add	r2, r1
 8009796:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800979a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800979e:	60d3      	str	r3, [r2, #12]
      }

      break;
 80097a0:	e023      	b.n	80097ea <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80097a2:	78fb      	ldrb	r3, [r7, #3]
 80097a4:	015a      	lsls	r2, r3, #5
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	4413      	add	r3, r2
 80097aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097ae:	461a      	mov	r2, r3
 80097b0:	f240 2325 	movw	r3, #549	; 0x225
 80097b4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80097b6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	da17      	bge.n	80097ee <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80097be:	78fb      	ldrb	r3, [r7, #3]
 80097c0:	015a      	lsls	r2, r3, #5
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	4413      	add	r3, r2
 80097c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	78fa      	ldrb	r2, [r7, #3]
 80097ce:	0151      	lsls	r1, r2, #5
 80097d0:	693a      	ldr	r2, [r7, #16]
 80097d2:	440a      	add	r2, r1
 80097d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80097d8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80097dc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80097de:	e006      	b.n	80097ee <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80097e0:	2301      	movs	r3, #1
 80097e2:	77fb      	strb	r3, [r7, #31]
      break;
 80097e4:	e004      	b.n	80097f0 <USB_HC_Init+0x14c>
      break;
 80097e6:	bf00      	nop
 80097e8:	e002      	b.n	80097f0 <USB_HC_Init+0x14c>
      break;
 80097ea:	bf00      	nop
 80097ec:	e000      	b.n	80097f0 <USB_HC_Init+0x14c>
      break;
 80097ee:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80097f0:	78fb      	ldrb	r3, [r7, #3]
 80097f2:	015a      	lsls	r2, r3, #5
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	4413      	add	r3, r2
 80097f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	78fa      	ldrb	r2, [r7, #3]
 8009800:	0151      	lsls	r1, r2, #5
 8009802:	693a      	ldr	r2, [r7, #16]
 8009804:	440a      	add	r2, r1
 8009806:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800980a:	f043 0302 	orr.w	r3, r3, #2
 800980e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009816:	699a      	ldr	r2, [r3, #24]
 8009818:	78fb      	ldrb	r3, [r7, #3]
 800981a:	f003 030f 	and.w	r3, r3, #15
 800981e:	2101      	movs	r1, #1
 8009820:	fa01 f303 	lsl.w	r3, r1, r3
 8009824:	6939      	ldr	r1, [r7, #16]
 8009826:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800982a:	4313      	orrs	r3, r2
 800982c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	699b      	ldr	r3, [r3, #24]
 8009832:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800983a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800983e:	2b00      	cmp	r3, #0
 8009840:	da03      	bge.n	800984a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009846:	61bb      	str	r3, [r7, #24]
 8009848:	e001      	b.n	800984e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800984a:	2300      	movs	r3, #0
 800984c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f7ff feff 	bl	8009652 <USB_GetHostSpeed>
 8009854:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009856:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800985a:	2b02      	cmp	r3, #2
 800985c:	d106      	bne.n	800986c <USB_HC_Init+0x1c8>
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2b02      	cmp	r3, #2
 8009862:	d003      	beq.n	800986c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009864:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009868:	617b      	str	r3, [r7, #20]
 800986a:	e001      	b.n	8009870 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800986c:	2300      	movs	r3, #0
 800986e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009870:	787b      	ldrb	r3, [r7, #1]
 8009872:	059b      	lsls	r3, r3, #22
 8009874:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009878:	78bb      	ldrb	r3, [r7, #2]
 800987a:	02db      	lsls	r3, r3, #11
 800987c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009880:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009882:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009886:	049b      	lsls	r3, r3, #18
 8009888:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800988c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800988e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009890:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009894:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009896:	69bb      	ldr	r3, [r7, #24]
 8009898:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800989a:	78fb      	ldrb	r3, [r7, #3]
 800989c:	0159      	lsls	r1, r3, #5
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	440b      	add	r3, r1
 80098a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098a6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80098ac:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80098ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80098b2:	2b03      	cmp	r3, #3
 80098b4:	d003      	beq.n	80098be <USB_HC_Init+0x21a>
 80098b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d10f      	bne.n	80098de <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80098be:	78fb      	ldrb	r3, [r7, #3]
 80098c0:	015a      	lsls	r2, r3, #5
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	4413      	add	r3, r2
 80098c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	78fa      	ldrb	r2, [r7, #3]
 80098ce:	0151      	lsls	r1, r2, #5
 80098d0:	693a      	ldr	r2, [r7, #16]
 80098d2:	440a      	add	r2, r1
 80098d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80098dc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80098de:	7ffb      	ldrb	r3, [r7, #31]
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3720      	adds	r7, #32
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b08c      	sub	sp, #48	; 0x30
 80098ec:	af02      	add	r7, sp, #8
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	4613      	mov	r3, r2
 80098f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	785b      	ldrb	r3, [r3, #1]
 80098fe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009900:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009904:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800990a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800990e:	2b00      	cmp	r3, #0
 8009910:	d02d      	beq.n	800996e <USB_HC_StartXfer+0x86>
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	791b      	ldrb	r3, [r3, #4]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d129      	bne.n	800996e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800991a:	79fb      	ldrb	r3, [r7, #7]
 800991c:	2b01      	cmp	r3, #1
 800991e:	d117      	bne.n	8009950 <USB_HC_StartXfer+0x68>
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	79db      	ldrb	r3, [r3, #7]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d003      	beq.n	8009930 <USB_HC_StartXfer+0x48>
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	79db      	ldrb	r3, [r3, #7]
 800992c:	2b02      	cmp	r3, #2
 800992e:	d10f      	bne.n	8009950 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009930:	69fb      	ldr	r3, [r7, #28]
 8009932:	015a      	lsls	r2, r3, #5
 8009934:	6a3b      	ldr	r3, [r7, #32]
 8009936:	4413      	add	r3, r2
 8009938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800993c:	68db      	ldr	r3, [r3, #12]
 800993e:	69fa      	ldr	r2, [r7, #28]
 8009940:	0151      	lsls	r1, r2, #5
 8009942:	6a3a      	ldr	r2, [r7, #32]
 8009944:	440a      	add	r2, r1
 8009946:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800994a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800994e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8009950:	79fb      	ldrb	r3, [r7, #7]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d10b      	bne.n	800996e <USB_HC_StartXfer+0x86>
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	795b      	ldrb	r3, [r3, #5]
 800995a:	2b01      	cmp	r3, #1
 800995c:	d107      	bne.n	800996e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	785b      	ldrb	r3, [r3, #1]
 8009962:	4619      	mov	r1, r3
 8009964:	68f8      	ldr	r0, [r7, #12]
 8009966:	f000 fa0f 	bl	8009d88 <USB_DoPing>
      return HAL_OK;
 800996a:	2300      	movs	r3, #0
 800996c:	e0f8      	b.n	8009b60 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	695b      	ldr	r3, [r3, #20]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d018      	beq.n	80099a8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	695b      	ldr	r3, [r3, #20]
 800997a:	68ba      	ldr	r2, [r7, #8]
 800997c:	8912      	ldrh	r2, [r2, #8]
 800997e:	4413      	add	r3, r2
 8009980:	3b01      	subs	r3, #1
 8009982:	68ba      	ldr	r2, [r7, #8]
 8009984:	8912      	ldrh	r2, [r2, #8]
 8009986:	fbb3 f3f2 	udiv	r3, r3, r2
 800998a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800998c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800998e:	8b7b      	ldrh	r3, [r7, #26]
 8009990:	429a      	cmp	r2, r3
 8009992:	d90b      	bls.n	80099ac <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8009994:	8b7b      	ldrh	r3, [r7, #26]
 8009996:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009998:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800999a:	68ba      	ldr	r2, [r7, #8]
 800999c:	8912      	ldrh	r2, [r2, #8]
 800999e:	fb03 f202 	mul.w	r2, r3, r2
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	611a      	str	r2, [r3, #16]
 80099a6:	e001      	b.n	80099ac <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80099a8:	2301      	movs	r3, #1
 80099aa:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	78db      	ldrb	r3, [r3, #3]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d007      	beq.n	80099c4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80099b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80099b6:	68ba      	ldr	r2, [r7, #8]
 80099b8:	8912      	ldrh	r2, [r2, #8]
 80099ba:	fb03 f202 	mul.w	r2, r3, r2
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	611a      	str	r2, [r3, #16]
 80099c2:	e003      	b.n	80099cc <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	695a      	ldr	r2, [r3, #20]
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	691b      	ldr	r3, [r3, #16]
 80099d0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80099d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80099d6:	04d9      	lsls	r1, r3, #19
 80099d8:	4b63      	ldr	r3, [pc, #396]	; (8009b68 <USB_HC_StartXfer+0x280>)
 80099da:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80099dc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	7a9b      	ldrb	r3, [r3, #10]
 80099e2:	075b      	lsls	r3, r3, #29
 80099e4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80099e8:	69f9      	ldr	r1, [r7, #28]
 80099ea:	0148      	lsls	r0, r1, #5
 80099ec:	6a39      	ldr	r1, [r7, #32]
 80099ee:	4401      	add	r1, r0
 80099f0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80099f4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80099f6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80099f8:	79fb      	ldrb	r3, [r7, #7]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d009      	beq.n	8009a12 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	68d9      	ldr	r1, [r3, #12]
 8009a02:	69fb      	ldr	r3, [r7, #28]
 8009a04:	015a      	lsls	r2, r3, #5
 8009a06:	6a3b      	ldr	r3, [r7, #32]
 8009a08:	4413      	add	r3, r2
 8009a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a0e:	460a      	mov	r2, r1
 8009a10:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009a12:	6a3b      	ldr	r3, [r7, #32]
 8009a14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	f003 0301 	and.w	r3, r3, #1
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	bf0c      	ite	eq
 8009a22:	2301      	moveq	r3, #1
 8009a24:	2300      	movne	r3, #0
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009a2a:	69fb      	ldr	r3, [r7, #28]
 8009a2c:	015a      	lsls	r2, r3, #5
 8009a2e:	6a3b      	ldr	r3, [r7, #32]
 8009a30:	4413      	add	r3, r2
 8009a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	69fa      	ldr	r2, [r7, #28]
 8009a3a:	0151      	lsls	r1, r2, #5
 8009a3c:	6a3a      	ldr	r2, [r7, #32]
 8009a3e:	440a      	add	r2, r1
 8009a40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a44:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009a48:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009a4a:	69fb      	ldr	r3, [r7, #28]
 8009a4c:	015a      	lsls	r2, r3, #5
 8009a4e:	6a3b      	ldr	r3, [r7, #32]
 8009a50:	4413      	add	r3, r2
 8009a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a56:	681a      	ldr	r2, [r3, #0]
 8009a58:	7e7b      	ldrb	r3, [r7, #25]
 8009a5a:	075b      	lsls	r3, r3, #29
 8009a5c:	69f9      	ldr	r1, [r7, #28]
 8009a5e:	0148      	lsls	r0, r1, #5
 8009a60:	6a39      	ldr	r1, [r7, #32]
 8009a62:	4401      	add	r1, r0
 8009a64:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009a68:	4313      	orrs	r3, r2
 8009a6a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009a6c:	69fb      	ldr	r3, [r7, #28]
 8009a6e:	015a      	lsls	r2, r3, #5
 8009a70:	6a3b      	ldr	r3, [r7, #32]
 8009a72:	4413      	add	r3, r2
 8009a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009a82:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	78db      	ldrb	r3, [r3, #3]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d004      	beq.n	8009a96 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a92:	613b      	str	r3, [r7, #16]
 8009a94:	e003      	b.n	8009a9e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009a9c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009aa4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009aa6:	69fb      	ldr	r3, [r7, #28]
 8009aa8:	015a      	lsls	r2, r3, #5
 8009aaa:	6a3b      	ldr	r3, [r7, #32]
 8009aac:	4413      	add	r3, r2
 8009aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009ab8:	79fb      	ldrb	r3, [r7, #7]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d001      	beq.n	8009ac2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	e04e      	b.n	8009b60 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	78db      	ldrb	r3, [r3, #3]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d149      	bne.n	8009b5e <USB_HC_StartXfer+0x276>
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	695b      	ldr	r3, [r3, #20]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d045      	beq.n	8009b5e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	79db      	ldrb	r3, [r3, #7]
 8009ad6:	2b03      	cmp	r3, #3
 8009ad8:	d830      	bhi.n	8009b3c <USB_HC_StartXfer+0x254>
 8009ada:	a201      	add	r2, pc, #4	; (adr r2, 8009ae0 <USB_HC_StartXfer+0x1f8>)
 8009adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae0:	08009af1 	.word	0x08009af1
 8009ae4:	08009b15 	.word	0x08009b15
 8009ae8:	08009af1 	.word	0x08009af1
 8009aec:	08009b15 	.word	0x08009b15
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	695b      	ldr	r3, [r3, #20]
 8009af4:	3303      	adds	r3, #3
 8009af6:	089b      	lsrs	r3, r3, #2
 8009af8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009afa:	8afa      	ldrh	r2, [r7, #22]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d91c      	bls.n	8009b40 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	699b      	ldr	r3, [r3, #24]
 8009b0a:	f043 0220 	orr.w	r2, r3, #32
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	619a      	str	r2, [r3, #24]
        }
        break;
 8009b12:	e015      	b.n	8009b40 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	695b      	ldr	r3, [r3, #20]
 8009b18:	3303      	adds	r3, #3
 8009b1a:	089b      	lsrs	r3, r3, #2
 8009b1c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009b1e:	8afa      	ldrh	r2, [r7, #22]
 8009b20:	6a3b      	ldr	r3, [r7, #32]
 8009b22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b26:	691b      	ldr	r3, [r3, #16]
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d90a      	bls.n	8009b44 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	699b      	ldr	r3, [r3, #24]
 8009b32:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	619a      	str	r2, [r3, #24]
        }
        break;
 8009b3a:	e003      	b.n	8009b44 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009b3c:	bf00      	nop
 8009b3e:	e002      	b.n	8009b46 <USB_HC_StartXfer+0x25e>
        break;
 8009b40:	bf00      	nop
 8009b42:	e000      	b.n	8009b46 <USB_HC_StartXfer+0x25e>
        break;
 8009b44:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	68d9      	ldr	r1, [r3, #12]
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	785a      	ldrb	r2, [r3, #1]
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	695b      	ldr	r3, [r3, #20]
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	2000      	movs	r0, #0
 8009b56:	9000      	str	r0, [sp, #0]
 8009b58:	68f8      	ldr	r0, [r7, #12]
 8009b5a:	f7ff f901 	bl	8008d60 <USB_WritePacket>
  }

  return HAL_OK;
 8009b5e:	2300      	movs	r3, #0
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3728      	adds	r7, #40	; 0x28
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	1ff80000 	.word	0x1ff80000

08009b6c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b085      	sub	sp, #20
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b7e:	695b      	ldr	r3, [r3, #20]
 8009b80:	b29b      	uxth	r3, r3
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3714      	adds	r7, #20
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr

08009b8e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009b8e:	b480      	push	{r7}
 8009b90:	b089      	sub	sp, #36	; 0x24
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	6078      	str	r0, [r7, #4]
 8009b96:	460b      	mov	r3, r1
 8009b98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8009b9e:	78fb      	ldrb	r3, [r7, #3]
 8009ba0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009ba6:	69bb      	ldr	r3, [r7, #24]
 8009ba8:	015a      	lsls	r2, r3, #5
 8009baa:	69fb      	ldr	r3, [r7, #28]
 8009bac:	4413      	add	r3, r2
 8009bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	0c9b      	lsrs	r3, r3, #18
 8009bb6:	f003 0303 	and.w	r3, r3, #3
 8009bba:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009bbc:	69bb      	ldr	r3, [r7, #24]
 8009bbe:	015a      	lsls	r2, r3, #5
 8009bc0:	69fb      	ldr	r3, [r7, #28]
 8009bc2:	4413      	add	r3, r2
 8009bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	0fdb      	lsrs	r3, r3, #31
 8009bcc:	f003 0301 	and.w	r3, r3, #1
 8009bd0:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	689b      	ldr	r3, [r3, #8]
 8009bd6:	f003 0320 	and.w	r3, r3, #32
 8009bda:	2b20      	cmp	r3, #32
 8009bdc:	d104      	bne.n	8009be8 <USB_HC_Halt+0x5a>
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d101      	bne.n	8009be8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009be4:	2300      	movs	r3, #0
 8009be6:	e0c8      	b.n	8009d7a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d002      	beq.n	8009bf4 <USB_HC_Halt+0x66>
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	2b02      	cmp	r3, #2
 8009bf2:	d163      	bne.n	8009cbc <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009bf4:	69bb      	ldr	r3, [r7, #24]
 8009bf6:	015a      	lsls	r2, r3, #5
 8009bf8:	69fb      	ldr	r3, [r7, #28]
 8009bfa:	4413      	add	r3, r2
 8009bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	69ba      	ldr	r2, [r7, #24]
 8009c04:	0151      	lsls	r1, r2, #5
 8009c06:	69fa      	ldr	r2, [r7, #28]
 8009c08:	440a      	add	r2, r1
 8009c0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c12:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	689b      	ldr	r3, [r3, #8]
 8009c18:	f003 0320 	and.w	r3, r3, #32
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	f040 80ab 	bne.w	8009d78 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c26:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d133      	bne.n	8009c96 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009c2e:	69bb      	ldr	r3, [r7, #24]
 8009c30:	015a      	lsls	r2, r3, #5
 8009c32:	69fb      	ldr	r3, [r7, #28]
 8009c34:	4413      	add	r3, r2
 8009c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	69ba      	ldr	r2, [r7, #24]
 8009c3e:	0151      	lsls	r1, r2, #5
 8009c40:	69fa      	ldr	r2, [r7, #28]
 8009c42:	440a      	add	r2, r1
 8009c44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c4c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009c4e:	69bb      	ldr	r3, [r7, #24]
 8009c50:	015a      	lsls	r2, r3, #5
 8009c52:	69fb      	ldr	r3, [r7, #28]
 8009c54:	4413      	add	r3, r2
 8009c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	69ba      	ldr	r2, [r7, #24]
 8009c5e:	0151      	lsls	r1, r2, #5
 8009c60:	69fa      	ldr	r2, [r7, #28]
 8009c62:	440a      	add	r2, r1
 8009c64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009c6c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	3301      	adds	r3, #1
 8009c72:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009c7a:	d81d      	bhi.n	8009cb8 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009c7c:	69bb      	ldr	r3, [r7, #24]
 8009c7e:	015a      	lsls	r2, r3, #5
 8009c80:	69fb      	ldr	r3, [r7, #28]
 8009c82:	4413      	add	r3, r2
 8009c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c92:	d0ec      	beq.n	8009c6e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009c94:	e070      	b.n	8009d78 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009c96:	69bb      	ldr	r3, [r7, #24]
 8009c98:	015a      	lsls	r2, r3, #5
 8009c9a:	69fb      	ldr	r3, [r7, #28]
 8009c9c:	4413      	add	r3, r2
 8009c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	69ba      	ldr	r2, [r7, #24]
 8009ca6:	0151      	lsls	r1, r2, #5
 8009ca8:	69fa      	ldr	r2, [r7, #28]
 8009caa:	440a      	add	r2, r1
 8009cac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009cb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009cb4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009cb6:	e05f      	b.n	8009d78 <USB_HC_Halt+0x1ea>
            break;
 8009cb8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009cba:	e05d      	b.n	8009d78 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009cbc:	69bb      	ldr	r3, [r7, #24]
 8009cbe:	015a      	lsls	r2, r3, #5
 8009cc0:	69fb      	ldr	r3, [r7, #28]
 8009cc2:	4413      	add	r3, r2
 8009cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	69ba      	ldr	r2, [r7, #24]
 8009ccc:	0151      	lsls	r1, r2, #5
 8009cce:	69fa      	ldr	r2, [r7, #28]
 8009cd0:	440a      	add	r2, r1
 8009cd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009cd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009cda:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009cdc:	69fb      	ldr	r3, [r7, #28]
 8009cde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ce2:	691b      	ldr	r3, [r3, #16]
 8009ce4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d133      	bne.n	8009d54 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009cec:	69bb      	ldr	r3, [r7, #24]
 8009cee:	015a      	lsls	r2, r3, #5
 8009cf0:	69fb      	ldr	r3, [r7, #28]
 8009cf2:	4413      	add	r3, r2
 8009cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	69ba      	ldr	r2, [r7, #24]
 8009cfc:	0151      	lsls	r1, r2, #5
 8009cfe:	69fa      	ldr	r2, [r7, #28]
 8009d00:	440a      	add	r2, r1
 8009d02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d0a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009d0c:	69bb      	ldr	r3, [r7, #24]
 8009d0e:	015a      	lsls	r2, r3, #5
 8009d10:	69fb      	ldr	r3, [r7, #28]
 8009d12:	4413      	add	r3, r2
 8009d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	69ba      	ldr	r2, [r7, #24]
 8009d1c:	0151      	lsls	r1, r2, #5
 8009d1e:	69fa      	ldr	r2, [r7, #28]
 8009d20:	440a      	add	r2, r1
 8009d22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009d2a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	3301      	adds	r3, #1
 8009d30:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009d38:	d81d      	bhi.n	8009d76 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009d3a:	69bb      	ldr	r3, [r7, #24]
 8009d3c:	015a      	lsls	r2, r3, #5
 8009d3e:	69fb      	ldr	r3, [r7, #28]
 8009d40:	4413      	add	r3, r2
 8009d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d50:	d0ec      	beq.n	8009d2c <USB_HC_Halt+0x19e>
 8009d52:	e011      	b.n	8009d78 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009d54:	69bb      	ldr	r3, [r7, #24]
 8009d56:	015a      	lsls	r2, r3, #5
 8009d58:	69fb      	ldr	r3, [r7, #28]
 8009d5a:	4413      	add	r3, r2
 8009d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	69ba      	ldr	r2, [r7, #24]
 8009d64:	0151      	lsls	r1, r2, #5
 8009d66:	69fa      	ldr	r2, [r7, #28]
 8009d68:	440a      	add	r2, r1
 8009d6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009d72:	6013      	str	r3, [r2, #0]
 8009d74:	e000      	b.n	8009d78 <USB_HC_Halt+0x1ea>
          break;
 8009d76:	bf00      	nop
    }
  }

  return HAL_OK;
 8009d78:	2300      	movs	r3, #0
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3724      	adds	r7, #36	; 0x24
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr
	...

08009d88 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b087      	sub	sp, #28
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	460b      	mov	r3, r1
 8009d92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009d98:	78fb      	ldrb	r3, [r7, #3]
 8009d9a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	04da      	lsls	r2, r3, #19
 8009da4:	4b15      	ldr	r3, [pc, #84]	; (8009dfc <USB_DoPing+0x74>)
 8009da6:	4013      	ands	r3, r2
 8009da8:	693a      	ldr	r2, [r7, #16]
 8009daa:	0151      	lsls	r1, r2, #5
 8009dac:	697a      	ldr	r2, [r7, #20]
 8009dae:	440a      	add	r2, r1
 8009db0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009db4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009db8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	015a      	lsls	r2, r3, #5
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	4413      	add	r3, r2
 8009dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009dd0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009dd8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	015a      	lsls	r2, r3, #5
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	4413      	add	r3, r2
 8009de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009de6:	461a      	mov	r2, r3
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009dec:	2300      	movs	r3, #0
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	371c      	adds	r7, #28
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr
 8009dfa:	bf00      	nop
 8009dfc:	1ff80000 	.word	0x1ff80000

08009e00 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b088      	sub	sp, #32
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009e10:	2300      	movs	r3, #0
 8009e12:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f7fd ff98 	bl	8007d4a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009e1a:	2110      	movs	r1, #16
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f7fe f94f 	bl	80080c0 <USB_FlushTxFifo>
 8009e22:	4603      	mov	r3, r0
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d001      	beq.n	8009e2c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009e28:	2301      	movs	r3, #1
 8009e2a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f7fe f97b 	bl	8008128 <USB_FlushRxFifo>
 8009e32:	4603      	mov	r3, r0
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d001      	beq.n	8009e3c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009e38:	2301      	movs	r3, #1
 8009e3a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	61bb      	str	r3, [r7, #24]
 8009e40:	e01f      	b.n	8009e82 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8009e42:	69bb      	ldr	r3, [r7, #24]
 8009e44:	015a      	lsls	r2, r3, #5
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	4413      	add	r3, r2
 8009e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009e58:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e60:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009e68:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009e6a:	69bb      	ldr	r3, [r7, #24]
 8009e6c:	015a      	lsls	r2, r3, #5
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	4413      	add	r3, r2
 8009e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e76:	461a      	mov	r2, r3
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009e7c:	69bb      	ldr	r3, [r7, #24]
 8009e7e:	3301      	adds	r3, #1
 8009e80:	61bb      	str	r3, [r7, #24]
 8009e82:	69bb      	ldr	r3, [r7, #24]
 8009e84:	2b0f      	cmp	r3, #15
 8009e86:	d9dc      	bls.n	8009e42 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009e88:	2300      	movs	r3, #0
 8009e8a:	61bb      	str	r3, [r7, #24]
 8009e8c:	e034      	b.n	8009ef8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8009e8e:	69bb      	ldr	r3, [r7, #24]
 8009e90:	015a      	lsls	r2, r3, #5
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	4413      	add	r3, r2
 8009e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ea4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009eac:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009eb4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009eb6:	69bb      	ldr	r3, [r7, #24]
 8009eb8:	015a      	lsls	r2, r3, #5
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	4413      	add	r3, r2
 8009ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	3301      	adds	r3, #1
 8009ecc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ed4:	d80c      	bhi.n	8009ef0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009ed6:	69bb      	ldr	r3, [r7, #24]
 8009ed8:	015a      	lsls	r2, r3, #5
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	4413      	add	r3, r2
 8009ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ee8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009eec:	d0ec      	beq.n	8009ec8 <USB_StopHost+0xc8>
 8009eee:	e000      	b.n	8009ef2 <USB_StopHost+0xf2>
        break;
 8009ef0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009ef2:	69bb      	ldr	r3, [r7, #24]
 8009ef4:	3301      	adds	r3, #1
 8009ef6:	61bb      	str	r3, [r7, #24]
 8009ef8:	69bb      	ldr	r3, [r7, #24]
 8009efa:	2b0f      	cmp	r3, #15
 8009efc:	d9c7      	bls.n	8009e8e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f04:	461a      	mov	r2, r3
 8009f06:	f04f 33ff 	mov.w	r3, #4294967295
 8009f0a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8009f12:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f7fd ff07 	bl	8007d28 <USB_EnableGlobalInt>

  return ret;
 8009f1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3720      	adds	r7, #32
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	460b      	mov	r3, r1
 8009f2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8009f30:	2010      	movs	r0, #16
 8009f32:	f007 f987 	bl	8011244 <USBD_static_malloc>
 8009f36:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d109      	bne.n	8009f52 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	32b0      	adds	r2, #176	; 0xb0
 8009f48:	2100      	movs	r1, #0
 8009f4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009f4e:	2302      	movs	r3, #2
 8009f50:	e048      	b.n	8009fe4 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	32b0      	adds	r2, #176	; 0xb0
 8009f5c:	68f9      	ldr	r1, [r7, #12]
 8009f5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	32b0      	adds	r2, #176	; 0xb0
 8009f6c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	7c1b      	ldrb	r3, [r3, #16]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d10d      	bne.n	8009f9a <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8009f7e:	4b1b      	ldr	r3, [pc, #108]	; (8009fec <USBD_HID_Init+0xc8>)
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	f003 020f 	and.w	r2, r3, #15
 8009f86:	6879      	ldr	r1, [r7, #4]
 8009f88:	4613      	mov	r3, r2
 8009f8a:	009b      	lsls	r3, r3, #2
 8009f8c:	4413      	add	r3, r2
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	440b      	add	r3, r1
 8009f92:	3326      	adds	r3, #38	; 0x26
 8009f94:	2207      	movs	r2, #7
 8009f96:	801a      	strh	r2, [r3, #0]
 8009f98:	e00c      	b.n	8009fb4 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8009f9a:	4b14      	ldr	r3, [pc, #80]	; (8009fec <USBD_HID_Init+0xc8>)
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	f003 020f 	and.w	r2, r3, #15
 8009fa2:	6879      	ldr	r1, [r7, #4]
 8009fa4:	4613      	mov	r3, r2
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	4413      	add	r3, r2
 8009faa:	009b      	lsls	r3, r3, #2
 8009fac:	440b      	add	r3, r1
 8009fae:	3326      	adds	r3, #38	; 0x26
 8009fb0:	220a      	movs	r2, #10
 8009fb2:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8009fb4:	4b0d      	ldr	r3, [pc, #52]	; (8009fec <USBD_HID_Init+0xc8>)
 8009fb6:	7819      	ldrb	r1, [r3, #0]
 8009fb8:	2304      	movs	r3, #4
 8009fba:	2203      	movs	r2, #3
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f006 ffe2 	bl	8010f86 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8009fc2:	4b0a      	ldr	r3, [pc, #40]	; (8009fec <USBD_HID_Init+0xc8>)
 8009fc4:	781b      	ldrb	r3, [r3, #0]
 8009fc6:	f003 020f 	and.w	r2, r3, #15
 8009fca:	6879      	ldr	r1, [r7, #4]
 8009fcc:	4613      	mov	r3, r2
 8009fce:	009b      	lsls	r3, r3, #2
 8009fd0:	4413      	add	r3, r2
 8009fd2:	009b      	lsls	r3, r3, #2
 8009fd4:	440b      	add	r3, r1
 8009fd6:	3324      	adds	r3, #36	; 0x24
 8009fd8:	2201      	movs	r2, #1
 8009fda:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_Device_IDLE;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8009fe2:	2300      	movs	r3, #0
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3710      	adds	r7, #16
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}
 8009fec:	200000c7 	.word	0x200000c7

08009ff0 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b082      	sub	sp, #8
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8009ffc:	4b1f      	ldr	r3, [pc, #124]	; (800a07c <USBD_HID_DeInit+0x8c>)
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	4619      	mov	r1, r3
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f006 ffe5 	bl	8010fd2 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 800a008:	4b1c      	ldr	r3, [pc, #112]	; (800a07c <USBD_HID_DeInit+0x8c>)
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	f003 020f 	and.w	r2, r3, #15
 800a010:	6879      	ldr	r1, [r7, #4]
 800a012:	4613      	mov	r3, r2
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	4413      	add	r3, r2
 800a018:	009b      	lsls	r3, r3, #2
 800a01a:	440b      	add	r3, r1
 800a01c:	3324      	adds	r3, #36	; 0x24
 800a01e:	2200      	movs	r2, #0
 800a020:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 800a022:	4b16      	ldr	r3, [pc, #88]	; (800a07c <USBD_HID_DeInit+0x8c>)
 800a024:	781b      	ldrb	r3, [r3, #0]
 800a026:	f003 020f 	and.w	r2, r3, #15
 800a02a:	6879      	ldr	r1, [r7, #4]
 800a02c:	4613      	mov	r3, r2
 800a02e:	009b      	lsls	r3, r3, #2
 800a030:	4413      	add	r3, r2
 800a032:	009b      	lsls	r3, r3, #2
 800a034:	440b      	add	r3, r1
 800a036:	3326      	adds	r3, #38	; 0x26
 800a038:	2200      	movs	r2, #0
 800a03a:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	32b0      	adds	r2, #176	; 0xb0
 800a046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d011      	beq.n	800a072 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	32b0      	adds	r2, #176	; 0xb0
 800a058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a05c:	4618      	mov	r0, r3
 800a05e:	f007 f8ff 	bl	8011260 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	32b0      	adds	r2, #176	; 0xb0
 800a06c:	2100      	movs	r1, #0
 800a06e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 800a072:	2300      	movs	r3, #0
}
 800a074:	4618      	mov	r0, r3
 800a076:	3708      	adds	r7, #8
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}
 800a07c:	200000c7 	.word	0x200000c7

0800a080 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b086      	sub	sp, #24
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	32b0      	adds	r2, #176	; 0xb0
 800a094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a098:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800a09a:	2300      	movs	r3, #0
 800a09c:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d101      	bne.n	800a0ac <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800a0a8:	2303      	movs	r3, #3
 800a0aa:	e0e8      	b.n	800a27e <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d046      	beq.n	800a146 <USBD_HID_Setup+0xc6>
 800a0b8:	2b20      	cmp	r3, #32
 800a0ba:	f040 80d8 	bne.w	800a26e <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	785b      	ldrb	r3, [r3, #1]
 800a0c2:	3b02      	subs	r3, #2
 800a0c4:	2b09      	cmp	r3, #9
 800a0c6:	d836      	bhi.n	800a136 <USBD_HID_Setup+0xb6>
 800a0c8:	a201      	add	r2, pc, #4	; (adr r2, 800a0d0 <USBD_HID_Setup+0x50>)
 800a0ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ce:	bf00      	nop
 800a0d0:	0800a127 	.word	0x0800a127
 800a0d4:	0800a107 	.word	0x0800a107
 800a0d8:	0800a137 	.word	0x0800a137
 800a0dc:	0800a137 	.word	0x0800a137
 800a0e0:	0800a137 	.word	0x0800a137
 800a0e4:	0800a137 	.word	0x0800a137
 800a0e8:	0800a137 	.word	0x0800a137
 800a0ec:	0800a137 	.word	0x0800a137
 800a0f0:	0800a115 	.word	0x0800a115
 800a0f4:	0800a0f9 	.word	0x0800a0f9
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	885b      	ldrh	r3, [r3, #2]
 800a0fc:	b2db      	uxtb	r3, r3
 800a0fe:	461a      	mov	r2, r3
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	601a      	str	r2, [r3, #0]
          break;
 800a104:	e01e      	b.n	800a144 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	2201      	movs	r2, #1
 800a10a:	4619      	mov	r1, r3
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f001 fbff 	bl	800b910 <USBD_CtlSendData>
          break;
 800a112:	e017      	b.n	800a144 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	885b      	ldrh	r3, [r3, #2]
 800a118:	0a1b      	lsrs	r3, r3, #8
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	461a      	mov	r2, r3
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	605a      	str	r2, [r3, #4]
          break;
 800a124:	e00e      	b.n	800a144 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	3304      	adds	r3, #4
 800a12a:	2201      	movs	r2, #1
 800a12c:	4619      	mov	r1, r3
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f001 fbee 	bl	800b910 <USBD_CtlSendData>
          break;
 800a134:	e006      	b.n	800a144 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a136:	6839      	ldr	r1, [r7, #0]
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f001 fb78 	bl	800b82e <USBD_CtlError>
          ret = USBD_FAIL;
 800a13e:	2303      	movs	r3, #3
 800a140:	75fb      	strb	r3, [r7, #23]
          break;
 800a142:	bf00      	nop
      }
      break;
 800a144:	e09a      	b.n	800a27c <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	785b      	ldrb	r3, [r3, #1]
 800a14a:	2b0b      	cmp	r3, #11
 800a14c:	f200 8086 	bhi.w	800a25c <USBD_HID_Setup+0x1dc>
 800a150:	a201      	add	r2, pc, #4	; (adr r2, 800a158 <USBD_HID_Setup+0xd8>)
 800a152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a156:	bf00      	nop
 800a158:	0800a189 	.word	0x0800a189
 800a15c:	0800a26b 	.word	0x0800a26b
 800a160:	0800a25d 	.word	0x0800a25d
 800a164:	0800a25d 	.word	0x0800a25d
 800a168:	0800a25d 	.word	0x0800a25d
 800a16c:	0800a25d 	.word	0x0800a25d
 800a170:	0800a1b3 	.word	0x0800a1b3
 800a174:	0800a25d 	.word	0x0800a25d
 800a178:	0800a25d 	.word	0x0800a25d
 800a17c:	0800a25d 	.word	0x0800a25d
 800a180:	0800a20b 	.word	0x0800a20b
 800a184:	0800a235 	.word	0x0800a235
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a18e:	b2db      	uxtb	r3, r3
 800a190:	2b03      	cmp	r3, #3
 800a192:	d107      	bne.n	800a1a4 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a194:	f107 030a 	add.w	r3, r7, #10
 800a198:	2202      	movs	r2, #2
 800a19a:	4619      	mov	r1, r3
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f001 fbb7 	bl	800b910 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a1a2:	e063      	b.n	800a26c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800a1a4:	6839      	ldr	r1, [r7, #0]
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f001 fb41 	bl	800b82e <USBD_CtlError>
            ret = USBD_FAIL;
 800a1ac:	2303      	movs	r3, #3
 800a1ae:	75fb      	strb	r3, [r7, #23]
          break;
 800a1b0:	e05c      	b.n	800a26c <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	885b      	ldrh	r3, [r3, #2]
 800a1b6:	0a1b      	lsrs	r3, r3, #8
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	2b22      	cmp	r3, #34	; 0x22
 800a1bc:	d108      	bne.n	800a1d0 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	88db      	ldrh	r3, [r3, #6]
 800a1c2:	2b3f      	cmp	r3, #63	; 0x3f
 800a1c4:	bf28      	it	cs
 800a1c6:	233f      	movcs	r3, #63	; 0x3f
 800a1c8:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800a1ca:	4b2f      	ldr	r3, [pc, #188]	; (800a288 <USBD_HID_Setup+0x208>)
 800a1cc:	613b      	str	r3, [r7, #16]
 800a1ce:	e015      	b.n	800a1fc <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	885b      	ldrh	r3, [r3, #2]
 800a1d4:	0a1b      	lsrs	r3, r3, #8
 800a1d6:	b29b      	uxth	r3, r3
 800a1d8:	2b21      	cmp	r3, #33	; 0x21
 800a1da:	d108      	bne.n	800a1ee <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 800a1dc:	4b2b      	ldr	r3, [pc, #172]	; (800a28c <USBD_HID_Setup+0x20c>)
 800a1de:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	88db      	ldrh	r3, [r3, #6]
 800a1e4:	2b09      	cmp	r3, #9
 800a1e6:	bf28      	it	cs
 800a1e8:	2309      	movcs	r3, #9
 800a1ea:	82bb      	strh	r3, [r7, #20]
 800a1ec:	e006      	b.n	800a1fc <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800a1ee:	6839      	ldr	r1, [r7, #0]
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f001 fb1c 	bl	800b82e <USBD_CtlError>
            ret = USBD_FAIL;
 800a1f6:	2303      	movs	r3, #3
 800a1f8:	75fb      	strb	r3, [r7, #23]
            break;
 800a1fa:	e037      	b.n	800a26c <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800a1fc:	8abb      	ldrh	r3, [r7, #20]
 800a1fe:	461a      	mov	r2, r3
 800a200:	6939      	ldr	r1, [r7, #16]
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f001 fb84 	bl	800b910 <USBD_CtlSendData>
          break;
 800a208:	e030      	b.n	800a26c <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a210:	b2db      	uxtb	r3, r3
 800a212:	2b03      	cmp	r3, #3
 800a214:	d107      	bne.n	800a226 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	3308      	adds	r3, #8
 800a21a:	2201      	movs	r2, #1
 800a21c:	4619      	mov	r1, r3
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f001 fb76 	bl	800b910 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a224:	e022      	b.n	800a26c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800a226:	6839      	ldr	r1, [r7, #0]
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f001 fb00 	bl	800b82e <USBD_CtlError>
            ret = USBD_FAIL;
 800a22e:	2303      	movs	r3, #3
 800a230:	75fb      	strb	r3, [r7, #23]
          break;
 800a232:	e01b      	b.n	800a26c <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a23a:	b2db      	uxtb	r3, r3
 800a23c:	2b03      	cmp	r3, #3
 800a23e:	d106      	bne.n	800a24e <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	885b      	ldrh	r3, [r3, #2]
 800a244:	b2db      	uxtb	r3, r3
 800a246:	461a      	mov	r2, r3
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a24c:	e00e      	b.n	800a26c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800a24e:	6839      	ldr	r1, [r7, #0]
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f001 faec 	bl	800b82e <USBD_CtlError>
            ret = USBD_FAIL;
 800a256:	2303      	movs	r3, #3
 800a258:	75fb      	strb	r3, [r7, #23]
          break;
 800a25a:	e007      	b.n	800a26c <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a25c:	6839      	ldr	r1, [r7, #0]
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f001 fae5 	bl	800b82e <USBD_CtlError>
          ret = USBD_FAIL;
 800a264:	2303      	movs	r3, #3
 800a266:	75fb      	strb	r3, [r7, #23]
          break;
 800a268:	e000      	b.n	800a26c <USBD_HID_Setup+0x1ec>
          break;
 800a26a:	bf00      	nop
      }
      break;
 800a26c:	e006      	b.n	800a27c <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 800a26e:	6839      	ldr	r1, [r7, #0]
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f001 fadc 	bl	800b82e <USBD_CtlError>
      ret = USBD_FAIL;
 800a276:	2303      	movs	r3, #3
 800a278:	75fb      	strb	r3, [r7, #23]
      break;
 800a27a:	bf00      	nop
  }

  return (uint8_t)ret;
 800a27c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3718      	adds	r7, #24
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	20000088 	.word	0x20000088
 800a28c:	20000070 	.word	0x20000070

0800a290 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b086      	sub	sp, #24
 800a294:	af00      	add	r7, sp, #0
 800a296:	60f8      	str	r0, [r7, #12]
 800a298:	60b9      	str	r1, [r7, #8]
 800a29a:	4613      	mov	r3, r2
 800a29c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	32b0      	adds	r2, #176	; 0xb0
 800a2a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2ac:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d101      	bne.n	800a2b8 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a2b4:	2303      	movs	r3, #3
 800a2b6:	e014      	b.n	800a2e2 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2be:	b2db      	uxtb	r3, r3
 800a2c0:	2b03      	cmp	r3, #3
 800a2c2:	d10d      	bne.n	800a2e0 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_Device_IDLE)
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	7b1b      	ldrb	r3, [r3, #12]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d109      	bne.n	800a2e0 <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_Device_BUSY;
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 800a2d2:	4b06      	ldr	r3, [pc, #24]	; (800a2ec <USBD_HID_SendReport+0x5c>)
 800a2d4:	7819      	ldrb	r1, [r3, #0]
 800a2d6:	88fb      	ldrh	r3, [r7, #6]
 800a2d8:	68ba      	ldr	r2, [r7, #8]
 800a2da:	68f8      	ldr	r0, [r7, #12]
 800a2dc:	f006 ff21 	bl	8011122 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800a2e0:	2300      	movs	r3, #0
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3718      	adds	r7, #24
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
 800a2ea:	bf00      	nop
 800a2ec:	200000c7 	.word	0x200000c7

0800a2f0 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b084      	sub	sp, #16
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800a2f8:	2181      	movs	r1, #129	; 0x81
 800a2fa:	4809      	ldr	r0, [pc, #36]	; (800a320 <USBD_HID_GetFSCfgDesc+0x30>)
 800a2fc:	f000 fc35 	bl	800ab6a <USBD_GetEpDesc>
 800a300:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d002      	beq.n	800a30e <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	220a      	movs	r2, #10
 800a30c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2222      	movs	r2, #34	; 0x22
 800a312:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800a314:	4b02      	ldr	r3, [pc, #8]	; (800a320 <USBD_HID_GetFSCfgDesc+0x30>)
}
 800a316:	4618      	mov	r0, r3
 800a318:	3710      	adds	r7, #16
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop
 800a320:	2000004c 	.word	0x2000004c

0800a324 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800a32c:	2181      	movs	r1, #129	; 0x81
 800a32e:	4809      	ldr	r0, [pc, #36]	; (800a354 <USBD_HID_GetHSCfgDesc+0x30>)
 800a330:	f000 fc1b 	bl	800ab6a <USBD_GetEpDesc>
 800a334:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d002      	beq.n	800a342 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2207      	movs	r2, #7
 800a340:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2222      	movs	r2, #34	; 0x22
 800a346:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800a348:	4b02      	ldr	r3, [pc, #8]	; (800a354 <USBD_HID_GetHSCfgDesc+0x30>)
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3710      	adds	r7, #16
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
 800a352:	bf00      	nop
 800a354:	2000004c 	.word	0x2000004c

0800a358 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b084      	sub	sp, #16
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800a360:	2181      	movs	r1, #129	; 0x81
 800a362:	4809      	ldr	r0, [pc, #36]	; (800a388 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 800a364:	f000 fc01 	bl	800ab6a <USBD_GetEpDesc>
 800a368:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d002      	beq.n	800a376 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	220a      	movs	r2, #10
 800a374:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2222      	movs	r2, #34	; 0x22
 800a37a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800a37c:	4b02      	ldr	r3, [pc, #8]	; (800a388 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3710      	adds	r7, #16
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop
 800a388:	2000004c 	.word	0x2000004c

0800a38c <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b083      	sub	sp, #12
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	460b      	mov	r3, r1
 800a396:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_Device_IDLE;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	32b0      	adds	r2, #176	; 0xb0
 800a3a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800a3aa:	2300      	movs	r3, #0
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	370c      	adds	r7, #12
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr

0800a3b8 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b083      	sub	sp, #12
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	220a      	movs	r2, #10
 800a3c4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800a3c6:	4b03      	ldr	r3, [pc, #12]	; (800a3d4 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	370c      	adds	r7, #12
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr
 800a3d4:	2000007c 	.word	0x2000007c

0800a3d8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b086      	sub	sp, #24
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	60f8      	str	r0, [r7, #12]
 800a3e0:	60b9      	str	r1, [r7, #8]
 800a3e2:	4613      	mov	r3, r2
 800a3e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d101      	bne.n	800a3f0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a3ec:	2303      	movs	r3, #3
 800a3ee:	e01f      	b.n	800a430 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2200      	movs	r2, #0
 800a404:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d003      	beq.n	800a416 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	68ba      	ldr	r2, [r7, #8]
 800a412:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2201      	movs	r2, #1
 800a41a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	79fa      	ldrb	r2, [r7, #7]
 800a422:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a424:	68f8      	ldr	r0, [r7, #12]
 800a426:	f006 fd41 	bl	8010eac <USBD_LL_Init>
 800a42a:	4603      	mov	r3, r0
 800a42c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a42e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a430:	4618      	mov	r0, r3
 800a432:	3718      	adds	r7, #24
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}

0800a438 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a442:	2300      	movs	r3, #0
 800a444:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d101      	bne.n	800a450 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a44c:	2303      	movs	r3, #3
 800a44e:	e025      	b.n	800a49c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	683a      	ldr	r2, [r7, #0]
 800a454:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	32ae      	adds	r2, #174	; 0xae
 800a462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d00f      	beq.n	800a48c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	32ae      	adds	r2, #174	; 0xae
 800a476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a47a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a47c:	f107 020e 	add.w	r2, r7, #14
 800a480:	4610      	mov	r0, r2
 800a482:	4798      	blx	r3
 800a484:	4602      	mov	r2, r0
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a492:	1c5a      	adds	r2, r3, #1
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a49a:	2300      	movs	r3, #0
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3710      	adds	r7, #16
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}

0800a4a4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b082      	sub	sp, #8
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f006 fd4f 	bl	8010f50 <USBD_LL_Start>
 800a4b2:	4603      	mov	r3, r0
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3708      	adds	r7, #8
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b083      	sub	sp, #12
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a4c4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	370c      	adds	r7, #12
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr

0800a4d2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a4d2:	b580      	push	{r7, lr}
 800a4d4:	b084      	sub	sp, #16
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
 800a4da:	460b      	mov	r3, r1
 800a4dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d009      	beq.n	800a500 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	78fa      	ldrb	r2, [r7, #3]
 800a4f6:	4611      	mov	r1, r2
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	4798      	blx	r3
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a500:	7bfb      	ldrb	r3, [r7, #15]
}
 800a502:	4618      	mov	r0, r3
 800a504:	3710      	adds	r7, #16
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}

0800a50a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a50a:	b580      	push	{r7, lr}
 800a50c:	b084      	sub	sp, #16
 800a50e:	af00      	add	r7, sp, #0
 800a510:	6078      	str	r0, [r7, #4]
 800a512:	460b      	mov	r3, r1
 800a514:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a516:	2300      	movs	r3, #0
 800a518:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a520:	685b      	ldr	r3, [r3, #4]
 800a522:	78fa      	ldrb	r2, [r7, #3]
 800a524:	4611      	mov	r1, r2
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	4798      	blx	r3
 800a52a:	4603      	mov	r3, r0
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d001      	beq.n	800a534 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a530:	2303      	movs	r3, #3
 800a532:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a534:	7bfb      	ldrb	r3, [r7, #15]
}
 800a536:	4618      	mov	r0, r3
 800a538:	3710      	adds	r7, #16
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a53e:	b580      	push	{r7, lr}
 800a540:	b084      	sub	sp, #16
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
 800a546:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a54e:	6839      	ldr	r1, [r7, #0]
 800a550:	4618      	mov	r0, r3
 800a552:	f001 f932 	bl	800b7ba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2201      	movs	r2, #1
 800a55a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a564:	461a      	mov	r2, r3
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a572:	f003 031f 	and.w	r3, r3, #31
 800a576:	2b02      	cmp	r3, #2
 800a578:	d01a      	beq.n	800a5b0 <USBD_LL_SetupStage+0x72>
 800a57a:	2b02      	cmp	r3, #2
 800a57c:	d822      	bhi.n	800a5c4 <USBD_LL_SetupStage+0x86>
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d002      	beq.n	800a588 <USBD_LL_SetupStage+0x4a>
 800a582:	2b01      	cmp	r3, #1
 800a584:	d00a      	beq.n	800a59c <USBD_LL_SetupStage+0x5e>
 800a586:	e01d      	b.n	800a5c4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a58e:	4619      	mov	r1, r3
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f000 fb5f 	bl	800ac54 <USBD_StdDevReq>
 800a596:	4603      	mov	r3, r0
 800a598:	73fb      	strb	r3, [r7, #15]
      break;
 800a59a:	e020      	b.n	800a5de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a5a2:	4619      	mov	r1, r3
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f000 fbc7 	bl	800ad38 <USBD_StdItfReq>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	73fb      	strb	r3, [r7, #15]
      break;
 800a5ae:	e016      	b.n	800a5de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f000 fc29 	bl	800ae10 <USBD_StdEPReq>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	73fb      	strb	r3, [r7, #15]
      break;
 800a5c2:	e00c      	b.n	800a5de <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a5ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a5ce:	b2db      	uxtb	r3, r3
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f006 fd1c 	bl	8011010 <USBD_LL_StallEP>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	73fb      	strb	r3, [r7, #15]
      break;
 800a5dc:	bf00      	nop
  }

  return ret;
 800a5de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3710      	adds	r7, #16
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b086      	sub	sp, #24
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	60f8      	str	r0, [r7, #12]
 800a5f0:	460b      	mov	r3, r1
 800a5f2:	607a      	str	r2, [r7, #4]
 800a5f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a5fa:	7afb      	ldrb	r3, [r7, #11]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d16e      	bne.n	800a6de <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a606:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a60e:	2b03      	cmp	r3, #3
 800a610:	f040 8098 	bne.w	800a744 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	689a      	ldr	r2, [r3, #8]
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	68db      	ldr	r3, [r3, #12]
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d913      	bls.n	800a648 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	689a      	ldr	r2, [r3, #8]
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	68db      	ldr	r3, [r3, #12]
 800a628:	1ad2      	subs	r2, r2, r3
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	68da      	ldr	r2, [r3, #12]
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	689b      	ldr	r3, [r3, #8]
 800a636:	4293      	cmp	r3, r2
 800a638:	bf28      	it	cs
 800a63a:	4613      	movcs	r3, r2
 800a63c:	461a      	mov	r2, r3
 800a63e:	6879      	ldr	r1, [r7, #4]
 800a640:	68f8      	ldr	r0, [r7, #12]
 800a642:	f001 f991 	bl	800b968 <USBD_CtlContinueRx>
 800a646:	e07d      	b.n	800a744 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a64e:	f003 031f 	and.w	r3, r3, #31
 800a652:	2b02      	cmp	r3, #2
 800a654:	d014      	beq.n	800a680 <USBD_LL_DataOutStage+0x98>
 800a656:	2b02      	cmp	r3, #2
 800a658:	d81d      	bhi.n	800a696 <USBD_LL_DataOutStage+0xae>
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d002      	beq.n	800a664 <USBD_LL_DataOutStage+0x7c>
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d003      	beq.n	800a66a <USBD_LL_DataOutStage+0x82>
 800a662:	e018      	b.n	800a696 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a664:	2300      	movs	r3, #0
 800a666:	75bb      	strb	r3, [r7, #22]
            break;
 800a668:	e018      	b.n	800a69c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a670:	b2db      	uxtb	r3, r3
 800a672:	4619      	mov	r1, r3
 800a674:	68f8      	ldr	r0, [r7, #12]
 800a676:	f000 fa5e 	bl	800ab36 <USBD_CoreFindIF>
 800a67a:	4603      	mov	r3, r0
 800a67c:	75bb      	strb	r3, [r7, #22]
            break;
 800a67e:	e00d      	b.n	800a69c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a686:	b2db      	uxtb	r3, r3
 800a688:	4619      	mov	r1, r3
 800a68a:	68f8      	ldr	r0, [r7, #12]
 800a68c:	f000 fa60 	bl	800ab50 <USBD_CoreFindEP>
 800a690:	4603      	mov	r3, r0
 800a692:	75bb      	strb	r3, [r7, #22]
            break;
 800a694:	e002      	b.n	800a69c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a696:	2300      	movs	r3, #0
 800a698:	75bb      	strb	r3, [r7, #22]
            break;
 800a69a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a69c:	7dbb      	ldrb	r3, [r7, #22]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d119      	bne.n	800a6d6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	2b03      	cmp	r3, #3
 800a6ac:	d113      	bne.n	800a6d6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a6ae:	7dba      	ldrb	r2, [r7, #22]
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	32ae      	adds	r2, #174	; 0xae
 800a6b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6b8:	691b      	ldr	r3, [r3, #16]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d00b      	beq.n	800a6d6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a6be:	7dba      	ldrb	r2, [r7, #22]
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a6c6:	7dba      	ldrb	r2, [r7, #22]
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	32ae      	adds	r2, #174	; 0xae
 800a6cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6d0:	691b      	ldr	r3, [r3, #16]
 800a6d2:	68f8      	ldr	r0, [r7, #12]
 800a6d4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a6d6:	68f8      	ldr	r0, [r7, #12]
 800a6d8:	f001 f957 	bl	800b98a <USBD_CtlSendStatus>
 800a6dc:	e032      	b.n	800a744 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a6de:	7afb      	ldrb	r3, [r7, #11]
 800a6e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6e4:	b2db      	uxtb	r3, r3
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	68f8      	ldr	r0, [r7, #12]
 800a6ea:	f000 fa31 	bl	800ab50 <USBD_CoreFindEP>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a6f2:	7dbb      	ldrb	r3, [r7, #22]
 800a6f4:	2bff      	cmp	r3, #255	; 0xff
 800a6f6:	d025      	beq.n	800a744 <USBD_LL_DataOutStage+0x15c>
 800a6f8:	7dbb      	ldrb	r3, [r7, #22]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d122      	bne.n	800a744 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a704:	b2db      	uxtb	r3, r3
 800a706:	2b03      	cmp	r3, #3
 800a708:	d117      	bne.n	800a73a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a70a:	7dba      	ldrb	r2, [r7, #22]
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	32ae      	adds	r2, #174	; 0xae
 800a710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a714:	699b      	ldr	r3, [r3, #24]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d00f      	beq.n	800a73a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a71a:	7dba      	ldrb	r2, [r7, #22]
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a722:	7dba      	ldrb	r2, [r7, #22]
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	32ae      	adds	r2, #174	; 0xae
 800a728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a72c:	699b      	ldr	r3, [r3, #24]
 800a72e:	7afa      	ldrb	r2, [r7, #11]
 800a730:	4611      	mov	r1, r2
 800a732:	68f8      	ldr	r0, [r7, #12]
 800a734:	4798      	blx	r3
 800a736:	4603      	mov	r3, r0
 800a738:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a73a:	7dfb      	ldrb	r3, [r7, #23]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d001      	beq.n	800a744 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a740:	7dfb      	ldrb	r3, [r7, #23]
 800a742:	e000      	b.n	800a746 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a744:	2300      	movs	r3, #0
}
 800a746:	4618      	mov	r0, r3
 800a748:	3718      	adds	r7, #24
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}

0800a74e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a74e:	b580      	push	{r7, lr}
 800a750:	b086      	sub	sp, #24
 800a752:	af00      	add	r7, sp, #0
 800a754:	60f8      	str	r0, [r7, #12]
 800a756:	460b      	mov	r3, r1
 800a758:	607a      	str	r2, [r7, #4]
 800a75a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a75c:	7afb      	ldrb	r3, [r7, #11]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d16f      	bne.n	800a842 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	3314      	adds	r3, #20
 800a766:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a76e:	2b02      	cmp	r3, #2
 800a770:	d15a      	bne.n	800a828 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	689a      	ldr	r2, [r3, #8]
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	68db      	ldr	r3, [r3, #12]
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d914      	bls.n	800a7a8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	689a      	ldr	r2, [r3, #8]
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	68db      	ldr	r3, [r3, #12]
 800a786:	1ad2      	subs	r2, r2, r3
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	689b      	ldr	r3, [r3, #8]
 800a790:	461a      	mov	r2, r3
 800a792:	6879      	ldr	r1, [r7, #4]
 800a794:	68f8      	ldr	r0, [r7, #12]
 800a796:	f001 f8d6 	bl	800b946 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a79a:	2300      	movs	r3, #0
 800a79c:	2200      	movs	r2, #0
 800a79e:	2100      	movs	r1, #0
 800a7a0:	68f8      	ldr	r0, [r7, #12]
 800a7a2:	f006 fcdf 	bl	8011164 <USBD_LL_PrepareReceive>
 800a7a6:	e03f      	b.n	800a828 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	68da      	ldr	r2, [r3, #12]
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	689b      	ldr	r3, [r3, #8]
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d11c      	bne.n	800a7ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	685a      	ldr	r2, [r3, #4]
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d316      	bcc.n	800a7ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	685a      	ldr	r2, [r3, #4]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d20f      	bcs.n	800a7ee <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	2100      	movs	r1, #0
 800a7d2:	68f8      	ldr	r0, [r7, #12]
 800a7d4:	f001 f8b7 	bl	800b946 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	2100      	movs	r1, #0
 800a7e6:	68f8      	ldr	r0, [r7, #12]
 800a7e8:	f006 fcbc 	bl	8011164 <USBD_LL_PrepareReceive>
 800a7ec:	e01c      	b.n	800a828 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7f4:	b2db      	uxtb	r3, r3
 800a7f6:	2b03      	cmp	r3, #3
 800a7f8:	d10f      	bne.n	800a81a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a800:	68db      	ldr	r3, [r3, #12]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d009      	beq.n	800a81a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2200      	movs	r2, #0
 800a80a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a814:	68db      	ldr	r3, [r3, #12]
 800a816:	68f8      	ldr	r0, [r7, #12]
 800a818:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a81a:	2180      	movs	r1, #128	; 0x80
 800a81c:	68f8      	ldr	r0, [r7, #12]
 800a81e:	f006 fbf7 	bl	8011010 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a822:	68f8      	ldr	r0, [r7, #12]
 800a824:	f001 f8c4 	bl	800b9b0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d03a      	beq.n	800a8a8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a832:	68f8      	ldr	r0, [r7, #12]
 800a834:	f7ff fe42 	bl	800a4bc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2200      	movs	r2, #0
 800a83c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a840:	e032      	b.n	800a8a8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a842:	7afb      	ldrb	r3, [r7, #11]
 800a844:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	4619      	mov	r1, r3
 800a84c:	68f8      	ldr	r0, [r7, #12]
 800a84e:	f000 f97f 	bl	800ab50 <USBD_CoreFindEP>
 800a852:	4603      	mov	r3, r0
 800a854:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a856:	7dfb      	ldrb	r3, [r7, #23]
 800a858:	2bff      	cmp	r3, #255	; 0xff
 800a85a:	d025      	beq.n	800a8a8 <USBD_LL_DataInStage+0x15a>
 800a85c:	7dfb      	ldrb	r3, [r7, #23]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d122      	bne.n	800a8a8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a868:	b2db      	uxtb	r3, r3
 800a86a:	2b03      	cmp	r3, #3
 800a86c:	d11c      	bne.n	800a8a8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a86e:	7dfa      	ldrb	r2, [r7, #23]
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	32ae      	adds	r2, #174	; 0xae
 800a874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a878:	695b      	ldr	r3, [r3, #20]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d014      	beq.n	800a8a8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a87e:	7dfa      	ldrb	r2, [r7, #23]
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a886:	7dfa      	ldrb	r2, [r7, #23]
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	32ae      	adds	r2, #174	; 0xae
 800a88c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a890:	695b      	ldr	r3, [r3, #20]
 800a892:	7afa      	ldrb	r2, [r7, #11]
 800a894:	4611      	mov	r1, r2
 800a896:	68f8      	ldr	r0, [r7, #12]
 800a898:	4798      	blx	r3
 800a89a:	4603      	mov	r3, r0
 800a89c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a89e:	7dbb      	ldrb	r3, [r7, #22]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d001      	beq.n	800a8a8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a8a4:	7dbb      	ldrb	r3, [r7, #22]
 800a8a6:	e000      	b.n	800a8aa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a8a8:	2300      	movs	r3, #0
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3718      	adds	r7, #24
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}

0800a8b2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a8b2:	b580      	push	{r7, lr}
 800a8b4:	b084      	sub	sp, #16
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2201      	movs	r2, #1
 800a8c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d014      	beq.n	800a918 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8f4:	685b      	ldr	r3, [r3, #4]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d00e      	beq.n	800a918 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	687a      	ldr	r2, [r7, #4]
 800a904:	6852      	ldr	r2, [r2, #4]
 800a906:	b2d2      	uxtb	r2, r2
 800a908:	4611      	mov	r1, r2
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	4798      	blx	r3
 800a90e:	4603      	mov	r3, r0
 800a910:	2b00      	cmp	r3, #0
 800a912:	d001      	beq.n	800a918 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a914:	2303      	movs	r3, #3
 800a916:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a918:	2340      	movs	r3, #64	; 0x40
 800a91a:	2200      	movs	r2, #0
 800a91c:	2100      	movs	r1, #0
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f006 fb31 	bl	8010f86 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2201      	movs	r2, #1
 800a928:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2240      	movs	r2, #64	; 0x40
 800a930:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a934:	2340      	movs	r3, #64	; 0x40
 800a936:	2200      	movs	r2, #0
 800a938:	2180      	movs	r1, #128	; 0x80
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f006 fb23 	bl	8010f86 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2201      	movs	r2, #1
 800a944:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2240      	movs	r2, #64	; 0x40
 800a94a:	621a      	str	r2, [r3, #32]

  return ret;
 800a94c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3710      	adds	r7, #16
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}

0800a956 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a956:	b480      	push	{r7}
 800a958:	b083      	sub	sp, #12
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	6078      	str	r0, [r7, #4]
 800a95e:	460b      	mov	r3, r1
 800a960:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	78fa      	ldrb	r2, [r7, #3]
 800a966:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a968:	2300      	movs	r3, #0
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	370c      	adds	r7, #12
 800a96e:	46bd      	mov	sp, r7
 800a970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a974:	4770      	bx	lr

0800a976 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a976:	b480      	push	{r7}
 800a978:	b083      	sub	sp, #12
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a984:	b2da      	uxtb	r2, r3
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2204      	movs	r2, #4
 800a990:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a994:	2300      	movs	r3, #0
}
 800a996:	4618      	mov	r0, r3
 800a998:	370c      	adds	r7, #12
 800a99a:	46bd      	mov	sp, r7
 800a99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a0:	4770      	bx	lr

0800a9a2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a9a2:	b480      	push	{r7}
 800a9a4:	b083      	sub	sp, #12
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9b0:	b2db      	uxtb	r3, r3
 800a9b2:	2b04      	cmp	r3, #4
 800a9b4:	d106      	bne.n	800a9c4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a9bc:	b2da      	uxtb	r2, r3
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a9c4:	2300      	movs	r3, #0
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	370c      	adds	r7, #12
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr

0800a9d2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a9d2:	b580      	push	{r7, lr}
 800a9d4:	b082      	sub	sp, #8
 800a9d6:	af00      	add	r7, sp, #0
 800a9d8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	2b03      	cmp	r3, #3
 800a9e4:	d110      	bne.n	800aa08 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d00b      	beq.n	800aa08 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9f6:	69db      	ldr	r3, [r3, #28]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d005      	beq.n	800aa08 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa02:	69db      	ldr	r3, [r3, #28]
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800aa08:	2300      	movs	r3, #0
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3708      	adds	r7, #8
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}

0800aa12 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800aa12:	b580      	push	{r7, lr}
 800aa14:	b082      	sub	sp, #8
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	6078      	str	r0, [r7, #4]
 800aa1a:	460b      	mov	r3, r1
 800aa1c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	32ae      	adds	r2, #174	; 0xae
 800aa28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d101      	bne.n	800aa34 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800aa30:	2303      	movs	r3, #3
 800aa32:	e01c      	b.n	800aa6e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	2b03      	cmp	r3, #3
 800aa3e:	d115      	bne.n	800aa6c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	32ae      	adds	r2, #174	; 0xae
 800aa4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa4e:	6a1b      	ldr	r3, [r3, #32]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d00b      	beq.n	800aa6c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	32ae      	adds	r2, #174	; 0xae
 800aa5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa62:	6a1b      	ldr	r3, [r3, #32]
 800aa64:	78fa      	ldrb	r2, [r7, #3]
 800aa66:	4611      	mov	r1, r2
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aa6c:	2300      	movs	r3, #0
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3708      	adds	r7, #8
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}

0800aa76 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800aa76:	b580      	push	{r7, lr}
 800aa78:	b082      	sub	sp, #8
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	6078      	str	r0, [r7, #4]
 800aa7e:	460b      	mov	r3, r1
 800aa80:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	32ae      	adds	r2, #174	; 0xae
 800aa8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d101      	bne.n	800aa98 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800aa94:	2303      	movs	r3, #3
 800aa96:	e01c      	b.n	800aad2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa9e:	b2db      	uxtb	r3, r3
 800aaa0:	2b03      	cmp	r3, #3
 800aaa2:	d115      	bne.n	800aad0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	32ae      	adds	r2, #174	; 0xae
 800aaae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d00b      	beq.n	800aad0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	32ae      	adds	r2, #174	; 0xae
 800aac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac8:	78fa      	ldrb	r2, [r7, #3]
 800aaca:	4611      	mov	r1, r2
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aad0:	2300      	movs	r3, #0
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3708      	adds	r7, #8
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}

0800aada <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800aada:	b480      	push	{r7}
 800aadc:	b083      	sub	sp, #12
 800aade:	af00      	add	r7, sp, #0
 800aae0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aae2:	2300      	movs	r3, #0
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	370c      	adds	r7, #12
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr

0800aaf0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b084      	sub	sp, #16
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2201      	movs	r2, #1
 800ab00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d00e      	beq.n	800ab2c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	687a      	ldr	r2, [r7, #4]
 800ab18:	6852      	ldr	r2, [r2, #4]
 800ab1a:	b2d2      	uxtb	r2, r2
 800ab1c:	4611      	mov	r1, r2
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	4798      	blx	r3
 800ab22:	4603      	mov	r3, r0
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d001      	beq.n	800ab2c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ab28:	2303      	movs	r3, #3
 800ab2a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ab2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3710      	adds	r7, #16
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}

0800ab36 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ab36:	b480      	push	{r7}
 800ab38:	b083      	sub	sp, #12
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	6078      	str	r0, [r7, #4]
 800ab3e:	460b      	mov	r3, r1
 800ab40:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ab42:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	370c      	adds	r7, #12
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4e:	4770      	bx	lr

0800ab50 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ab50:	b480      	push	{r7}
 800ab52:	b083      	sub	sp, #12
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	460b      	mov	r3, r1
 800ab5a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ab5c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	370c      	adds	r7, #12
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr

0800ab6a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ab6a:	b580      	push	{r7, lr}
 800ab6c:	b086      	sub	sp, #24
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	6078      	str	r0, [r7, #4]
 800ab72:	460b      	mov	r3, r1
 800ab74:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	885b      	ldrh	r3, [r3, #2]
 800ab86:	b29a      	uxth	r2, r3
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	b29b      	uxth	r3, r3
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d920      	bls.n	800abd4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	b29b      	uxth	r3, r3
 800ab98:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ab9a:	e013      	b.n	800abc4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ab9c:	f107 030a 	add.w	r3, r7, #10
 800aba0:	4619      	mov	r1, r3
 800aba2:	6978      	ldr	r0, [r7, #20]
 800aba4:	f000 f81b 	bl	800abde <USBD_GetNextDesc>
 800aba8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	785b      	ldrb	r3, [r3, #1]
 800abae:	2b05      	cmp	r3, #5
 800abb0:	d108      	bne.n	800abc4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	789b      	ldrb	r3, [r3, #2]
 800abba:	78fa      	ldrb	r2, [r7, #3]
 800abbc:	429a      	cmp	r2, r3
 800abbe:	d008      	beq.n	800abd2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800abc0:	2300      	movs	r3, #0
 800abc2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	885b      	ldrh	r3, [r3, #2]
 800abc8:	b29a      	uxth	r2, r3
 800abca:	897b      	ldrh	r3, [r7, #10]
 800abcc:	429a      	cmp	r2, r3
 800abce:	d8e5      	bhi.n	800ab9c <USBD_GetEpDesc+0x32>
 800abd0:	e000      	b.n	800abd4 <USBD_GetEpDesc+0x6a>
          break;
 800abd2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800abd4:	693b      	ldr	r3, [r7, #16]
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3718      	adds	r7, #24
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}

0800abde <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800abde:	b480      	push	{r7}
 800abe0:	b085      	sub	sp, #20
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	6078      	str	r0, [r7, #4]
 800abe6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	881a      	ldrh	r2, [r3, #0]
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	b29b      	uxth	r3, r3
 800abf6:	4413      	add	r3, r2
 800abf8:	b29a      	uxth	r2, r3
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	781b      	ldrb	r3, [r3, #0]
 800ac02:	461a      	mov	r2, r3
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	4413      	add	r3, r2
 800ac08:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ac0a:	68fb      	ldr	r3, [r7, #12]
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3714      	adds	r7, #20
 800ac10:	46bd      	mov	sp, r7
 800ac12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac16:	4770      	bx	lr

0800ac18 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b087      	sub	sp, #28
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	3301      	adds	r3, #1
 800ac2e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	781b      	ldrb	r3, [r3, #0]
 800ac34:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ac36:	8a3b      	ldrh	r3, [r7, #16]
 800ac38:	021b      	lsls	r3, r3, #8
 800ac3a:	b21a      	sxth	r2, r3
 800ac3c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ac40:	4313      	orrs	r3, r2
 800ac42:	b21b      	sxth	r3, r3
 800ac44:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ac46:	89fb      	ldrh	r3, [r7, #14]
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	371c      	adds	r7, #28
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr

0800ac54 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b084      	sub	sp, #16
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ac6a:	2b40      	cmp	r3, #64	; 0x40
 800ac6c:	d005      	beq.n	800ac7a <USBD_StdDevReq+0x26>
 800ac6e:	2b40      	cmp	r3, #64	; 0x40
 800ac70:	d857      	bhi.n	800ad22 <USBD_StdDevReq+0xce>
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d00f      	beq.n	800ac96 <USBD_StdDevReq+0x42>
 800ac76:	2b20      	cmp	r3, #32
 800ac78:	d153      	bne.n	800ad22 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	32ae      	adds	r2, #174	; 0xae
 800ac84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac88:	689b      	ldr	r3, [r3, #8]
 800ac8a:	6839      	ldr	r1, [r7, #0]
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	4798      	blx	r3
 800ac90:	4603      	mov	r3, r0
 800ac92:	73fb      	strb	r3, [r7, #15]
      break;
 800ac94:	e04a      	b.n	800ad2c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	785b      	ldrb	r3, [r3, #1]
 800ac9a:	2b09      	cmp	r3, #9
 800ac9c:	d83b      	bhi.n	800ad16 <USBD_StdDevReq+0xc2>
 800ac9e:	a201      	add	r2, pc, #4	; (adr r2, 800aca4 <USBD_StdDevReq+0x50>)
 800aca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aca4:	0800acf9 	.word	0x0800acf9
 800aca8:	0800ad0d 	.word	0x0800ad0d
 800acac:	0800ad17 	.word	0x0800ad17
 800acb0:	0800ad03 	.word	0x0800ad03
 800acb4:	0800ad17 	.word	0x0800ad17
 800acb8:	0800acd7 	.word	0x0800acd7
 800acbc:	0800accd 	.word	0x0800accd
 800acc0:	0800ad17 	.word	0x0800ad17
 800acc4:	0800acef 	.word	0x0800acef
 800acc8:	0800ace1 	.word	0x0800ace1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800accc:	6839      	ldr	r1, [r7, #0]
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 fa3c 	bl	800b14c <USBD_GetDescriptor>
          break;
 800acd4:	e024      	b.n	800ad20 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800acd6:	6839      	ldr	r1, [r7, #0]
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f000 fbcb 	bl	800b474 <USBD_SetAddress>
          break;
 800acde:	e01f      	b.n	800ad20 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ace0:	6839      	ldr	r1, [r7, #0]
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f000 fc0a 	bl	800b4fc <USBD_SetConfig>
 800ace8:	4603      	mov	r3, r0
 800acea:	73fb      	strb	r3, [r7, #15]
          break;
 800acec:	e018      	b.n	800ad20 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800acee:	6839      	ldr	r1, [r7, #0]
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f000 fcad 	bl	800b650 <USBD_GetConfig>
          break;
 800acf6:	e013      	b.n	800ad20 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800acf8:	6839      	ldr	r1, [r7, #0]
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f000 fcde 	bl	800b6bc <USBD_GetStatus>
          break;
 800ad00:	e00e      	b.n	800ad20 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ad02:	6839      	ldr	r1, [r7, #0]
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f000 fd0d 	bl	800b724 <USBD_SetFeature>
          break;
 800ad0a:	e009      	b.n	800ad20 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ad0c:	6839      	ldr	r1, [r7, #0]
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f000 fd31 	bl	800b776 <USBD_ClrFeature>
          break;
 800ad14:	e004      	b.n	800ad20 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ad16:	6839      	ldr	r1, [r7, #0]
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f000 fd88 	bl	800b82e <USBD_CtlError>
          break;
 800ad1e:	bf00      	nop
      }
      break;
 800ad20:	e004      	b.n	800ad2c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ad22:	6839      	ldr	r1, [r7, #0]
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f000 fd82 	bl	800b82e <USBD_CtlError>
      break;
 800ad2a:	bf00      	nop
  }

  return ret;
 800ad2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3710      	adds	r7, #16
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}
 800ad36:	bf00      	nop

0800ad38 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b084      	sub	sp, #16
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad42:	2300      	movs	r3, #0
 800ad44:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	781b      	ldrb	r3, [r3, #0]
 800ad4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad4e:	2b40      	cmp	r3, #64	; 0x40
 800ad50:	d005      	beq.n	800ad5e <USBD_StdItfReq+0x26>
 800ad52:	2b40      	cmp	r3, #64	; 0x40
 800ad54:	d852      	bhi.n	800adfc <USBD_StdItfReq+0xc4>
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d001      	beq.n	800ad5e <USBD_StdItfReq+0x26>
 800ad5a:	2b20      	cmp	r3, #32
 800ad5c:	d14e      	bne.n	800adfc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad64:	b2db      	uxtb	r3, r3
 800ad66:	3b01      	subs	r3, #1
 800ad68:	2b02      	cmp	r3, #2
 800ad6a:	d840      	bhi.n	800adee <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	889b      	ldrh	r3, [r3, #4]
 800ad70:	b2db      	uxtb	r3, r3
 800ad72:	2b01      	cmp	r3, #1
 800ad74:	d836      	bhi.n	800ade4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	889b      	ldrh	r3, [r3, #4]
 800ad7a:	b2db      	uxtb	r3, r3
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f7ff fed9 	bl	800ab36 <USBD_CoreFindIF>
 800ad84:	4603      	mov	r3, r0
 800ad86:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ad88:	7bbb      	ldrb	r3, [r7, #14]
 800ad8a:	2bff      	cmp	r3, #255	; 0xff
 800ad8c:	d01d      	beq.n	800adca <USBD_StdItfReq+0x92>
 800ad8e:	7bbb      	ldrb	r3, [r7, #14]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d11a      	bne.n	800adca <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ad94:	7bba      	ldrb	r2, [r7, #14]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	32ae      	adds	r2, #174	; 0xae
 800ad9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad9e:	689b      	ldr	r3, [r3, #8]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d00f      	beq.n	800adc4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ada4:	7bba      	ldrb	r2, [r7, #14]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800adac:	7bba      	ldrb	r2, [r7, #14]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	32ae      	adds	r2, #174	; 0xae
 800adb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adb6:	689b      	ldr	r3, [r3, #8]
 800adb8:	6839      	ldr	r1, [r7, #0]
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	4798      	blx	r3
 800adbe:	4603      	mov	r3, r0
 800adc0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800adc2:	e004      	b.n	800adce <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800adc4:	2303      	movs	r3, #3
 800adc6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800adc8:	e001      	b.n	800adce <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800adca:	2303      	movs	r3, #3
 800adcc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	88db      	ldrh	r3, [r3, #6]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d110      	bne.n	800adf8 <USBD_StdItfReq+0xc0>
 800add6:	7bfb      	ldrb	r3, [r7, #15]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d10d      	bne.n	800adf8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f000 fdd4 	bl	800b98a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ade2:	e009      	b.n	800adf8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ade4:	6839      	ldr	r1, [r7, #0]
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 fd21 	bl	800b82e <USBD_CtlError>
          break;
 800adec:	e004      	b.n	800adf8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800adee:	6839      	ldr	r1, [r7, #0]
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f000 fd1c 	bl	800b82e <USBD_CtlError>
          break;
 800adf6:	e000      	b.n	800adfa <USBD_StdItfReq+0xc2>
          break;
 800adf8:	bf00      	nop
      }
      break;
 800adfa:	e004      	b.n	800ae06 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800adfc:	6839      	ldr	r1, [r7, #0]
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f000 fd15 	bl	800b82e <USBD_CtlError>
      break;
 800ae04:	bf00      	nop
  }

  return ret;
 800ae06:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3710      	adds	r7, #16
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}

0800ae10 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b084      	sub	sp, #16
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	889b      	ldrh	r3, [r3, #4]
 800ae22:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae2c:	2b40      	cmp	r3, #64	; 0x40
 800ae2e:	d007      	beq.n	800ae40 <USBD_StdEPReq+0x30>
 800ae30:	2b40      	cmp	r3, #64	; 0x40
 800ae32:	f200 817f 	bhi.w	800b134 <USBD_StdEPReq+0x324>
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d02a      	beq.n	800ae90 <USBD_StdEPReq+0x80>
 800ae3a:	2b20      	cmp	r3, #32
 800ae3c:	f040 817a 	bne.w	800b134 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ae40:	7bbb      	ldrb	r3, [r7, #14]
 800ae42:	4619      	mov	r1, r3
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f7ff fe83 	bl	800ab50 <USBD_CoreFindEP>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae4e:	7b7b      	ldrb	r3, [r7, #13]
 800ae50:	2bff      	cmp	r3, #255	; 0xff
 800ae52:	f000 8174 	beq.w	800b13e <USBD_StdEPReq+0x32e>
 800ae56:	7b7b      	ldrb	r3, [r7, #13]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	f040 8170 	bne.w	800b13e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ae5e:	7b7a      	ldrb	r2, [r7, #13]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ae66:	7b7a      	ldrb	r2, [r7, #13]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	32ae      	adds	r2, #174	; 0xae
 800ae6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae70:	689b      	ldr	r3, [r3, #8]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	f000 8163 	beq.w	800b13e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ae78:	7b7a      	ldrb	r2, [r7, #13]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	32ae      	adds	r2, #174	; 0xae
 800ae7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae82:	689b      	ldr	r3, [r3, #8]
 800ae84:	6839      	ldr	r1, [r7, #0]
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	4798      	blx	r3
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ae8e:	e156      	b.n	800b13e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	785b      	ldrb	r3, [r3, #1]
 800ae94:	2b03      	cmp	r3, #3
 800ae96:	d008      	beq.n	800aeaa <USBD_StdEPReq+0x9a>
 800ae98:	2b03      	cmp	r3, #3
 800ae9a:	f300 8145 	bgt.w	800b128 <USBD_StdEPReq+0x318>
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	f000 809b 	beq.w	800afda <USBD_StdEPReq+0x1ca>
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	d03c      	beq.n	800af22 <USBD_StdEPReq+0x112>
 800aea8:	e13e      	b.n	800b128 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aeb0:	b2db      	uxtb	r3, r3
 800aeb2:	2b02      	cmp	r3, #2
 800aeb4:	d002      	beq.n	800aebc <USBD_StdEPReq+0xac>
 800aeb6:	2b03      	cmp	r3, #3
 800aeb8:	d016      	beq.n	800aee8 <USBD_StdEPReq+0xd8>
 800aeba:	e02c      	b.n	800af16 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aebc:	7bbb      	ldrb	r3, [r7, #14]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d00d      	beq.n	800aede <USBD_StdEPReq+0xce>
 800aec2:	7bbb      	ldrb	r3, [r7, #14]
 800aec4:	2b80      	cmp	r3, #128	; 0x80
 800aec6:	d00a      	beq.n	800aede <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aec8:	7bbb      	ldrb	r3, [r7, #14]
 800aeca:	4619      	mov	r1, r3
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f006 f89f 	bl	8011010 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aed2:	2180      	movs	r1, #128	; 0x80
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f006 f89b 	bl	8011010 <USBD_LL_StallEP>
 800aeda:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aedc:	e020      	b.n	800af20 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800aede:	6839      	ldr	r1, [r7, #0]
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f000 fca4 	bl	800b82e <USBD_CtlError>
              break;
 800aee6:	e01b      	b.n	800af20 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	885b      	ldrh	r3, [r3, #2]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d10e      	bne.n	800af0e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aef0:	7bbb      	ldrb	r3, [r7, #14]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d00b      	beq.n	800af0e <USBD_StdEPReq+0xfe>
 800aef6:	7bbb      	ldrb	r3, [r7, #14]
 800aef8:	2b80      	cmp	r3, #128	; 0x80
 800aefa:	d008      	beq.n	800af0e <USBD_StdEPReq+0xfe>
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	88db      	ldrh	r3, [r3, #6]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d104      	bne.n	800af0e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800af04:	7bbb      	ldrb	r3, [r7, #14]
 800af06:	4619      	mov	r1, r3
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f006 f881 	bl	8011010 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f000 fd3b 	bl	800b98a <USBD_CtlSendStatus>

              break;
 800af14:	e004      	b.n	800af20 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800af16:	6839      	ldr	r1, [r7, #0]
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f000 fc88 	bl	800b82e <USBD_CtlError>
              break;
 800af1e:	bf00      	nop
          }
          break;
 800af20:	e107      	b.n	800b132 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af28:	b2db      	uxtb	r3, r3
 800af2a:	2b02      	cmp	r3, #2
 800af2c:	d002      	beq.n	800af34 <USBD_StdEPReq+0x124>
 800af2e:	2b03      	cmp	r3, #3
 800af30:	d016      	beq.n	800af60 <USBD_StdEPReq+0x150>
 800af32:	e04b      	b.n	800afcc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af34:	7bbb      	ldrb	r3, [r7, #14]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d00d      	beq.n	800af56 <USBD_StdEPReq+0x146>
 800af3a:	7bbb      	ldrb	r3, [r7, #14]
 800af3c:	2b80      	cmp	r3, #128	; 0x80
 800af3e:	d00a      	beq.n	800af56 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800af40:	7bbb      	ldrb	r3, [r7, #14]
 800af42:	4619      	mov	r1, r3
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f006 f863 	bl	8011010 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800af4a:	2180      	movs	r1, #128	; 0x80
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f006 f85f 	bl	8011010 <USBD_LL_StallEP>
 800af52:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800af54:	e040      	b.n	800afd8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800af56:	6839      	ldr	r1, [r7, #0]
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f000 fc68 	bl	800b82e <USBD_CtlError>
              break;
 800af5e:	e03b      	b.n	800afd8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	885b      	ldrh	r3, [r3, #2]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d136      	bne.n	800afd6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800af68:	7bbb      	ldrb	r3, [r7, #14]
 800af6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d004      	beq.n	800af7c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800af72:	7bbb      	ldrb	r3, [r7, #14]
 800af74:	4619      	mov	r1, r3
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f006 f869 	bl	801104e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f000 fd04 	bl	800b98a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800af82:	7bbb      	ldrb	r3, [r7, #14]
 800af84:	4619      	mov	r1, r3
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f7ff fde2 	bl	800ab50 <USBD_CoreFindEP>
 800af8c:	4603      	mov	r3, r0
 800af8e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af90:	7b7b      	ldrb	r3, [r7, #13]
 800af92:	2bff      	cmp	r3, #255	; 0xff
 800af94:	d01f      	beq.n	800afd6 <USBD_StdEPReq+0x1c6>
 800af96:	7b7b      	ldrb	r3, [r7, #13]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d11c      	bne.n	800afd6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800af9c:	7b7a      	ldrb	r2, [r7, #13]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800afa4:	7b7a      	ldrb	r2, [r7, #13]
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	32ae      	adds	r2, #174	; 0xae
 800afaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afae:	689b      	ldr	r3, [r3, #8]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d010      	beq.n	800afd6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800afb4:	7b7a      	ldrb	r2, [r7, #13]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	32ae      	adds	r2, #174	; 0xae
 800afba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afbe:	689b      	ldr	r3, [r3, #8]
 800afc0:	6839      	ldr	r1, [r7, #0]
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	4798      	blx	r3
 800afc6:	4603      	mov	r3, r0
 800afc8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800afca:	e004      	b.n	800afd6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800afcc:	6839      	ldr	r1, [r7, #0]
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f000 fc2d 	bl	800b82e <USBD_CtlError>
              break;
 800afd4:	e000      	b.n	800afd8 <USBD_StdEPReq+0x1c8>
              break;
 800afd6:	bf00      	nop
          }
          break;
 800afd8:	e0ab      	b.n	800b132 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afe0:	b2db      	uxtb	r3, r3
 800afe2:	2b02      	cmp	r3, #2
 800afe4:	d002      	beq.n	800afec <USBD_StdEPReq+0x1dc>
 800afe6:	2b03      	cmp	r3, #3
 800afe8:	d032      	beq.n	800b050 <USBD_StdEPReq+0x240>
 800afea:	e097      	b.n	800b11c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800afec:	7bbb      	ldrb	r3, [r7, #14]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d007      	beq.n	800b002 <USBD_StdEPReq+0x1f2>
 800aff2:	7bbb      	ldrb	r3, [r7, #14]
 800aff4:	2b80      	cmp	r3, #128	; 0x80
 800aff6:	d004      	beq.n	800b002 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800aff8:	6839      	ldr	r1, [r7, #0]
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f000 fc17 	bl	800b82e <USBD_CtlError>
                break;
 800b000:	e091      	b.n	800b126 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b002:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b006:	2b00      	cmp	r3, #0
 800b008:	da0b      	bge.n	800b022 <USBD_StdEPReq+0x212>
 800b00a:	7bbb      	ldrb	r3, [r7, #14]
 800b00c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b010:	4613      	mov	r3, r2
 800b012:	009b      	lsls	r3, r3, #2
 800b014:	4413      	add	r3, r2
 800b016:	009b      	lsls	r3, r3, #2
 800b018:	3310      	adds	r3, #16
 800b01a:	687a      	ldr	r2, [r7, #4]
 800b01c:	4413      	add	r3, r2
 800b01e:	3304      	adds	r3, #4
 800b020:	e00b      	b.n	800b03a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b022:	7bbb      	ldrb	r3, [r7, #14]
 800b024:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b028:	4613      	mov	r3, r2
 800b02a:	009b      	lsls	r3, r3, #2
 800b02c:	4413      	add	r3, r2
 800b02e:	009b      	lsls	r3, r3, #2
 800b030:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b034:	687a      	ldr	r2, [r7, #4]
 800b036:	4413      	add	r3, r2
 800b038:	3304      	adds	r3, #4
 800b03a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	2200      	movs	r2, #0
 800b040:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	2202      	movs	r2, #2
 800b046:	4619      	mov	r1, r3
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f000 fc61 	bl	800b910 <USBD_CtlSendData>
              break;
 800b04e:	e06a      	b.n	800b126 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b050:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b054:	2b00      	cmp	r3, #0
 800b056:	da11      	bge.n	800b07c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b058:	7bbb      	ldrb	r3, [r7, #14]
 800b05a:	f003 020f 	and.w	r2, r3, #15
 800b05e:	6879      	ldr	r1, [r7, #4]
 800b060:	4613      	mov	r3, r2
 800b062:	009b      	lsls	r3, r3, #2
 800b064:	4413      	add	r3, r2
 800b066:	009b      	lsls	r3, r3, #2
 800b068:	440b      	add	r3, r1
 800b06a:	3324      	adds	r3, #36	; 0x24
 800b06c:	881b      	ldrh	r3, [r3, #0]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d117      	bne.n	800b0a2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b072:	6839      	ldr	r1, [r7, #0]
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f000 fbda 	bl	800b82e <USBD_CtlError>
                  break;
 800b07a:	e054      	b.n	800b126 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b07c:	7bbb      	ldrb	r3, [r7, #14]
 800b07e:	f003 020f 	and.w	r2, r3, #15
 800b082:	6879      	ldr	r1, [r7, #4]
 800b084:	4613      	mov	r3, r2
 800b086:	009b      	lsls	r3, r3, #2
 800b088:	4413      	add	r3, r2
 800b08a:	009b      	lsls	r3, r3, #2
 800b08c:	440b      	add	r3, r1
 800b08e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b092:	881b      	ldrh	r3, [r3, #0]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d104      	bne.n	800b0a2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b098:	6839      	ldr	r1, [r7, #0]
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f000 fbc7 	bl	800b82e <USBD_CtlError>
                  break;
 800b0a0:	e041      	b.n	800b126 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	da0b      	bge.n	800b0c2 <USBD_StdEPReq+0x2b2>
 800b0aa:	7bbb      	ldrb	r3, [r7, #14]
 800b0ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b0b0:	4613      	mov	r3, r2
 800b0b2:	009b      	lsls	r3, r3, #2
 800b0b4:	4413      	add	r3, r2
 800b0b6:	009b      	lsls	r3, r3, #2
 800b0b8:	3310      	adds	r3, #16
 800b0ba:	687a      	ldr	r2, [r7, #4]
 800b0bc:	4413      	add	r3, r2
 800b0be:	3304      	adds	r3, #4
 800b0c0:	e00b      	b.n	800b0da <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b0c2:	7bbb      	ldrb	r3, [r7, #14]
 800b0c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0c8:	4613      	mov	r3, r2
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	4413      	add	r3, r2
 800b0ce:	009b      	lsls	r3, r3, #2
 800b0d0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b0d4:	687a      	ldr	r2, [r7, #4]
 800b0d6:	4413      	add	r3, r2
 800b0d8:	3304      	adds	r3, #4
 800b0da:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b0dc:	7bbb      	ldrb	r3, [r7, #14]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d002      	beq.n	800b0e8 <USBD_StdEPReq+0x2d8>
 800b0e2:	7bbb      	ldrb	r3, [r7, #14]
 800b0e4:	2b80      	cmp	r3, #128	; 0x80
 800b0e6:	d103      	bne.n	800b0f0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	601a      	str	r2, [r3, #0]
 800b0ee:	e00e      	b.n	800b10e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b0f0:	7bbb      	ldrb	r3, [r7, #14]
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f005 ffc9 	bl	801108c <USBD_LL_IsStallEP>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d003      	beq.n	800b108 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	2201      	movs	r2, #1
 800b104:	601a      	str	r2, [r3, #0]
 800b106:	e002      	b.n	800b10e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	2200      	movs	r2, #0
 800b10c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	2202      	movs	r2, #2
 800b112:	4619      	mov	r1, r3
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f000 fbfb 	bl	800b910 <USBD_CtlSendData>
              break;
 800b11a:	e004      	b.n	800b126 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b11c:	6839      	ldr	r1, [r7, #0]
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f000 fb85 	bl	800b82e <USBD_CtlError>
              break;
 800b124:	bf00      	nop
          }
          break;
 800b126:	e004      	b.n	800b132 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b128:	6839      	ldr	r1, [r7, #0]
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f000 fb7f 	bl	800b82e <USBD_CtlError>
          break;
 800b130:	bf00      	nop
      }
      break;
 800b132:	e005      	b.n	800b140 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b134:	6839      	ldr	r1, [r7, #0]
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f000 fb79 	bl	800b82e <USBD_CtlError>
      break;
 800b13c:	e000      	b.n	800b140 <USBD_StdEPReq+0x330>
      break;
 800b13e:	bf00      	nop
  }

  return ret;
 800b140:	7bfb      	ldrb	r3, [r7, #15]
}
 800b142:	4618      	mov	r0, r3
 800b144:	3710      	adds	r7, #16
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
	...

0800b14c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b084      	sub	sp, #16
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b156:	2300      	movs	r3, #0
 800b158:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b15a:	2300      	movs	r3, #0
 800b15c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b15e:	2300      	movs	r3, #0
 800b160:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	885b      	ldrh	r3, [r3, #2]
 800b166:	0a1b      	lsrs	r3, r3, #8
 800b168:	b29b      	uxth	r3, r3
 800b16a:	3b01      	subs	r3, #1
 800b16c:	2b0e      	cmp	r3, #14
 800b16e:	f200 8152 	bhi.w	800b416 <USBD_GetDescriptor+0x2ca>
 800b172:	a201      	add	r2, pc, #4	; (adr r2, 800b178 <USBD_GetDescriptor+0x2c>)
 800b174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b178:	0800b1e9 	.word	0x0800b1e9
 800b17c:	0800b201 	.word	0x0800b201
 800b180:	0800b241 	.word	0x0800b241
 800b184:	0800b417 	.word	0x0800b417
 800b188:	0800b417 	.word	0x0800b417
 800b18c:	0800b3b7 	.word	0x0800b3b7
 800b190:	0800b3e3 	.word	0x0800b3e3
 800b194:	0800b417 	.word	0x0800b417
 800b198:	0800b417 	.word	0x0800b417
 800b19c:	0800b417 	.word	0x0800b417
 800b1a0:	0800b417 	.word	0x0800b417
 800b1a4:	0800b417 	.word	0x0800b417
 800b1a8:	0800b417 	.word	0x0800b417
 800b1ac:	0800b417 	.word	0x0800b417
 800b1b0:	0800b1b5 	.word	0x0800b1b5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1ba:	69db      	ldr	r3, [r3, #28]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d00b      	beq.n	800b1d8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1c6:	69db      	ldr	r3, [r3, #28]
 800b1c8:	687a      	ldr	r2, [r7, #4]
 800b1ca:	7c12      	ldrb	r2, [r2, #16]
 800b1cc:	f107 0108 	add.w	r1, r7, #8
 800b1d0:	4610      	mov	r0, r2
 800b1d2:	4798      	blx	r3
 800b1d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b1d6:	e126      	b.n	800b426 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b1d8:	6839      	ldr	r1, [r7, #0]
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f000 fb27 	bl	800b82e <USBD_CtlError>
        err++;
 800b1e0:	7afb      	ldrb	r3, [r7, #11]
 800b1e2:	3301      	adds	r3, #1
 800b1e4:	72fb      	strb	r3, [r7, #11]
      break;
 800b1e6:	e11e      	b.n	800b426 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	687a      	ldr	r2, [r7, #4]
 800b1f2:	7c12      	ldrb	r2, [r2, #16]
 800b1f4:	f107 0108 	add.w	r1, r7, #8
 800b1f8:	4610      	mov	r0, r2
 800b1fa:	4798      	blx	r3
 800b1fc:	60f8      	str	r0, [r7, #12]
      break;
 800b1fe:	e112      	b.n	800b426 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	7c1b      	ldrb	r3, [r3, #16]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d10d      	bne.n	800b224 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b20e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b210:	f107 0208 	add.w	r2, r7, #8
 800b214:	4610      	mov	r0, r2
 800b216:	4798      	blx	r3
 800b218:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	3301      	adds	r3, #1
 800b21e:	2202      	movs	r2, #2
 800b220:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b222:	e100      	b.n	800b426 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b22c:	f107 0208 	add.w	r2, r7, #8
 800b230:	4610      	mov	r0, r2
 800b232:	4798      	blx	r3
 800b234:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	3301      	adds	r3, #1
 800b23a:	2202      	movs	r2, #2
 800b23c:	701a      	strb	r2, [r3, #0]
      break;
 800b23e:	e0f2      	b.n	800b426 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	885b      	ldrh	r3, [r3, #2]
 800b244:	b2db      	uxtb	r3, r3
 800b246:	2b05      	cmp	r3, #5
 800b248:	f200 80ac 	bhi.w	800b3a4 <USBD_GetDescriptor+0x258>
 800b24c:	a201      	add	r2, pc, #4	; (adr r2, 800b254 <USBD_GetDescriptor+0x108>)
 800b24e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b252:	bf00      	nop
 800b254:	0800b26d 	.word	0x0800b26d
 800b258:	0800b2a1 	.word	0x0800b2a1
 800b25c:	0800b2d5 	.word	0x0800b2d5
 800b260:	0800b309 	.word	0x0800b309
 800b264:	0800b33d 	.word	0x0800b33d
 800b268:	0800b371 	.word	0x0800b371
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d00b      	beq.n	800b290 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	687a      	ldr	r2, [r7, #4]
 800b282:	7c12      	ldrb	r2, [r2, #16]
 800b284:	f107 0108 	add.w	r1, r7, #8
 800b288:	4610      	mov	r0, r2
 800b28a:	4798      	blx	r3
 800b28c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b28e:	e091      	b.n	800b3b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b290:	6839      	ldr	r1, [r7, #0]
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f000 facb 	bl	800b82e <USBD_CtlError>
            err++;
 800b298:	7afb      	ldrb	r3, [r7, #11]
 800b29a:	3301      	adds	r3, #1
 800b29c:	72fb      	strb	r3, [r7, #11]
          break;
 800b29e:	e089      	b.n	800b3b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2a6:	689b      	ldr	r3, [r3, #8]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d00b      	beq.n	800b2c4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2b2:	689b      	ldr	r3, [r3, #8]
 800b2b4:	687a      	ldr	r2, [r7, #4]
 800b2b6:	7c12      	ldrb	r2, [r2, #16]
 800b2b8:	f107 0108 	add.w	r1, r7, #8
 800b2bc:	4610      	mov	r0, r2
 800b2be:	4798      	blx	r3
 800b2c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2c2:	e077      	b.n	800b3b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b2c4:	6839      	ldr	r1, [r7, #0]
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f000 fab1 	bl	800b82e <USBD_CtlError>
            err++;
 800b2cc:	7afb      	ldrb	r3, [r7, #11]
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	72fb      	strb	r3, [r7, #11]
          break;
 800b2d2:	e06f      	b.n	800b3b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2da:	68db      	ldr	r3, [r3, #12]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d00b      	beq.n	800b2f8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2e6:	68db      	ldr	r3, [r3, #12]
 800b2e8:	687a      	ldr	r2, [r7, #4]
 800b2ea:	7c12      	ldrb	r2, [r2, #16]
 800b2ec:	f107 0108 	add.w	r1, r7, #8
 800b2f0:	4610      	mov	r0, r2
 800b2f2:	4798      	blx	r3
 800b2f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2f6:	e05d      	b.n	800b3b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b2f8:	6839      	ldr	r1, [r7, #0]
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f000 fa97 	bl	800b82e <USBD_CtlError>
            err++;
 800b300:	7afb      	ldrb	r3, [r7, #11]
 800b302:	3301      	adds	r3, #1
 800b304:	72fb      	strb	r3, [r7, #11]
          break;
 800b306:	e055      	b.n	800b3b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b30e:	691b      	ldr	r3, [r3, #16]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d00b      	beq.n	800b32c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b31a:	691b      	ldr	r3, [r3, #16]
 800b31c:	687a      	ldr	r2, [r7, #4]
 800b31e:	7c12      	ldrb	r2, [r2, #16]
 800b320:	f107 0108 	add.w	r1, r7, #8
 800b324:	4610      	mov	r0, r2
 800b326:	4798      	blx	r3
 800b328:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b32a:	e043      	b.n	800b3b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b32c:	6839      	ldr	r1, [r7, #0]
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f000 fa7d 	bl	800b82e <USBD_CtlError>
            err++;
 800b334:	7afb      	ldrb	r3, [r7, #11]
 800b336:	3301      	adds	r3, #1
 800b338:	72fb      	strb	r3, [r7, #11]
          break;
 800b33a:	e03b      	b.n	800b3b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b342:	695b      	ldr	r3, [r3, #20]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d00b      	beq.n	800b360 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b34e:	695b      	ldr	r3, [r3, #20]
 800b350:	687a      	ldr	r2, [r7, #4]
 800b352:	7c12      	ldrb	r2, [r2, #16]
 800b354:	f107 0108 	add.w	r1, r7, #8
 800b358:	4610      	mov	r0, r2
 800b35a:	4798      	blx	r3
 800b35c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b35e:	e029      	b.n	800b3b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b360:	6839      	ldr	r1, [r7, #0]
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f000 fa63 	bl	800b82e <USBD_CtlError>
            err++;
 800b368:	7afb      	ldrb	r3, [r7, #11]
 800b36a:	3301      	adds	r3, #1
 800b36c:	72fb      	strb	r3, [r7, #11]
          break;
 800b36e:	e021      	b.n	800b3b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b376:	699b      	ldr	r3, [r3, #24]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d00b      	beq.n	800b394 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b382:	699b      	ldr	r3, [r3, #24]
 800b384:	687a      	ldr	r2, [r7, #4]
 800b386:	7c12      	ldrb	r2, [r2, #16]
 800b388:	f107 0108 	add.w	r1, r7, #8
 800b38c:	4610      	mov	r0, r2
 800b38e:	4798      	blx	r3
 800b390:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b392:	e00f      	b.n	800b3b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b394:	6839      	ldr	r1, [r7, #0]
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f000 fa49 	bl	800b82e <USBD_CtlError>
            err++;
 800b39c:	7afb      	ldrb	r3, [r7, #11]
 800b39e:	3301      	adds	r3, #1
 800b3a0:	72fb      	strb	r3, [r7, #11]
          break;
 800b3a2:	e007      	b.n	800b3b4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b3a4:	6839      	ldr	r1, [r7, #0]
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f000 fa41 	bl	800b82e <USBD_CtlError>
          err++;
 800b3ac:	7afb      	ldrb	r3, [r7, #11]
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b3b2:	bf00      	nop
      }
      break;
 800b3b4:	e037      	b.n	800b426 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	7c1b      	ldrb	r3, [r3, #16]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d109      	bne.n	800b3d2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3c6:	f107 0208 	add.w	r2, r7, #8
 800b3ca:	4610      	mov	r0, r2
 800b3cc:	4798      	blx	r3
 800b3ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b3d0:	e029      	b.n	800b426 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b3d2:	6839      	ldr	r1, [r7, #0]
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f000 fa2a 	bl	800b82e <USBD_CtlError>
        err++;
 800b3da:	7afb      	ldrb	r3, [r7, #11]
 800b3dc:	3301      	adds	r3, #1
 800b3de:	72fb      	strb	r3, [r7, #11]
      break;
 800b3e0:	e021      	b.n	800b426 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	7c1b      	ldrb	r3, [r3, #16]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d10d      	bne.n	800b406 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3f2:	f107 0208 	add.w	r2, r7, #8
 800b3f6:	4610      	mov	r0, r2
 800b3f8:	4798      	blx	r3
 800b3fa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	3301      	adds	r3, #1
 800b400:	2207      	movs	r2, #7
 800b402:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b404:	e00f      	b.n	800b426 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b406:	6839      	ldr	r1, [r7, #0]
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f000 fa10 	bl	800b82e <USBD_CtlError>
        err++;
 800b40e:	7afb      	ldrb	r3, [r7, #11]
 800b410:	3301      	adds	r3, #1
 800b412:	72fb      	strb	r3, [r7, #11]
      break;
 800b414:	e007      	b.n	800b426 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b416:	6839      	ldr	r1, [r7, #0]
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f000 fa08 	bl	800b82e <USBD_CtlError>
      err++;
 800b41e:	7afb      	ldrb	r3, [r7, #11]
 800b420:	3301      	adds	r3, #1
 800b422:	72fb      	strb	r3, [r7, #11]
      break;
 800b424:	bf00      	nop
  }

  if (err != 0U)
 800b426:	7afb      	ldrb	r3, [r7, #11]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d11e      	bne.n	800b46a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	88db      	ldrh	r3, [r3, #6]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d016      	beq.n	800b462 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b434:	893b      	ldrh	r3, [r7, #8]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d00e      	beq.n	800b458 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	88da      	ldrh	r2, [r3, #6]
 800b43e:	893b      	ldrh	r3, [r7, #8]
 800b440:	4293      	cmp	r3, r2
 800b442:	bf28      	it	cs
 800b444:	4613      	movcs	r3, r2
 800b446:	b29b      	uxth	r3, r3
 800b448:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b44a:	893b      	ldrh	r3, [r7, #8]
 800b44c:	461a      	mov	r2, r3
 800b44e:	68f9      	ldr	r1, [r7, #12]
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f000 fa5d 	bl	800b910 <USBD_CtlSendData>
 800b456:	e009      	b.n	800b46c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b458:	6839      	ldr	r1, [r7, #0]
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f000 f9e7 	bl	800b82e <USBD_CtlError>
 800b460:	e004      	b.n	800b46c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f000 fa91 	bl	800b98a <USBD_CtlSendStatus>
 800b468:	e000      	b.n	800b46c <USBD_GetDescriptor+0x320>
    return;
 800b46a:	bf00      	nop
  }
}
 800b46c:	3710      	adds	r7, #16
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
 800b472:	bf00      	nop

0800b474 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b084      	sub	sp, #16
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	889b      	ldrh	r3, [r3, #4]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d131      	bne.n	800b4ea <USBD_SetAddress+0x76>
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	88db      	ldrh	r3, [r3, #6]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d12d      	bne.n	800b4ea <USBD_SetAddress+0x76>
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	885b      	ldrh	r3, [r3, #2]
 800b492:	2b7f      	cmp	r3, #127	; 0x7f
 800b494:	d829      	bhi.n	800b4ea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	885b      	ldrh	r3, [r3, #2]
 800b49a:	b2db      	uxtb	r3, r3
 800b49c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4a8:	b2db      	uxtb	r3, r3
 800b4aa:	2b03      	cmp	r3, #3
 800b4ac:	d104      	bne.n	800b4b8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b4ae:	6839      	ldr	r1, [r7, #0]
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f000 f9bc 	bl	800b82e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4b6:	e01d      	b.n	800b4f4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	7bfa      	ldrb	r2, [r7, #15]
 800b4bc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b4c0:	7bfb      	ldrb	r3, [r7, #15]
 800b4c2:	4619      	mov	r1, r3
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f005 fe0d 	bl	80110e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f000 fa5d 	bl	800b98a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b4d0:	7bfb      	ldrb	r3, [r7, #15]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d004      	beq.n	800b4e0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2202      	movs	r2, #2
 800b4da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4de:	e009      	b.n	800b4f4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4e8:	e004      	b.n	800b4f4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b4ea:	6839      	ldr	r1, [r7, #0]
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f000 f99e 	bl	800b82e <USBD_CtlError>
  }
}
 800b4f2:	bf00      	nop
 800b4f4:	bf00      	nop
 800b4f6:	3710      	adds	r7, #16
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}

0800b4fc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b084      	sub	sp, #16
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
 800b504:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b506:	2300      	movs	r3, #0
 800b508:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	885b      	ldrh	r3, [r3, #2]
 800b50e:	b2da      	uxtb	r2, r3
 800b510:	4b4e      	ldr	r3, [pc, #312]	; (800b64c <USBD_SetConfig+0x150>)
 800b512:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b514:	4b4d      	ldr	r3, [pc, #308]	; (800b64c <USBD_SetConfig+0x150>)
 800b516:	781b      	ldrb	r3, [r3, #0]
 800b518:	2b01      	cmp	r3, #1
 800b51a:	d905      	bls.n	800b528 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b51c:	6839      	ldr	r1, [r7, #0]
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f000 f985 	bl	800b82e <USBD_CtlError>
    return USBD_FAIL;
 800b524:	2303      	movs	r3, #3
 800b526:	e08c      	b.n	800b642 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b52e:	b2db      	uxtb	r3, r3
 800b530:	2b02      	cmp	r3, #2
 800b532:	d002      	beq.n	800b53a <USBD_SetConfig+0x3e>
 800b534:	2b03      	cmp	r3, #3
 800b536:	d029      	beq.n	800b58c <USBD_SetConfig+0x90>
 800b538:	e075      	b.n	800b626 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b53a:	4b44      	ldr	r3, [pc, #272]	; (800b64c <USBD_SetConfig+0x150>)
 800b53c:	781b      	ldrb	r3, [r3, #0]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d020      	beq.n	800b584 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b542:	4b42      	ldr	r3, [pc, #264]	; (800b64c <USBD_SetConfig+0x150>)
 800b544:	781b      	ldrb	r3, [r3, #0]
 800b546:	461a      	mov	r2, r3
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b54c:	4b3f      	ldr	r3, [pc, #252]	; (800b64c <USBD_SetConfig+0x150>)
 800b54e:	781b      	ldrb	r3, [r3, #0]
 800b550:	4619      	mov	r1, r3
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f7fe ffbd 	bl	800a4d2 <USBD_SetClassConfig>
 800b558:	4603      	mov	r3, r0
 800b55a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b55c:	7bfb      	ldrb	r3, [r7, #15]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d008      	beq.n	800b574 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b562:	6839      	ldr	r1, [r7, #0]
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f000 f962 	bl	800b82e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2202      	movs	r2, #2
 800b56e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b572:	e065      	b.n	800b640 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f000 fa08 	bl	800b98a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2203      	movs	r2, #3
 800b57e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b582:	e05d      	b.n	800b640 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f000 fa00 	bl	800b98a <USBD_CtlSendStatus>
      break;
 800b58a:	e059      	b.n	800b640 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b58c:	4b2f      	ldr	r3, [pc, #188]	; (800b64c <USBD_SetConfig+0x150>)
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d112      	bne.n	800b5ba <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2202      	movs	r2, #2
 800b598:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b59c:	4b2b      	ldr	r3, [pc, #172]	; (800b64c <USBD_SetConfig+0x150>)
 800b59e:	781b      	ldrb	r3, [r3, #0]
 800b5a0:	461a      	mov	r2, r3
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b5a6:	4b29      	ldr	r3, [pc, #164]	; (800b64c <USBD_SetConfig+0x150>)
 800b5a8:	781b      	ldrb	r3, [r3, #0]
 800b5aa:	4619      	mov	r1, r3
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f7fe ffac 	bl	800a50a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f000 f9e9 	bl	800b98a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b5b8:	e042      	b.n	800b640 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b5ba:	4b24      	ldr	r3, [pc, #144]	; (800b64c <USBD_SetConfig+0x150>)
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	461a      	mov	r2, r3
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	685b      	ldr	r3, [r3, #4]
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	d02a      	beq.n	800b61e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	685b      	ldr	r3, [r3, #4]
 800b5cc:	b2db      	uxtb	r3, r3
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f7fe ff9a 	bl	800a50a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b5d6:	4b1d      	ldr	r3, [pc, #116]	; (800b64c <USBD_SetConfig+0x150>)
 800b5d8:	781b      	ldrb	r3, [r3, #0]
 800b5da:	461a      	mov	r2, r3
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b5e0:	4b1a      	ldr	r3, [pc, #104]	; (800b64c <USBD_SetConfig+0x150>)
 800b5e2:	781b      	ldrb	r3, [r3, #0]
 800b5e4:	4619      	mov	r1, r3
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f7fe ff73 	bl	800a4d2 <USBD_SetClassConfig>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b5f0:	7bfb      	ldrb	r3, [r7, #15]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d00f      	beq.n	800b616 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b5f6:	6839      	ldr	r1, [r7, #0]
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f000 f918 	bl	800b82e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	685b      	ldr	r3, [r3, #4]
 800b602:	b2db      	uxtb	r3, r3
 800b604:	4619      	mov	r1, r3
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f7fe ff7f 	bl	800a50a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2202      	movs	r2, #2
 800b610:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b614:	e014      	b.n	800b640 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f000 f9b7 	bl	800b98a <USBD_CtlSendStatus>
      break;
 800b61c:	e010      	b.n	800b640 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f000 f9b3 	bl	800b98a <USBD_CtlSendStatus>
      break;
 800b624:	e00c      	b.n	800b640 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b626:	6839      	ldr	r1, [r7, #0]
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 f900 	bl	800b82e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b62e:	4b07      	ldr	r3, [pc, #28]	; (800b64c <USBD_SetConfig+0x150>)
 800b630:	781b      	ldrb	r3, [r3, #0]
 800b632:	4619      	mov	r1, r3
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f7fe ff68 	bl	800a50a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b63a:	2303      	movs	r3, #3
 800b63c:	73fb      	strb	r3, [r7, #15]
      break;
 800b63e:	bf00      	nop
  }

  return ret;
 800b640:	7bfb      	ldrb	r3, [r7, #15]
}
 800b642:	4618      	mov	r0, r3
 800b644:	3710      	adds	r7, #16
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}
 800b64a:	bf00      	nop
 800b64c:	20000544 	.word	0x20000544

0800b650 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b082      	sub	sp, #8
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	88db      	ldrh	r3, [r3, #6]
 800b65e:	2b01      	cmp	r3, #1
 800b660:	d004      	beq.n	800b66c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b662:	6839      	ldr	r1, [r7, #0]
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f000 f8e2 	bl	800b82e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b66a:	e023      	b.n	800b6b4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b672:	b2db      	uxtb	r3, r3
 800b674:	2b02      	cmp	r3, #2
 800b676:	dc02      	bgt.n	800b67e <USBD_GetConfig+0x2e>
 800b678:	2b00      	cmp	r3, #0
 800b67a:	dc03      	bgt.n	800b684 <USBD_GetConfig+0x34>
 800b67c:	e015      	b.n	800b6aa <USBD_GetConfig+0x5a>
 800b67e:	2b03      	cmp	r3, #3
 800b680:	d00b      	beq.n	800b69a <USBD_GetConfig+0x4a>
 800b682:	e012      	b.n	800b6aa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2200      	movs	r2, #0
 800b688:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	3308      	adds	r3, #8
 800b68e:	2201      	movs	r2, #1
 800b690:	4619      	mov	r1, r3
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f000 f93c 	bl	800b910 <USBD_CtlSendData>
        break;
 800b698:	e00c      	b.n	800b6b4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	3304      	adds	r3, #4
 800b69e:	2201      	movs	r2, #1
 800b6a0:	4619      	mov	r1, r3
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f000 f934 	bl	800b910 <USBD_CtlSendData>
        break;
 800b6a8:	e004      	b.n	800b6b4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b6aa:	6839      	ldr	r1, [r7, #0]
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f000 f8be 	bl	800b82e <USBD_CtlError>
        break;
 800b6b2:	bf00      	nop
}
 800b6b4:	bf00      	nop
 800b6b6:	3708      	adds	r7, #8
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}

0800b6bc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b082      	sub	sp, #8
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6cc:	b2db      	uxtb	r3, r3
 800b6ce:	3b01      	subs	r3, #1
 800b6d0:	2b02      	cmp	r3, #2
 800b6d2:	d81e      	bhi.n	800b712 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	88db      	ldrh	r3, [r3, #6]
 800b6d8:	2b02      	cmp	r3, #2
 800b6da:	d004      	beq.n	800b6e6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b6dc:	6839      	ldr	r1, [r7, #0]
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f000 f8a5 	bl	800b82e <USBD_CtlError>
        break;
 800b6e4:	e01a      	b.n	800b71c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2201      	movs	r2, #1
 800b6ea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d005      	beq.n	800b702 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	68db      	ldr	r3, [r3, #12]
 800b6fa:	f043 0202 	orr.w	r2, r3, #2
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	330c      	adds	r3, #12
 800b706:	2202      	movs	r2, #2
 800b708:	4619      	mov	r1, r3
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f000 f900 	bl	800b910 <USBD_CtlSendData>
      break;
 800b710:	e004      	b.n	800b71c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b712:	6839      	ldr	r1, [r7, #0]
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f000 f88a 	bl	800b82e <USBD_CtlError>
      break;
 800b71a:	bf00      	nop
  }
}
 800b71c:	bf00      	nop
 800b71e:	3708      	adds	r7, #8
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b082      	sub	sp, #8
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	885b      	ldrh	r3, [r3, #2]
 800b732:	2b01      	cmp	r3, #1
 800b734:	d107      	bne.n	800b746 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2201      	movs	r2, #1
 800b73a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f000 f923 	bl	800b98a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b744:	e013      	b.n	800b76e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	885b      	ldrh	r3, [r3, #2]
 800b74a:	2b02      	cmp	r3, #2
 800b74c:	d10b      	bne.n	800b766 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	889b      	ldrh	r3, [r3, #4]
 800b752:	0a1b      	lsrs	r3, r3, #8
 800b754:	b29b      	uxth	r3, r3
 800b756:	b2da      	uxtb	r2, r3
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f000 f913 	bl	800b98a <USBD_CtlSendStatus>
}
 800b764:	e003      	b.n	800b76e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b766:	6839      	ldr	r1, [r7, #0]
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f000 f860 	bl	800b82e <USBD_CtlError>
}
 800b76e:	bf00      	nop
 800b770:	3708      	adds	r7, #8
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}

0800b776 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b776:	b580      	push	{r7, lr}
 800b778:	b082      	sub	sp, #8
 800b77a:	af00      	add	r7, sp, #0
 800b77c:	6078      	str	r0, [r7, #4]
 800b77e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b786:	b2db      	uxtb	r3, r3
 800b788:	3b01      	subs	r3, #1
 800b78a:	2b02      	cmp	r3, #2
 800b78c:	d80b      	bhi.n	800b7a6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	885b      	ldrh	r3, [r3, #2]
 800b792:	2b01      	cmp	r3, #1
 800b794:	d10c      	bne.n	800b7b0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2200      	movs	r2, #0
 800b79a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f000 f8f3 	bl	800b98a <USBD_CtlSendStatus>
      }
      break;
 800b7a4:	e004      	b.n	800b7b0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b7a6:	6839      	ldr	r1, [r7, #0]
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f000 f840 	bl	800b82e <USBD_CtlError>
      break;
 800b7ae:	e000      	b.n	800b7b2 <USBD_ClrFeature+0x3c>
      break;
 800b7b0:	bf00      	nop
  }
}
 800b7b2:	bf00      	nop
 800b7b4:	3708      	adds	r7, #8
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}

0800b7ba <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b7ba:	b580      	push	{r7, lr}
 800b7bc:	b084      	sub	sp, #16
 800b7be:	af00      	add	r7, sp, #0
 800b7c0:	6078      	str	r0, [r7, #4]
 800b7c2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	781a      	ldrb	r2, [r3, #0]
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	781a      	ldrb	r2, [r3, #0]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	3301      	adds	r3, #1
 800b7e2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b7e4:	68f8      	ldr	r0, [r7, #12]
 800b7e6:	f7ff fa17 	bl	800ac18 <SWAPBYTE>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	461a      	mov	r2, r3
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	3301      	adds	r3, #1
 800b7f6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	3301      	adds	r3, #1
 800b7fc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b7fe:	68f8      	ldr	r0, [r7, #12]
 800b800:	f7ff fa0a 	bl	800ac18 <SWAPBYTE>
 800b804:	4603      	mov	r3, r0
 800b806:	461a      	mov	r2, r3
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	3301      	adds	r3, #1
 800b810:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	3301      	adds	r3, #1
 800b816:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b818:	68f8      	ldr	r0, [r7, #12]
 800b81a:	f7ff f9fd 	bl	800ac18 <SWAPBYTE>
 800b81e:	4603      	mov	r3, r0
 800b820:	461a      	mov	r2, r3
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	80da      	strh	r2, [r3, #6]
}
 800b826:	bf00      	nop
 800b828:	3710      	adds	r7, #16
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}

0800b82e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b82e:	b580      	push	{r7, lr}
 800b830:	b082      	sub	sp, #8
 800b832:	af00      	add	r7, sp, #0
 800b834:	6078      	str	r0, [r7, #4]
 800b836:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b838:	2180      	movs	r1, #128	; 0x80
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f005 fbe8 	bl	8011010 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b840:	2100      	movs	r1, #0
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f005 fbe4 	bl	8011010 <USBD_LL_StallEP>
}
 800b848:	bf00      	nop
 800b84a:	3708      	adds	r7, #8
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}

0800b850 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b086      	sub	sp, #24
 800b854:	af00      	add	r7, sp, #0
 800b856:	60f8      	str	r0, [r7, #12]
 800b858:	60b9      	str	r1, [r7, #8]
 800b85a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b85c:	2300      	movs	r3, #0
 800b85e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d036      	beq.n	800b8d4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b86a:	6938      	ldr	r0, [r7, #16]
 800b86c:	f000 f836 	bl	800b8dc <USBD_GetLen>
 800b870:	4603      	mov	r3, r0
 800b872:	3301      	adds	r3, #1
 800b874:	b29b      	uxth	r3, r3
 800b876:	005b      	lsls	r3, r3, #1
 800b878:	b29a      	uxth	r2, r3
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b87e:	7dfb      	ldrb	r3, [r7, #23]
 800b880:	68ba      	ldr	r2, [r7, #8]
 800b882:	4413      	add	r3, r2
 800b884:	687a      	ldr	r2, [r7, #4]
 800b886:	7812      	ldrb	r2, [r2, #0]
 800b888:	701a      	strb	r2, [r3, #0]
  idx++;
 800b88a:	7dfb      	ldrb	r3, [r7, #23]
 800b88c:	3301      	adds	r3, #1
 800b88e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b890:	7dfb      	ldrb	r3, [r7, #23]
 800b892:	68ba      	ldr	r2, [r7, #8]
 800b894:	4413      	add	r3, r2
 800b896:	2203      	movs	r2, #3
 800b898:	701a      	strb	r2, [r3, #0]
  idx++;
 800b89a:	7dfb      	ldrb	r3, [r7, #23]
 800b89c:	3301      	adds	r3, #1
 800b89e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b8a0:	e013      	b.n	800b8ca <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b8a2:	7dfb      	ldrb	r3, [r7, #23]
 800b8a4:	68ba      	ldr	r2, [r7, #8]
 800b8a6:	4413      	add	r3, r2
 800b8a8:	693a      	ldr	r2, [r7, #16]
 800b8aa:	7812      	ldrb	r2, [r2, #0]
 800b8ac:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	3301      	adds	r3, #1
 800b8b2:	613b      	str	r3, [r7, #16]
    idx++;
 800b8b4:	7dfb      	ldrb	r3, [r7, #23]
 800b8b6:	3301      	adds	r3, #1
 800b8b8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b8ba:	7dfb      	ldrb	r3, [r7, #23]
 800b8bc:	68ba      	ldr	r2, [r7, #8]
 800b8be:	4413      	add	r3, r2
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	701a      	strb	r2, [r3, #0]
    idx++;
 800b8c4:	7dfb      	ldrb	r3, [r7, #23]
 800b8c6:	3301      	adds	r3, #1
 800b8c8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	781b      	ldrb	r3, [r3, #0]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d1e7      	bne.n	800b8a2 <USBD_GetString+0x52>
 800b8d2:	e000      	b.n	800b8d6 <USBD_GetString+0x86>
    return;
 800b8d4:	bf00      	nop
  }
}
 800b8d6:	3718      	adds	r7, #24
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}

0800b8dc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b085      	sub	sp, #20
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b8ec:	e005      	b.n	800b8fa <USBD_GetLen+0x1e>
  {
    len++;
 800b8ee:	7bfb      	ldrb	r3, [r7, #15]
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	3301      	adds	r3, #1
 800b8f8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	781b      	ldrb	r3, [r3, #0]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d1f5      	bne.n	800b8ee <USBD_GetLen+0x12>
  }

  return len;
 800b902:	7bfb      	ldrb	r3, [r7, #15]
}
 800b904:	4618      	mov	r0, r3
 800b906:	3714      	adds	r7, #20
 800b908:	46bd      	mov	sp, r7
 800b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90e:	4770      	bx	lr

0800b910 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b084      	sub	sp, #16
 800b914:	af00      	add	r7, sp, #0
 800b916:	60f8      	str	r0, [r7, #12]
 800b918:	60b9      	str	r1, [r7, #8]
 800b91a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	2202      	movs	r2, #2
 800b920:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	687a      	ldr	r2, [r7, #4]
 800b928:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	687a      	ldr	r2, [r7, #4]
 800b92e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	68ba      	ldr	r2, [r7, #8]
 800b934:	2100      	movs	r1, #0
 800b936:	68f8      	ldr	r0, [r7, #12]
 800b938:	f005 fbf3 	bl	8011122 <USBD_LL_Transmit>

  return USBD_OK;
 800b93c:	2300      	movs	r3, #0
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3710      	adds	r7, #16
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}

0800b946 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b946:	b580      	push	{r7, lr}
 800b948:	b084      	sub	sp, #16
 800b94a:	af00      	add	r7, sp, #0
 800b94c:	60f8      	str	r0, [r7, #12]
 800b94e:	60b9      	str	r1, [r7, #8]
 800b950:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	68ba      	ldr	r2, [r7, #8]
 800b956:	2100      	movs	r1, #0
 800b958:	68f8      	ldr	r0, [r7, #12]
 800b95a:	f005 fbe2 	bl	8011122 <USBD_LL_Transmit>

  return USBD_OK;
 800b95e:	2300      	movs	r3, #0
}
 800b960:	4618      	mov	r0, r3
 800b962:	3710      	adds	r7, #16
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}

0800b968 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b084      	sub	sp, #16
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	60f8      	str	r0, [r7, #12]
 800b970:	60b9      	str	r1, [r7, #8]
 800b972:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	68ba      	ldr	r2, [r7, #8]
 800b978:	2100      	movs	r1, #0
 800b97a:	68f8      	ldr	r0, [r7, #12]
 800b97c:	f005 fbf2 	bl	8011164 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b980:	2300      	movs	r3, #0
}
 800b982:	4618      	mov	r0, r3
 800b984:	3710      	adds	r7, #16
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}

0800b98a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b98a:	b580      	push	{r7, lr}
 800b98c:	b082      	sub	sp, #8
 800b98e:	af00      	add	r7, sp, #0
 800b990:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2204      	movs	r2, #4
 800b996:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b99a:	2300      	movs	r3, #0
 800b99c:	2200      	movs	r2, #0
 800b99e:	2100      	movs	r1, #0
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f005 fbbe 	bl	8011122 <USBD_LL_Transmit>

  return USBD_OK;
 800b9a6:	2300      	movs	r3, #0
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	3708      	adds	r7, #8
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}

0800b9b0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b082      	sub	sp, #8
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2205      	movs	r2, #5
 800b9bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	2100      	movs	r1, #0
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f005 fbcc 	bl	8011164 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b9cc:	2300      	movs	r3, #0
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3708      	adds	r7, #8
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}
	...

0800b9d8 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800b9d8:	b590      	push	{r4, r7, lr}
 800b9da:	b08b      	sub	sp, #44	; 0x2c
 800b9dc:	af04      	add	r7, sp, #16
 800b9de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint8_t max_ep;
  uint8_t num = 0U;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b9ea:	7919      	ldrb	r1, [r3, #4]
 800b9ec:	23ff      	movs	r3, #255	; 0xff
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f000 ffb5 	bl	800c960 <USBH_FindInterface>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b9fa:	7dbb      	ldrb	r3, [r7, #22]
 800b9fc:	2bff      	cmp	r3, #255	; 0xff
 800b9fe:	d002      	beq.n	800ba06 <USBH_HID_InterfaceInit+0x2e>
 800ba00:	7dbb      	ldrb	r3, [r7, #22]
 800ba02:	2b01      	cmp	r3, #1
 800ba04:	d901      	bls.n	800ba0a <USBH_HID_InterfaceInit+0x32>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800ba06:	2302      	movs	r3, #2
 800ba08:	e108      	b.n	800bc1c <USBH_HID_InterfaceInit+0x244>
  }

  status = USBH_SelectInterface(phost, interface);
 800ba0a:	7dbb      	ldrb	r3, [r7, #22]
 800ba0c:	4619      	mov	r1, r3
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f000 ff8a 	bl	800c928 <USBH_SelectInterface>
 800ba14:	4603      	mov	r3, r0
 800ba16:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 800ba18:	7d7b      	ldrb	r3, [r7, #21]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d001      	beq.n	800ba22 <USBH_HID_InterfaceInit+0x4a>
  {
    return USBH_FAIL;
 800ba1e:	2302      	movs	r3, #2
 800ba20:	e0fc      	b.n	800bc1c <USBH_HID_InterfaceInit+0x244>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800ba28:	2034      	movs	r0, #52	; 0x34
 800ba2a:	f005 ff91 	bl	8011950 <malloc>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba38:	69db      	ldr	r3, [r3, #28]
 800ba3a:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d101      	bne.n	800ba46 <USBH_HID_InterfaceInit+0x6e>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
    return USBH_FAIL;
 800ba42:	2302      	movs	r3, #2
 800ba44:	e0ea      	b.n	800bc1c <USBH_HID_InterfaceInit+0x244>
  }

  /* Initialize hid handler */
  (void)USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 800ba46:	2234      	movs	r2, #52	; 0x34
 800ba48:	2100      	movs	r1, #0
 800ba4a:	6938      	ldr	r0, [r7, #16]
 800ba4c:	f005 ff9e 	bl	801198c <memset>

  HID_Handle->state = HID_ERROR;
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	2207      	movs	r2, #7
 800ba54:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 800ba56:	7dbb      	ldrb	r3, [r7, #22]
 800ba58:	687a      	ldr	r2, [r7, #4]
 800ba5a:	211a      	movs	r1, #26
 800ba5c:	fb01 f303 	mul.w	r3, r1, r3
 800ba60:	4413      	add	r3, r2
 800ba62:	f203 3349 	addw	r3, r3, #841	; 0x349
 800ba66:	781b      	ldrb	r3, [r3, #0]
 800ba68:	2b01      	cmp	r3, #1
 800ba6a:	d103      	bne.n	800ba74 <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_UsrLog("KeyBoard device found!");
    HID_Handle->Init = USBH_HID_KeybdInit;
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	4a6d      	ldr	r2, [pc, #436]	; (800bc24 <USBH_HID_InterfaceInit+0x24c>)
 800ba70:	631a      	str	r2, [r3, #48]	; 0x30
 800ba72:	e010      	b.n	800ba96 <USBH_HID_InterfaceInit+0xbe>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 800ba74:	7dbb      	ldrb	r3, [r7, #22]
 800ba76:	687a      	ldr	r2, [r7, #4]
 800ba78:	211a      	movs	r1, #26
 800ba7a:	fb01 f303 	mul.w	r3, r1, r3
 800ba7e:	4413      	add	r3, r2
 800ba80:	f203 3349 	addw	r3, r3, #841	; 0x349
 800ba84:	781b      	ldrb	r3, [r3, #0]
 800ba86:	2b02      	cmp	r3, #2
 800ba88:	d103      	bne.n	800ba92 <USBH_HID_InterfaceInit+0xba>
  {
    USBH_UsrLog("Mouse device found!");
    HID_Handle->Init = USBH_HID_MouseInit;
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	4a66      	ldr	r2, [pc, #408]	; (800bc28 <USBH_HID_InterfaceInit+0x250>)
 800ba8e:	631a      	str	r2, [r3, #48]	; 0x30
 800ba90:	e001      	b.n	800ba96 <USBH_HID_InterfaceInit+0xbe>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
    return USBH_FAIL;
 800ba92:	2302      	movs	r3, #2
 800ba94:	e0c2      	b.n	800bc1c <USBH_HID_InterfaceInit+0x244>
  }

  HID_Handle->state     = HID_INIT;
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	2200      	movs	r2, #0
 800ba9a:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = HID_REQ_INIT;
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800baa2:	7dbb      	ldrb	r3, [r7, #22]
 800baa4:	687a      	ldr	r2, [r7, #4]
 800baa6:	211a      	movs	r1, #26
 800baa8:	fb01 f303 	mul.w	r3, r1, r3
 800baac:	4413      	add	r3, r2
 800baae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800bab2:	781a      	ldrb	r2, [r3, #0]
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800bab8:	7dbb      	ldrb	r3, [r7, #22]
 800baba:	687a      	ldr	r2, [r7, #4]
 800babc:	211a      	movs	r1, #26
 800babe:	fb01 f303 	mul.w	r3, r1, r3
 800bac2:	4413      	add	r3, r2
 800bac4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800bac8:	881a      	ldrh	r2, [r3, #0]
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 800bace:	7dbb      	ldrb	r3, [r7, #22]
 800bad0:	687a      	ldr	r2, [r7, #4]
 800bad2:	211a      	movs	r1, #26
 800bad4:	fb01 f303 	mul.w	r3, r1, r3
 800bad8:	4413      	add	r3, r2
 800bada:	f203 3352 	addw	r3, r3, #850	; 0x352
 800bade:	781b      	ldrb	r3, [r3, #0]
 800bae0:	b29a      	uxth	r2, r3
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll  < HID_MIN_POLL)
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	8b9b      	ldrh	r3, [r3, #28]
 800baea:	2b09      	cmp	r3, #9
 800baec:	d802      	bhi.n	800baf4 <USBH_HID_InterfaceInit+0x11c>
  {
    HID_Handle->poll = HID_MIN_POLL;
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	220a      	movs	r2, #10
 800baf2:	839a      	strh	r2, [r3, #28]
  }

  /* Check of available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 800baf4:	7dbb      	ldrb	r3, [r7, #22]
 800baf6:	687a      	ldr	r2, [r7, #4]
 800baf8:	211a      	movs	r1, #26
 800bafa:	fb01 f303 	mul.w	r3, r1, r3
 800bafe:	4413      	add	r3, r2
 800bb00:	f203 3346 	addw	r3, r3, #838	; 0x346
 800bb04:	781b      	ldrb	r3, [r3, #0]
 800bb06:	2b02      	cmp	r3, #2
 800bb08:	bf28      	it	cs
 800bb0a:	2302      	movcs	r3, #2
 800bb0c:	73fb      	strb	r3, [r7, #15]
            phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 800bb0e:	2300      	movs	r3, #0
 800bb10:	75fb      	strb	r3, [r7, #23]
 800bb12:	e07d      	b.n	800bc10 <USBH_HID_InterfaceInit+0x238>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U) != 0U)
 800bb14:	7dbb      	ldrb	r3, [r7, #22]
 800bb16:	7df9      	ldrb	r1, [r7, #23]
 800bb18:	687a      	ldr	r2, [r7, #4]
 800bb1a:	3101      	adds	r1, #1
 800bb1c:	00c9      	lsls	r1, r1, #3
 800bb1e:	201a      	movs	r0, #26
 800bb20:	fb00 f303 	mul.w	r3, r0, r3
 800bb24:	440b      	add	r3, r1
 800bb26:	4413      	add	r3, r2
 800bb28:	f203 3346 	addw	r3, r3, #838	; 0x346
 800bb2c:	781b      	ldrb	r3, [r3, #0]
 800bb2e:	b25b      	sxtb	r3, r3
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	da35      	bge.n	800bba0 <USBH_HID_InterfaceInit+0x1c8>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 800bb34:	7dbb      	ldrb	r3, [r7, #22]
 800bb36:	7df9      	ldrb	r1, [r7, #23]
 800bb38:	687a      	ldr	r2, [r7, #4]
 800bb3a:	3101      	adds	r1, #1
 800bb3c:	00c9      	lsls	r1, r1, #3
 800bb3e:	201a      	movs	r0, #26
 800bb40:	fb00 f303 	mul.w	r3, r0, r3
 800bb44:	440b      	add	r3, r1
 800bb46:	4413      	add	r3, r2
 800bb48:	f203 3346 	addw	r3, r3, #838	; 0x346
 800bb4c:	781a      	ldrb	r2, [r3, #0]
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	791b      	ldrb	r3, [r3, #4]
 800bb56:	4619      	mov	r1, r3
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f002 fc02 	bl	800e362 <USBH_AllocPipe>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	461a      	mov	r2, r3
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	705a      	strb	r2, [r3, #1]

      /* Open pipe for IN endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	7859      	ldrb	r1, [r3, #1]
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	7918      	ldrb	r0, [r3, #4]
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bb7a:	693a      	ldr	r2, [r7, #16]
 800bb7c:	8b12      	ldrh	r2, [r2, #24]
 800bb7e:	9202      	str	r2, [sp, #8]
 800bb80:	2203      	movs	r2, #3
 800bb82:	9201      	str	r2, [sp, #4]
 800bb84:	9300      	str	r3, [sp, #0]
 800bb86:	4623      	mov	r3, r4
 800bb88:	4602      	mov	r2, r0
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f002 fbba 	bl	800e304 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      (void)USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	785b      	ldrb	r3, [r3, #1]
 800bb94:	2200      	movs	r2, #0
 800bb96:	4619      	mov	r1, r3
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f005 fe2b 	bl	80117f4 <USBH_LL_SetToggle>
 800bb9e:	e034      	b.n	800bc0a <USBH_HID_InterfaceInit+0x232>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 800bba0:	7dbb      	ldrb	r3, [r7, #22]
 800bba2:	7df9      	ldrb	r1, [r7, #23]
 800bba4:	687a      	ldr	r2, [r7, #4]
 800bba6:	3101      	adds	r1, #1
 800bba8:	00c9      	lsls	r1, r1, #3
 800bbaa:	201a      	movs	r0, #26
 800bbac:	fb00 f303 	mul.w	r3, r0, r3
 800bbb0:	440b      	add	r3, r1
 800bbb2:	4413      	add	r3, r2
 800bbb4:	f203 3346 	addw	r3, r3, #838	; 0x346
 800bbb8:	781a      	ldrb	r2, [r3, #0]
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe  = USBH_AllocPipe(phost, HID_Handle->OutEp);
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	78db      	ldrb	r3, [r3, #3]
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f002 fbcc 	bl	800e362 <USBH_AllocPipe>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	461a      	mov	r2, r3
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	701a      	strb	r2, [r3, #0]

      /* Open pipe for OUT endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	7819      	ldrb	r1, [r3, #0]
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	78d8      	ldrb	r0, [r3, #3]
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bbe6:	693a      	ldr	r2, [r7, #16]
 800bbe8:	8b12      	ldrh	r2, [r2, #24]
 800bbea:	9202      	str	r2, [sp, #8]
 800bbec:	2203      	movs	r2, #3
 800bbee:	9201      	str	r2, [sp, #4]
 800bbf0:	9300      	str	r3, [sp, #0]
 800bbf2:	4623      	mov	r3, r4
 800bbf4:	4602      	mov	r2, r0
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f002 fb84 	bl	800e304 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      (void)USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	781b      	ldrb	r3, [r3, #0]
 800bc00:	2200      	movs	r2, #0
 800bc02:	4619      	mov	r1, r3
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f005 fdf5 	bl	80117f4 <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 800bc0a:	7dfb      	ldrb	r3, [r7, #23]
 800bc0c:	3301      	adds	r3, #1
 800bc0e:	75fb      	strb	r3, [r7, #23]
 800bc10:	7dfa      	ldrb	r2, [r7, #23]
 800bc12:	7bfb      	ldrb	r3, [r7, #15]
 800bc14:	429a      	cmp	r2, r3
 800bc16:	f4ff af7d 	bcc.w	800bb14 <USBH_HID_InterfaceInit+0x13c>
    }
  }

  return USBH_OK;
 800bc1a:	2300      	movs	r3, #0
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	371c      	adds	r7, #28
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd90      	pop	{r4, r7, pc}
 800bc24:	0800c359 	.word	0x0800c359
 800bc28:	0800c5a1 	.word	0x0800c5a1

0800bc2c <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b084      	sub	sp, #16
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bc3a:	69db      	ldr	r3, [r3, #28]
 800bc3c:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	785b      	ldrb	r3, [r3, #1]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d00e      	beq.n	800bc64 <USBH_HID_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->InPipe);
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	785b      	ldrb	r3, [r3, #1]
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f002 fb78 	bl	800e342 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->InPipe);
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	785b      	ldrb	r3, [r3, #1]
 800bc56:	4619      	mov	r1, r3
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f002 fba3 	bl	800e3a4 <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	2200      	movs	r2, #0
 800bc62:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	781b      	ldrb	r3, [r3, #0]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d00e      	beq.n	800bc8a <USBH_HID_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->OutPipe);
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	781b      	ldrb	r3, [r3, #0]
 800bc70:	4619      	mov	r1, r3
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f002 fb65 	bl	800e342 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->OutPipe);
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	781b      	ldrb	r3, [r3, #0]
 800bc7c:	4619      	mov	r1, r3
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f002 fb90 	bl	800e3a4 <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	2200      	movs	r2, #0
 800bc88:	701a      	strb	r2, [r3, #0]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bc90:	69db      	ldr	r3, [r3, #28]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d00b      	beq.n	800bcae <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bc9c:	69db      	ldr	r3, [r3, #28]
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f005 fe5e 	bl	8011960 <free>
    phost->pActiveClass->pData = 0U;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bcaa:	2200      	movs	r2, #0
 800bcac:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800bcae:	2300      	movs	r3, #0
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	3710      	adds	r7, #16
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}

0800bcb8 <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b084      	sub	sp, #16
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bcce:	69db      	ldr	r3, [r3, #28]
 800bcd0:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	795b      	ldrb	r3, [r3, #5]
 800bcd6:	2b05      	cmp	r3, #5
 800bcd8:	d860      	bhi.n	800bd9c <USBH_HID_ClassRequest+0xe4>
 800bcda:	a201      	add	r2, pc, #4	; (adr r2, 800bce0 <USBH_HID_ClassRequest+0x28>)
 800bcdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bce0:	0800bcf9 	.word	0x0800bcf9
 800bce4:	0800bd9d 	.word	0x0800bd9d
 800bce8:	0800bd13 	.word	0x0800bd13
 800bcec:	0800bcf9 	.word	0x0800bcf9
 800bcf0:	0800bd3d 	.word	0x0800bd3d
 800bcf4:	0800bd67 	.word	0x0800bd67
  {
    case HID_REQ_INIT:
    case HID_REQ_GET_HID_DESC:

      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	331c      	adds	r3, #28
 800bd02:	4619      	mov	r1, r3
 800bd04:	4610      	mov	r0, r2
 800bd06:	f000 fa0f 	bl	800c128 <USBH_HID_ParseHIDDesc>

      HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	2202      	movs	r2, #2
 800bd0e:	715a      	strb	r2, [r3, #5]

      break;
 800bd10:	e04b      	b.n	800bdaa <USBH_HID_ClassRequest+0xf2>
    case HID_REQ_GET_REPORT_DESC:

      /* Get Report Desc */
      classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd16:	4619      	mov	r1, r3
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f000 f972 	bl	800c002 <USBH_HID_GetHIDReportDescriptor>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 800bd22:	7bbb      	ldrb	r3, [r7, #14]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d103      	bne.n	800bd30 <USBH_HID_ClassRequest+0x78>
      {
        /* The descriptor is available in phost->device.Data */
        HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	2204      	movs	r2, #4
 800bd2c:	715a      	strb	r2, [r3, #5]
      else
      {
        /* .. */
      }

      break;
 800bd2e:	e037      	b.n	800bda0 <USBH_HID_ClassRequest+0xe8>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 800bd30:	7bbb      	ldrb	r3, [r7, #14]
 800bd32:	2b03      	cmp	r3, #3
 800bd34:	d134      	bne.n	800bda0 <USBH_HID_ClassRequest+0xe8>
        status = USBH_FAIL;
 800bd36:	2302      	movs	r3, #2
 800bd38:	73fb      	strb	r3, [r7, #15]
      break;
 800bd3a:	e031      	b.n	800bda0 <USBH_HID_ClassRequest+0xe8>

    case HID_REQ_SET_IDLE:

      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	2100      	movs	r1, #0
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f000 f977 	bl	800c034 <USBH_HID_SetIdle>
 800bd46:	4603      	mov	r3, r0
 800bd48:	73bb      	strb	r3, [r7, #14]

      /* set Idle */
      if (classReqStatus == USBH_OK)
 800bd4a:	7bbb      	ldrb	r3, [r7, #14]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d103      	bne.n	800bd58 <USBH_HID_ClassRequest+0xa0>
      {
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	2205      	movs	r2, #5
 800bd54:	715a      	strb	r2, [r3, #5]
        if (classReqStatus == USBH_NOT_SUPPORTED)
        {
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
        }
      }
      break;
 800bd56:	e025      	b.n	800bda4 <USBH_HID_ClassRequest+0xec>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 800bd58:	7bbb      	ldrb	r3, [r7, #14]
 800bd5a:	2b03      	cmp	r3, #3
 800bd5c:	d122      	bne.n	800bda4 <USBH_HID_ClassRequest+0xec>
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	2205      	movs	r2, #5
 800bd62:	715a      	strb	r2, [r3, #5]
      break;
 800bd64:	e01e      	b.n	800bda4 <USBH_HID_ClassRequest+0xec>

    case HID_REQ_SET_PROTOCOL:
      /* set protocol */
      classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 800bd66:	2100      	movs	r1, #0
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f000 f9b7 	bl	800c0dc <USBH_HID_SetProtocol>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 800bd72:	7bbb      	ldrb	r3, [r7, #14]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d10b      	bne.n	800bd90 <USBH_HID_ClassRequest+0xd8>
      {
        HID_Handle->ctl_state = HID_REQ_IDLE;
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	2201      	movs	r2, #1
 800bd7c:	715a      	strb	r2, [r3, #5]

        /* all requests performed*/
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bd84:	2102      	movs	r1, #2
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	4798      	blx	r3
        status = USBH_OK;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	73fb      	strb	r3, [r7, #15]
      }
      else
      {
        /* .. */
      }
      break;
 800bd8e:	e00b      	b.n	800bda8 <USBH_HID_ClassRequest+0xf0>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 800bd90:	7bbb      	ldrb	r3, [r7, #14]
 800bd92:	2b03      	cmp	r3, #3
 800bd94:	d108      	bne.n	800bda8 <USBH_HID_ClassRequest+0xf0>
        status = USBH_FAIL;
 800bd96:	2302      	movs	r3, #2
 800bd98:	73fb      	strb	r3, [r7, #15]
      break;
 800bd9a:	e005      	b.n	800bda8 <USBH_HID_ClassRequest+0xf0>

    case HID_REQ_IDLE:
    default:
      break;
 800bd9c:	bf00      	nop
 800bd9e:	e004      	b.n	800bdaa <USBH_HID_ClassRequest+0xf2>
      break;
 800bda0:	bf00      	nop
 800bda2:	e002      	b.n	800bdaa <USBH_HID_ClassRequest+0xf2>
      break;
 800bda4:	bf00      	nop
 800bda6:	e000      	b.n	800bdaa <USBH_HID_ClassRequest+0xf2>
      break;
 800bda8:	bf00      	nop
  }

  return status;
 800bdaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3710      	adds	r7, #16
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b088      	sub	sp, #32
 800bdb8:	af02      	add	r7, sp, #8
 800bdba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bdc6:	69db      	ldr	r3, [r3, #28]
 800bdc8:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	789b      	ldrb	r3, [r3, #2]
 800bdce:	2b06      	cmp	r3, #6
 800bdd0:	f200 80e1 	bhi.w	800bf96 <USBH_HID_Process+0x1e2>
 800bdd4:	a201      	add	r2, pc, #4	; (adr r2, 800bddc <USBH_HID_Process+0x28>)
 800bdd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdda:	bf00      	nop
 800bddc:	0800bdf9 	.word	0x0800bdf9
 800bde0:	0800be25 	.word	0x0800be25
 800bde4:	0800bf97 	.word	0x0800bf97
 800bde8:	0800bf97 	.word	0x0800bf97
 800bdec:	0800becd 	.word	0x0800becd
 800bdf0:	0800be9b 	.word	0x0800be9b
 800bdf4:	0800befb 	.word	0x0800befb
  {
    case HID_INIT:
      HID_Handle->Init(phost);
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	4798      	blx	r3
      HID_Handle->state = HID_IDLE;
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	2201      	movs	r2, #1
 800be04:	709a      	strb	r2, [r3, #2]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2202      	movs	r2, #2
 800be0a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800be1a:	2200      	movs	r2, #0
 800be1c:	4619      	mov	r1, r3
 800be1e:	f002 fbbd 	bl	800e59c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800be22:	e0bb      	b.n	800bf9c <USBH_HID_Process+0x1e8>

    case HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 800be24:	693b      	ldr	r3, [r7, #16]
 800be26:	695a      	ldr	r2, [r3, #20]
 800be28:	693b      	ldr	r3, [r7, #16]
 800be2a:	8b1b      	ldrh	r3, [r3, #24]
 800be2c:	b2db      	uxtb	r3, r3
 800be2e:	9300      	str	r3, [sp, #0]
 800be30:	4613      	mov	r3, r2
 800be32:	2200      	movs	r2, #0
 800be34:	2101      	movs	r1, #1
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f000 f924 	bl	800c084 <USBH_HID_GetReport>
 800be3c:	4603      	mov	r3, r0
 800be3e:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800be40:	7dfb      	ldrb	r3, [r7, #23]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d103      	bne.n	800be4e <USBH_HID_Process+0x9a>
      {
        HID_Handle->state = HID_SYNC;
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	2205      	movs	r2, #5
 800be4a:	709a      	strb	r2, [r3, #2]
 800be4c:	e016      	b.n	800be7c <USBH_HID_Process+0xc8>
      }
      else if (status == USBH_BUSY)
 800be4e:	7dfb      	ldrb	r3, [r7, #23]
 800be50:	2b01      	cmp	r3, #1
 800be52:	d105      	bne.n	800be60 <USBH_HID_Process+0xac>
      {
        HID_Handle->state = HID_IDLE;
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	2201      	movs	r2, #1
 800be58:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 800be5a:	2300      	movs	r3, #0
 800be5c:	75fb      	strb	r3, [r7, #23]
 800be5e:	e00d      	b.n	800be7c <USBH_HID_Process+0xc8>
      }
      else if (status == USBH_NOT_SUPPORTED)
 800be60:	7dfb      	ldrb	r3, [r7, #23]
 800be62:	2b03      	cmp	r3, #3
 800be64:	d105      	bne.n	800be72 <USBH_HID_Process+0xbe>
      {
        HID_Handle->state = HID_SYNC;
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	2205      	movs	r2, #5
 800be6a:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 800be6c:	2300      	movs	r3, #0
 800be6e:	75fb      	strb	r3, [r7, #23]
 800be70:	e004      	b.n	800be7c <USBH_HID_Process+0xc8>
      }
      else
      {
        HID_Handle->state = HID_ERROR;
 800be72:	693b      	ldr	r3, [r7, #16]
 800be74:	2207      	movs	r2, #7
 800be76:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800be78:	2302      	movs	r3, #2
 800be7a:	75fb      	strb	r3, [r7, #23]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2202      	movs	r2, #2
 800be80:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800be90:	2200      	movs	r2, #0
 800be92:	4619      	mov	r1, r3
 800be94:	f002 fb82 	bl	800e59c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800be98:	e080      	b.n	800bf9c <USBH_HID_Process+0x1e8>

    case HID_SYNC:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) != 0U)
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bea0:	f003 0301 	and.w	r3, r3, #1
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d002      	beq.n	800beae <USBH_HID_Process+0xfa>
      {
        HID_Handle->state = HID_GET_DATA;
 800bea8:	693b      	ldr	r3, [r7, #16]
 800beaa:	2204      	movs	r2, #4
 800beac:	709a      	strb	r2, [r3, #2]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2202      	movs	r2, #2
 800beb2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bec2:	2200      	movs	r2, #0
 800bec4:	4619      	mov	r1, r3
 800bec6:	f002 fb69 	bl	800e59c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800beca:	e067      	b.n	800bf9c <USBH_HID_Process+0x1e8>

    case HID_GET_DATA:
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	6959      	ldr	r1, [r3, #20]
                                      (uint8_t)HID_Handle->length,
 800bed0:	693b      	ldr	r3, [r7, #16]
 800bed2:	8b1b      	ldrh	r3, [r3, #24]
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800bed4:	b2da      	uxtb	r2, r3
 800bed6:	693b      	ldr	r3, [r7, #16]
 800bed8:	785b      	ldrb	r3, [r3, #1]
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f002 f9f3 	bl	800e2c6 <USBH_InterruptReceiveData>
                                      HID_Handle->InPipe);

      HID_Handle->state = HID_POLL;
 800bee0:	693b      	ldr	r3, [r7, #16]
 800bee2:	2206      	movs	r2, #6
 800bee4:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800beec:	693b      	ldr	r3, [r7, #16]
 800beee:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 800bef0:	693b      	ldr	r3, [r7, #16]
 800bef2:	2200      	movs	r2, #0
 800bef4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      break;
 800bef8:	e050      	b.n	800bf9c <USBH_HID_Process+0x1e8>

    case HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 800befa:	693b      	ldr	r3, [r7, #16]
 800befc:	785b      	ldrb	r3, [r3, #1]
 800befe:	4619      	mov	r1, r3
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f005 fc4d 	bl	80117a0 <USBH_LL_GetURBState>
 800bf06:	4603      	mov	r3, r0
 800bf08:	2b01      	cmp	r3, #1
 800bf0a:	d12e      	bne.n	800bf6a <USBH_HID_Process+0x1b6>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	785b      	ldrb	r3, [r3, #1]
 800bf10:	4619      	mov	r1, r3
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f005 fbb2 	bl	801167c <USBH_LL_GetLastXferSize>
 800bf18:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U))
 800bf1a:	693b      	ldr	r3, [r7, #16]
 800bf1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d13a      	bne.n	800bf9a <USBH_HID_Process+0x1e6>
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d037      	beq.n	800bf9a <USBH_HID_Process+0x1e6>
        {
          (void)USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	f103 0008 	add.w	r0, r3, #8
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	6959      	ldr	r1, [r3, #20]
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	8b1b      	ldrh	r3, [r3, #24]
 800bf38:	461a      	mov	r2, r3
 800bf3a:	f000 f9b8 	bl	800c2ae <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 800bf3e:	693b      	ldr	r3, [r7, #16]
 800bf40:	2201      	movs	r2, #1
 800bf42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          USBH_HID_EventCallback(phost);
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f7f5 fad8 	bl	80014fc <USBH_HID_EventCallback>

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2202      	movs	r2, #2
 800bf50:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bf60:	2200      	movs	r2, #0
 800bf62:	4619      	mov	r1, r3
 800bf64:	f002 fb1a 	bl	800e59c <osMessagePut>
            /* Change state to issue next IN token */
            HID_Handle->state = HID_GET_DATA;
          }
        }
      }
      break;
 800bf68:	e017      	b.n	800bf9a <USBH_HID_Process+0x1e6>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 800bf6a:	693b      	ldr	r3, [r7, #16]
 800bf6c:	785b      	ldrb	r3, [r3, #1]
 800bf6e:	4619      	mov	r1, r3
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f005 fc15 	bl	80117a0 <USBH_LL_GetURBState>
 800bf76:	4603      	mov	r3, r0
 800bf78:	2b05      	cmp	r3, #5
 800bf7a:	d10e      	bne.n	800bf9a <USBH_HID_Process+0x1e6>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 800bf7c:	693b      	ldr	r3, [r7, #16]
 800bf7e:	7e9b      	ldrb	r3, [r3, #26]
 800bf80:	4619      	mov	r1, r3
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f001 fbd3 	bl	800d72e <USBH_ClrFeature>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d105      	bne.n	800bf9a <USBH_HID_Process+0x1e6>
            HID_Handle->state = HID_GET_DATA;
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	2204      	movs	r2, #4
 800bf92:	709a      	strb	r2, [r3, #2]
      break;
 800bf94:	e001      	b.n	800bf9a <USBH_HID_Process+0x1e6>

    default:
      break;
 800bf96:	bf00      	nop
 800bf98:	e000      	b.n	800bf9c <USBH_HID_Process+0x1e8>
      break;
 800bf9a:	bf00      	nop
  }

  return status;
 800bf9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3718      	adds	r7, #24
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}
 800bfa6:	bf00      	nop

0800bfa8 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b084      	sub	sp, #16
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bfb6:	69db      	ldr	r3, [r3, #28]
 800bfb8:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == HID_POLL)
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	789b      	ldrb	r3, [r3, #2]
 800bfbe:	2b06      	cmp	r3, #6
 800bfc0:	d11a      	bne.n	800bff8 <USBH_HID_SOFProcess+0x50>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	6a1b      	ldr	r3, [r3, #32]
 800bfcc:	1ad3      	subs	r3, r2, r3
 800bfce:	68fa      	ldr	r2, [r7, #12]
 800bfd0:	8b92      	ldrh	r2, [r2, #28]
 800bfd2:	4293      	cmp	r3, r2
 800bfd4:	d310      	bcc.n	800bff8 <USBH_HID_SOFProcess+0x50>
    {
      HID_Handle->state = HID_GET_DATA;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	2204      	movs	r2, #4
 800bfda:	709a      	strb	r2, [r3, #2]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2202      	movs	r2, #2
 800bfe0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bff0:	2200      	movs	r2, #0
 800bff2:	4619      	mov	r1, r3
 800bff4:	f002 fad2 	bl	800e59c <osMessagePut>
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
    }
  }
  return USBH_OK;
 800bff8:	2300      	movs	r3, #0
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3710      	adds	r7, #16
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}

0800c002 <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 800c002:	b580      	push	{r7, lr}
 800c004:	b086      	sub	sp, #24
 800c006:	af02      	add	r7, sp, #8
 800c008:	6078      	str	r0, [r7, #4]
 800c00a:	460b      	mov	r3, r1
 800c00c:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c014:	887b      	ldrh	r3, [r7, #2]
 800c016:	9300      	str	r3, [sp, #0]
 800c018:	4613      	mov	r3, r2
 800c01a:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 800c01e:	2101      	movs	r1, #1
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f001 fae4 	bl	800d5ee <USBH_GetDescriptor>
 800c026:	4603      	mov	r3, r0
 800c028:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 800c02a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3710      	adds	r7, #16
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}

0800c034 <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b082      	sub	sp, #8
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
 800c03c:	460b      	mov	r3, r1
 800c03e:	70fb      	strb	r3, [r7, #3]
 800c040:	4613      	mov	r3, r2
 800c042:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2221      	movs	r2, #33	; 0x21
 800c048:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	220a      	movs	r2, #10
 800c04e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 800c050:	78fb      	ldrb	r3, [r7, #3]
 800c052:	b29b      	uxth	r3, r3
 800c054:	021b      	lsls	r3, r3, #8
 800c056:	b29a      	uxth	r2, r3
 800c058:	78bb      	ldrb	r3, [r7, #2]
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	4313      	orrs	r3, r2
 800c05e:	b29a      	uxth	r2, r3
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2200      	movs	r2, #0
 800c068:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2200      	movs	r2, #0
 800c06e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800c070:	2200      	movs	r2, #0
 800c072:	2100      	movs	r1, #0
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f001 fe27 	bl	800dcc8 <USBH_CtlReq>
 800c07a:	4603      	mov	r3, r0
}
 800c07c:	4618      	mov	r0, r3
 800c07e:	3708      	adds	r7, #8
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}

0800c084 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b084      	sub	sp, #16
 800c088:	af00      	add	r7, sp, #0
 800c08a:	60f8      	str	r0, [r7, #12]
 800c08c:	607b      	str	r3, [r7, #4]
 800c08e:	460b      	mov	r3, r1
 800c090:	72fb      	strb	r3, [r7, #11]
 800c092:	4613      	mov	r3, r2
 800c094:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	22a1      	movs	r2, #161	; 0xa1
 800c09a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	2201      	movs	r2, #1
 800c0a0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 800c0a2:	7afb      	ldrb	r3, [r7, #11]
 800c0a4:	b29b      	uxth	r3, r3
 800c0a6:	021b      	lsls	r3, r3, #8
 800c0a8:	b29a      	uxth	r2, r3
 800c0aa:	7abb      	ldrb	r3, [r7, #10]
 800c0ac:	b29b      	uxth	r3, r3
 800c0ae:	4313      	orrs	r3, r2
 800c0b0:	b29a      	uxth	r2, r3
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 800c0bc:	7e3b      	ldrb	r3, [r7, #24]
 800c0be:	b29a      	uxth	r2, r3
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 800c0c4:	7e3b      	ldrb	r3, [r7, #24]
 800c0c6:	b29b      	uxth	r3, r3
 800c0c8:	461a      	mov	r2, r3
 800c0ca:	6879      	ldr	r1, [r7, #4]
 800c0cc:	68f8      	ldr	r0, [r7, #12]
 800c0ce:	f001 fdfb 	bl	800dcc8 <USBH_CtlReq>
 800c0d2:	4603      	mov	r3, r0
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3710      	adds	r7, #16
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b082      	sub	sp, #8
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	460b      	mov	r3, r1
 800c0e6:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2221      	movs	r2, #33	; 0x21
 800c0ec:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	220b      	movs	r2, #11
 800c0f2:	745a      	strb	r2, [r3, #17]
  if (protocol != 0U)
 800c0f4:	78fb      	ldrb	r3, [r7, #3]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d003      	beq.n	800c102 <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	825a      	strh	r2, [r3, #18]
 800c100:	e002      	b.n	800c108 <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2201      	movs	r2, #1
 800c106:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2200      	movs	r2, #0
 800c10c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2200      	movs	r2, #0
 800c112:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800c114:	2200      	movs	r2, #0
 800c116:	2100      	movs	r1, #0
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f001 fdd5 	bl	800dcc8 <USBH_CtlReq>
 800c11e:	4603      	mov	r3, r0

}
 800c120:	4618      	mov	r0, r3
 800c122:	3708      	adds	r7, #8
 800c124:	46bd      	mov	sp, r7
 800c126:	bd80      	pop	{r7, pc}

0800c128 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b084      	sub	sp, #16
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
 800c130:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	3302      	adds	r3, #2
 800c13a:	781b      	ldrb	r3, [r3, #0]
 800c13c:	b29a      	uxth	r2, r3
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	3303      	adds	r3, #3
 800c142:	781b      	ldrb	r3, [r3, #0]
 800c144:	b29b      	uxth	r3, r3
 800c146:	021b      	lsls	r3, r3, #8
 800c148:	b29b      	uxth	r3, r3
 800c14a:	4313      	orrs	r3, r2
 800c14c:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 800c14e:	897b      	ldrh	r3, [r7, #10]
 800c150:	2b09      	cmp	r3, #9
 800c152:	d943      	bls.n	800c1dc <USBH_HID_ParseHIDDesc+0xb4>
  {
    ptr = USB_LEN_CFG_DESC;
 800c154:	2309      	movs	r3, #9
 800c156:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 800c158:	e03c      	b.n	800c1d4 <USBH_HID_ParseHIDDesc+0xac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c15a:	f107 0308 	add.w	r3, r7, #8
 800c15e:	4619      	mov	r1, r3
 800c160:	68f8      	ldr	r0, [r7, #12]
 800c162:	f001 fd96 	bl	800dc92 <USBH_GetNextDesc>
 800c166:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	785b      	ldrb	r3, [r3, #1]
 800c16c:	2b21      	cmp	r3, #33	; 0x21
 800c16e:	d131      	bne.n	800c1d4 <USBH_HID_ParseHIDDesc+0xac>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	781a      	ldrb	r2, [r3, #0]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	785a      	ldrb	r2, [r3, #1]
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	3302      	adds	r3, #2
 800c184:	781b      	ldrb	r3, [r3, #0]
 800c186:	b29a      	uxth	r2, r3
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	3303      	adds	r3, #3
 800c18c:	781b      	ldrb	r3, [r3, #0]
 800c18e:	b29b      	uxth	r3, r3
 800c190:	021b      	lsls	r3, r3, #8
 800c192:	b29b      	uxth	r3, r3
 800c194:	4313      	orrs	r3, r2
 800c196:	b29a      	uxth	r2, r3
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	791a      	ldrb	r2, [r3, #4]
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	795a      	ldrb	r2, [r3, #5]
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	799a      	ldrb	r2, [r3, #6]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	3307      	adds	r3, #7
 800c1b8:	781b      	ldrb	r3, [r3, #0]
 800c1ba:	b29a      	uxth	r2, r3
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	3308      	adds	r3, #8
 800c1c0:	781b      	ldrb	r3, [r3, #0]
 800c1c2:	b29b      	uxth	r3, r3
 800c1c4:	021b      	lsls	r3, r3, #8
 800c1c6:	b29b      	uxth	r3, r3
 800c1c8:	4313      	orrs	r3, r2
 800c1ca:	b29a      	uxth	r2, r3
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	811a      	strh	r2, [r3, #8]
        break;
 800c1d0:	bf00      	nop
      }
    }
  }
}
 800c1d2:	e003      	b.n	800c1dc <USBH_HID_ParseHIDDesc+0xb4>
    while (ptr < CfgDescLen)
 800c1d4:	893b      	ldrh	r3, [r7, #8]
 800c1d6:	897a      	ldrh	r2, [r7, #10]
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	d8be      	bhi.n	800c15a <USBH_HID_ParseHIDDesc+0x32>
}
 800c1dc:	bf00      	nop
 800c1de:	3710      	adds	r7, #16
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 800c1e4:	b480      	push	{r7}
 800c1e6:	b085      	sub	sp, #20
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	60f8      	str	r0, [r7, #12]
 800c1ec:	60b9      	str	r1, [r7, #8]
 800c1ee:	4613      	mov	r3, r2
 800c1f0:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	2200      	movs	r2, #0
 800c202:	729a      	strb	r2, [r3, #10]
  f->size = size;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	88fa      	ldrh	r2, [r7, #6]
 800c208:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	68ba      	ldr	r2, [r7, #8]
 800c20e:	601a      	str	r2, [r3, #0]
}
 800c210:	bf00      	nop
 800c212:	3714      	adds	r7, #20
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr

0800c21c <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 800c21c:	b480      	push	{r7}
 800c21e:	b087      	sub	sp, #28
 800c220:	af00      	add	r7, sp, #0
 800c222:	60f8      	str	r0, [r7, #12]
 800c224:	60b9      	str	r1, [r7, #8]
 800c226:	4613      	mov	r3, r2
 800c228:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	7a9b      	ldrb	r3, [r3, #10]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d131      	bne.n	800c29a <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2201      	movs	r2, #1
 800c23a:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800c23c:	2300      	movs	r3, #0
 800c23e:	82fb      	strh	r3, [r7, #22]
 800c240:	e027      	b.n	800c292 <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	88da      	ldrh	r2, [r3, #6]
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	889b      	ldrh	r3, [r3, #4]
 800c24a:	429a      	cmp	r2, r3
 800c24c:	d019      	beq.n	800c282 <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	68fa      	ldr	r2, [r7, #12]
 800c254:	88d2      	ldrh	r2, [r2, #6]
 800c256:	441a      	add	r2, r3
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	1c59      	adds	r1, r3, #1
 800c25c:	6139      	str	r1, [r7, #16]
 800c25e:	7812      	ldrb	r2, [r2, #0]
 800c260:	701a      	strb	r2, [r3, #0]
        f->tail++;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	88db      	ldrh	r3, [r3, #6]
 800c266:	3301      	adds	r3, #1
 800c268:	b29a      	uxth	r2, r3
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	88da      	ldrh	r2, [r3, #6]
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	891b      	ldrh	r3, [r3, #8]
 800c276:	429a      	cmp	r2, r3
 800c278:	d108      	bne.n	800c28c <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	2200      	movs	r2, #0
 800c27e:	80da      	strh	r2, [r3, #6]
 800c280:	e004      	b.n	800c28c <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	2200      	movs	r2, #0
 800c286:	729a      	strb	r2, [r3, #10]
        return i;
 800c288:	8afb      	ldrh	r3, [r7, #22]
 800c28a:	e00a      	b.n	800c2a2 <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 800c28c:	8afb      	ldrh	r3, [r7, #22]
 800c28e:	3301      	adds	r3, #1
 800c290:	82fb      	strh	r3, [r7, #22]
 800c292:	8afa      	ldrh	r2, [r7, #22]
 800c294:	88fb      	ldrh	r3, [r7, #6]
 800c296:	429a      	cmp	r2, r3
 800c298:	d3d3      	bcc.n	800c242 <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	2200      	movs	r2, #0
 800c29e:	729a      	strb	r2, [r3, #10]

  return nbytes;
 800c2a0:	88fb      	ldrh	r3, [r7, #6]
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	371c      	adds	r7, #28
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ac:	4770      	bx	lr

0800c2ae <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 800c2ae:	b480      	push	{r7}
 800c2b0:	b087      	sub	sp, #28
 800c2b2:	af00      	add	r7, sp, #0
 800c2b4:	60f8      	str	r0, [r7, #12]
 800c2b6:	60b9      	str	r1, [r7, #8]
 800c2b8:	4613      	mov	r3, r2
 800c2ba:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	7a9b      	ldrb	r3, [r3, #10]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d13c      	bne.n	800c342 <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	82fb      	strh	r3, [r7, #22]
 800c2d2:	e032      	b.n	800c33a <USBH_HID_FifoWrite+0x8c>
    {
      if (((f->head + 1U) == f->tail) ||
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	889b      	ldrh	r3, [r3, #4]
 800c2d8:	3301      	adds	r3, #1
 800c2da:	68fa      	ldr	r2, [r7, #12]
 800c2dc:	88d2      	ldrh	r2, [r2, #6]
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d00a      	beq.n	800c2f8 <USBH_HID_FifoWrite+0x4a>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	889b      	ldrh	r3, [r3, #4]
 800c2e6:	3301      	adds	r3, #1
 800c2e8:	68fa      	ldr	r2, [r7, #12]
 800c2ea:	8912      	ldrh	r2, [r2, #8]
      if (((f->head + 1U) == f->tail) ||
 800c2ec:	4293      	cmp	r3, r2
 800c2ee:	d108      	bne.n	800c302 <USBH_HID_FifoWrite+0x54>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	88db      	ldrh	r3, [r3, #6]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d104      	bne.n	800c302 <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	729a      	strb	r2, [r3, #10]
        return i;
 800c2fe:	8afb      	ldrh	r3, [r7, #22]
 800c300:	e023      	b.n	800c34a <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 800c302:	693b      	ldr	r3, [r7, #16]
 800c304:	1c5a      	adds	r2, r3, #1
 800c306:	613a      	str	r2, [r7, #16]
 800c308:	68fa      	ldr	r2, [r7, #12]
 800c30a:	6812      	ldr	r2, [r2, #0]
 800c30c:	68f9      	ldr	r1, [r7, #12]
 800c30e:	8889      	ldrh	r1, [r1, #4]
 800c310:	440a      	add	r2, r1
 800c312:	781b      	ldrb	r3, [r3, #0]
 800c314:	7013      	strb	r3, [r2, #0]
        f->head++;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	889b      	ldrh	r3, [r3, #4]
 800c31a:	3301      	adds	r3, #1
 800c31c:	b29a      	uxth	r2, r3
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	889a      	ldrh	r2, [r3, #4]
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	891b      	ldrh	r3, [r3, #8]
 800c32a:	429a      	cmp	r2, r3
 800c32c:	d102      	bne.n	800c334 <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	2200      	movs	r2, #0
 800c332:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 800c334:	8afb      	ldrh	r3, [r7, #22]
 800c336:	3301      	adds	r3, #1
 800c338:	82fb      	strh	r3, [r7, #22]
 800c33a:	8afa      	ldrh	r2, [r7, #22]
 800c33c:	88fb      	ldrh	r3, [r7, #6]
 800c33e:	429a      	cmp	r2, r3
 800c340:	d3c8      	bcc.n	800c2d4 <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	2200      	movs	r2, #0
 800c346:	729a      	strb	r2, [r3, #10]

  return nbytes;
 800c348:	88fb      	ldrh	r3, [r7, #6]
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	371c      	adds	r7, #28
 800c34e:	46bd      	mov	sp, r7
 800c350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c354:	4770      	bx	lr
	...

0800c358 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b084      	sub	sp, #16
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c366:	69db      	ldr	r3, [r3, #28]
 800c368:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = 0U;
 800c36a:	4b22      	ldr	r3, [pc, #136]	; (800c3f4 <USBH_HID_KeybdInit+0x9c>)
 800c36c:	2200      	movs	r2, #0
 800c36e:	705a      	strb	r2, [r3, #1]
  keybd_info.lshift = 0U;
 800c370:	4b20      	ldr	r3, [pc, #128]	; (800c3f4 <USBH_HID_KeybdInit+0x9c>)
 800c372:	2200      	movs	r2, #0
 800c374:	709a      	strb	r2, [r3, #2]
  keybd_info.lalt = 0U;
 800c376:	4b1f      	ldr	r3, [pc, #124]	; (800c3f4 <USBH_HID_KeybdInit+0x9c>)
 800c378:	2200      	movs	r2, #0
 800c37a:	70da      	strb	r2, [r3, #3]
  keybd_info.lgui = 0U;
 800c37c:	4b1d      	ldr	r3, [pc, #116]	; (800c3f4 <USBH_HID_KeybdInit+0x9c>)
 800c37e:	2200      	movs	r2, #0
 800c380:	711a      	strb	r2, [r3, #4]
  keybd_info.rctrl = 0U;
 800c382:	4b1c      	ldr	r3, [pc, #112]	; (800c3f4 <USBH_HID_KeybdInit+0x9c>)
 800c384:	2200      	movs	r2, #0
 800c386:	715a      	strb	r2, [r3, #5]
  keybd_info.rshift = 0U;
 800c388:	4b1a      	ldr	r3, [pc, #104]	; (800c3f4 <USBH_HID_KeybdInit+0x9c>)
 800c38a:	2200      	movs	r2, #0
 800c38c:	719a      	strb	r2, [r3, #6]
  keybd_info.ralt = 0U;
 800c38e:	4b19      	ldr	r3, [pc, #100]	; (800c3f4 <USBH_HID_KeybdInit+0x9c>)
 800c390:	2200      	movs	r2, #0
 800c392:	71da      	strb	r2, [r3, #7]
  keybd_info.rgui = 0U;
 800c394:	4b17      	ldr	r3, [pc, #92]	; (800c3f4 <USBH_HID_KeybdInit+0x9c>)
 800c396:	2200      	movs	r2, #0
 800c398:	721a      	strb	r2, [r3, #8]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 800c39a:	2300      	movs	r3, #0
 800c39c:	60fb      	str	r3, [r7, #12]
 800c39e:	e00c      	b.n	800c3ba <USBH_HID_KeybdInit+0x62>
  {
    keybd_report_data[x] = 0U;
 800c3a0:	4a15      	ldr	r2, [pc, #84]	; (800c3f8 <USBH_HID_KeybdInit+0xa0>)
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	2100      	movs	r1, #0
 800c3a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 800c3aa:	4a14      	ldr	r2, [pc, #80]	; (800c3fc <USBH_HID_KeybdInit+0xa4>)
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	2100      	movs	r1, #0
 800c3b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	3301      	adds	r3, #1
 800c3b8:	60fb      	str	r3, [r7, #12]
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	2b01      	cmp	r3, #1
 800c3be:	d9ef      	bls.n	800c3a0 <USBH_HID_KeybdInit+0x48>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	8b1b      	ldrh	r3, [r3, #24]
 800c3c4:	2b08      	cmp	r3, #8
 800c3c6:	d902      	bls.n	800c3ce <USBH_HID_KeybdInit+0x76>
  {
    HID_Handle->length = (uint16_t)(sizeof(keybd_report_data));
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	2208      	movs	r2, #8
 800c3cc:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	4a0a      	ldr	r2, [pc, #40]	; (800c3fc <USBH_HID_KeybdInit+0xa4>)
 800c3d2:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(keybd_report_data)));
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	f103 0008 	add.w	r0, r3, #8
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c3e0:	2250      	movs	r2, #80	; 0x50
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	f7ff fefe 	bl	800c1e4 <USBH_HID_FifoInit>

  return USBH_OK;
 800c3e8:	2300      	movs	r3, #0
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3710      	adds	r7, #16
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}
 800c3f2:	bf00      	nop
 800c3f4:	20000548 	.word	0x20000548
 800c3f8:	20000560 	.word	0x20000560
 800c3fc:	20000558 	.word	0x20000558

0800c400 <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b082      	sub	sp, #8
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
  if (USBH_HID_KeybdDecode(phost) == USBH_OK)
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f000 f80d 	bl	800c428 <USBH_HID_KeybdDecode>
 800c40e:	4603      	mov	r3, r0
 800c410:	2b00      	cmp	r3, #0
 800c412:	d101      	bne.n	800c418 <USBH_HID_GetKeybdInfo+0x18>
  {
    return &keybd_info;
 800c414:	4b03      	ldr	r3, [pc, #12]	; (800c424 <USBH_HID_GetKeybdInfo+0x24>)
 800c416:	e000      	b.n	800c41a <USBH_HID_GetKeybdInfo+0x1a>
  }
  else
  {
    return NULL;
 800c418:	2300      	movs	r3, #0
  }
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3708      	adds	r7, #8
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}
 800c422:	bf00      	nop
 800c424:	20000548 	.word	0x20000548

0800c428 <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b084      	sub	sp, #16
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
  uint8_t x;

  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c436:	69db      	ldr	r3, [r3, #28]
 800c438:	60bb      	str	r3, [r7, #8]
  if (HID_Handle->length == 0U)
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	8b1b      	ldrh	r3, [r3, #24]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d101      	bne.n	800c446 <USBH_HID_KeybdDecode+0x1e>
  {
    return USBH_FAIL;
 800c442:	2302      	movs	r3, #2
 800c444:	e066      	b.n	800c514 <USBH_HID_KeybdDecode+0xec>
  }
  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	f103 0008 	add.w	r0, r3, #8
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	8b1b      	ldrh	r3, [r3, #24]
 800c450:	461a      	mov	r2, r3
 800c452:	4932      	ldr	r1, [pc, #200]	; (800c51c <USBH_HID_KeybdDecode+0xf4>)
 800c454:	f7ff fee2 	bl	800c21c <USBH_HID_FifoRead>
 800c458:	4603      	mov	r3, r0
 800c45a:	461a      	mov	r2, r3
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	8b1b      	ldrh	r3, [r3, #24]
 800c460:	429a      	cmp	r2, r3
 800c462:	d156      	bne.n	800c512 <USBH_HID_KeybdDecode+0xea>
  {
    keybd_info.lctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 800c464:	2100      	movs	r1, #0
 800c466:	482e      	ldr	r0, [pc, #184]	; (800c520 <USBH_HID_KeybdDecode+0xf8>)
 800c468:	f000 f8e4 	bl	800c634 <HID_ReadItem>
 800c46c:	4603      	mov	r3, r0
 800c46e:	b2da      	uxtb	r2, r3
 800c470:	4b2c      	ldr	r3, [pc, #176]	; (800c524 <USBH_HID_KeybdDecode+0xfc>)
 800c472:	705a      	strb	r2, [r3, #1]
    keybd_info.lshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 800c474:	2100      	movs	r1, #0
 800c476:	482c      	ldr	r0, [pc, #176]	; (800c528 <USBH_HID_KeybdDecode+0x100>)
 800c478:	f000 f8dc 	bl	800c634 <HID_ReadItem>
 800c47c:	4603      	mov	r3, r0
 800c47e:	b2da      	uxtb	r2, r3
 800c480:	4b28      	ldr	r3, [pc, #160]	; (800c524 <USBH_HID_KeybdDecode+0xfc>)
 800c482:	709a      	strb	r2, [r3, #2]
    keybd_info.lalt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 800c484:	2100      	movs	r1, #0
 800c486:	4829      	ldr	r0, [pc, #164]	; (800c52c <USBH_HID_KeybdDecode+0x104>)
 800c488:	f000 f8d4 	bl	800c634 <HID_ReadItem>
 800c48c:	4603      	mov	r3, r0
 800c48e:	b2da      	uxtb	r2, r3
 800c490:	4b24      	ldr	r3, [pc, #144]	; (800c524 <USBH_HID_KeybdDecode+0xfc>)
 800c492:	70da      	strb	r2, [r3, #3]
    keybd_info.lgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 800c494:	2100      	movs	r1, #0
 800c496:	4826      	ldr	r0, [pc, #152]	; (800c530 <USBH_HID_KeybdDecode+0x108>)
 800c498:	f000 f8cc 	bl	800c634 <HID_ReadItem>
 800c49c:	4603      	mov	r3, r0
 800c49e:	b2da      	uxtb	r2, r3
 800c4a0:	4b20      	ldr	r3, [pc, #128]	; (800c524 <USBH_HID_KeybdDecode+0xfc>)
 800c4a2:	711a      	strb	r2, [r3, #4]
    keybd_info.rctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 800c4a4:	2100      	movs	r1, #0
 800c4a6:	4823      	ldr	r0, [pc, #140]	; (800c534 <USBH_HID_KeybdDecode+0x10c>)
 800c4a8:	f000 f8c4 	bl	800c634 <HID_ReadItem>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	b2da      	uxtb	r2, r3
 800c4b0:	4b1c      	ldr	r3, [pc, #112]	; (800c524 <USBH_HID_KeybdDecode+0xfc>)
 800c4b2:	715a      	strb	r2, [r3, #5]
    keybd_info.rshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 800c4b4:	2100      	movs	r1, #0
 800c4b6:	4820      	ldr	r0, [pc, #128]	; (800c538 <USBH_HID_KeybdDecode+0x110>)
 800c4b8:	f000 f8bc 	bl	800c634 <HID_ReadItem>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	b2da      	uxtb	r2, r3
 800c4c0:	4b18      	ldr	r3, [pc, #96]	; (800c524 <USBH_HID_KeybdDecode+0xfc>)
 800c4c2:	719a      	strb	r2, [r3, #6]
    keybd_info.ralt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 800c4c4:	2100      	movs	r1, #0
 800c4c6:	481d      	ldr	r0, [pc, #116]	; (800c53c <USBH_HID_KeybdDecode+0x114>)
 800c4c8:	f000 f8b4 	bl	800c634 <HID_ReadItem>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	b2da      	uxtb	r2, r3
 800c4d0:	4b14      	ldr	r3, [pc, #80]	; (800c524 <USBH_HID_KeybdDecode+0xfc>)
 800c4d2:	71da      	strb	r2, [r3, #7]
    keybd_info.rgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 800c4d4:	2100      	movs	r1, #0
 800c4d6:	481a      	ldr	r0, [pc, #104]	; (800c540 <USBH_HID_KeybdDecode+0x118>)
 800c4d8:	f000 f8ac 	bl	800c634 <HID_ReadItem>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	b2da      	uxtb	r2, r3
 800c4e0:	4b10      	ldr	r3, [pc, #64]	; (800c524 <USBH_HID_KeybdDecode+0xfc>)
 800c4e2:	721a      	strb	r2, [r3, #8]

    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	73fb      	strb	r3, [r7, #15]
 800c4e8:	e00e      	b.n	800c508 <USBH_HID_KeybdDecode+0xe0>
    {
      keybd_info.keys[x] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 800c4ea:	7bfb      	ldrb	r3, [r7, #15]
 800c4ec:	4619      	mov	r1, r3
 800c4ee:	4815      	ldr	r0, [pc, #84]	; (800c544 <USBH_HID_KeybdDecode+0x11c>)
 800c4f0:	f000 f8a0 	bl	800c634 <HID_ReadItem>
 800c4f4:	4602      	mov	r2, r0
 800c4f6:	7bfb      	ldrb	r3, [r7, #15]
 800c4f8:	b2d1      	uxtb	r1, r2
 800c4fa:	4a0a      	ldr	r2, [pc, #40]	; (800c524 <USBH_HID_KeybdDecode+0xfc>)
 800c4fc:	4413      	add	r3, r2
 800c4fe:	460a      	mov	r2, r1
 800c500:	725a      	strb	r2, [r3, #9]
    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 800c502:	7bfb      	ldrb	r3, [r7, #15]
 800c504:	3301      	adds	r3, #1
 800c506:	73fb      	strb	r3, [r7, #15]
 800c508:	7bfb      	ldrb	r3, [r7, #15]
 800c50a:	2b05      	cmp	r3, #5
 800c50c:	d9ed      	bls.n	800c4ea <USBH_HID_KeybdDecode+0xc2>
    }

    return USBH_OK;
 800c50e:	2300      	movs	r3, #0
 800c510:	e000      	b.n	800c514 <USBH_HID_KeybdDecode+0xec>
  }
  return   USBH_FAIL;
 800c512:	2302      	movs	r3, #2
}
 800c514:	4618      	mov	r0, r3
 800c516:	3710      	adds	r7, #16
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}
 800c51c:	20000560 	.word	0x20000560
 800c520:	080124b4 	.word	0x080124b4
 800c524:	20000548 	.word	0x20000548
 800c528:	080124d4 	.word	0x080124d4
 800c52c:	080124f4 	.word	0x080124f4
 800c530:	08012514 	.word	0x08012514
 800c534:	08012534 	.word	0x08012534
 800c538:	08012554 	.word	0x08012554
 800c53c:	08012574 	.word	0x08012574
 800c540:	08012594 	.word	0x08012594
 800c544:	080125b4 	.word	0x080125b4

0800c548 <USBH_HID_GetASCIICode>:
  * @param  phost: Host handle
  * @param  info: Keyboard information
  * @retval ASCII code
  */
uint8_t USBH_HID_GetASCIICode(HID_KEYBD_Info_TypeDef *info)
{
 800c548:	b480      	push	{r7}
 800c54a:	b085      	sub	sp, #20
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
  uint8_t   output;
  if ((info->lshift != 0U) || (info->rshift != 0U))
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	789b      	ldrb	r3, [r3, #2]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d103      	bne.n	800c560 <USBH_HID_GetASCIICode+0x18>
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	799b      	ldrb	r3, [r3, #6]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d009      	beq.n	800c574 <USBH_HID_GetASCIICode+0x2c>
  {
    output =  HID_KEYBRD_ShiftKey[HID_KEYBRD_Codes[info->keys[0]]];
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	7a5b      	ldrb	r3, [r3, #9]
 800c564:	461a      	mov	r2, r3
 800c566:	4b0b      	ldr	r3, [pc, #44]	; (800c594 <USBH_HID_GetASCIICode+0x4c>)
 800c568:	5c9b      	ldrb	r3, [r3, r2]
 800c56a:	461a      	mov	r2, r3
 800c56c:	4b0a      	ldr	r3, [pc, #40]	; (800c598 <USBH_HID_GetASCIICode+0x50>)
 800c56e:	5c9b      	ldrb	r3, [r3, r2]
 800c570:	73fb      	strb	r3, [r7, #15]
 800c572:	e008      	b.n	800c586 <USBH_HID_GetASCIICode+0x3e>
  }
  else
  {
    output =  HID_KEYBRD_Key[HID_KEYBRD_Codes[info->keys[0]]];
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	7a5b      	ldrb	r3, [r3, #9]
 800c578:	461a      	mov	r2, r3
 800c57a:	4b06      	ldr	r3, [pc, #24]	; (800c594 <USBH_HID_GetASCIICode+0x4c>)
 800c57c:	5c9b      	ldrb	r3, [r3, r2]
 800c57e:	461a      	mov	r2, r3
 800c580:	4b06      	ldr	r3, [pc, #24]	; (800c59c <USBH_HID_GetASCIICode+0x54>)
 800c582:	5c9b      	ldrb	r3, [r3, r2]
 800c584:	73fb      	strb	r3, [r7, #15]
  }
  return output;
 800c586:	7bfb      	ldrb	r3, [r7, #15]
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3714      	adds	r7, #20
 800c58c:	46bd      	mov	sp, r7
 800c58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c592:	4770      	bx	lr
 800c594:	080126dc 	.word	0x080126dc
 800c598:	08012658 	.word	0x08012658
 800c59c:	080125d4 	.word	0x080125d4

0800c5a0 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b084      	sub	sp, #16
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c5ae:	69db      	ldr	r3, [r3, #28]
 800c5b0:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 800c5b2:	4b1d      	ldr	r3, [pc, #116]	; (800c628 <USBH_HID_MouseInit+0x88>)
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 800c5b8:	4b1b      	ldr	r3, [pc, #108]	; (800c628 <USBH_HID_MouseInit+0x88>)
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 800c5be:	4b1a      	ldr	r3, [pc, #104]	; (800c628 <USBH_HID_MouseInit+0x88>)
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 800c5c4:	4b18      	ldr	r3, [pc, #96]	; (800c628 <USBH_HID_MouseInit+0x88>)
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 800c5ca:	4b17      	ldr	r3, [pc, #92]	; (800c628 <USBH_HID_MouseInit+0x88>)
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	60fb      	str	r3, [r7, #12]
 800c5d4:	e00c      	b.n	800c5f0 <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 800c5d6:	4a15      	ldr	r2, [pc, #84]	; (800c62c <USBH_HID_MouseInit+0x8c>)
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	2100      	movs	r1, #0
 800c5dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    mouse_rx_report_buf[i] = 0U;
 800c5e0:	4a13      	ldr	r2, [pc, #76]	; (800c630 <USBH_HID_MouseInit+0x90>)
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	2100      	movs	r1, #0
 800c5e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	3301      	adds	r3, #1
 800c5ee:	60fb      	str	r3, [r7, #12]
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	2b01      	cmp	r3, #1
 800c5f4:	d9ef      	bls.n	800c5d6 <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	8b1b      	ldrh	r3, [r3, #24]
 800c5fa:	2b08      	cmp	r3, #8
 800c5fc:	d902      	bls.n	800c604 <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = (uint16_t)sizeof(mouse_report_data);
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	2208      	movs	r2, #8
 800c602:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)mouse_rx_report_buf;
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	4a0a      	ldr	r2, [pc, #40]	; (800c630 <USBH_HID_MouseInit+0x90>)
 800c608:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(mouse_report_data)));
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	f103 0008 	add.w	r0, r3, #8
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c616:	2250      	movs	r2, #80	; 0x50
 800c618:	4619      	mov	r1, r3
 800c61a:	f7ff fde3 	bl	800c1e4 <USBH_HID_FifoInit>

  return USBH_OK;
 800c61e:	2300      	movs	r3, #0
}
 800c620:	4618      	mov	r0, r3
 800c622:	3710      	adds	r7, #16
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}
 800c628:	20000568 	.word	0x20000568
 800c62c:	20000570 	.word	0x20000570
 800c630:	20000578 	.word	0x20000578

0800c634 <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
  * @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 800c634:	b480      	push	{r7}
 800c636:	b089      	sub	sp, #36	; 0x24
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
 800c63c:	460b      	mov	r3, r1
 800c63e:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 800c640:	2300      	movs	r3, #0
 800c642:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 800c644:	2300      	movs	r3, #0
 800c646:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	7a1b      	ldrb	r3, [r3, #8]
 800c652:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, wee may need to offset ri->data.*/
  if (ri->count > 0U)
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	7a5b      	ldrb	r3, [r3, #9]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d01a      	beq.n	800c692 <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	7a5b      	ldrb	r3, [r3, #9]
 800c660:	78fa      	ldrb	r2, [r7, #3]
 800c662:	429a      	cmp	r2, r3
 800c664:	d301      	bcc.n	800c66a <HID_ReadItem+0x36>
    {
      return (0U);
 800c666:	2300      	movs	r3, #0
 800c668:	e078      	b.n	800c75c <HID_ReadItem+0x128>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 800c66a:	78fb      	ldrb	r3, [r7, #3]
 800c66c:	687a      	ldr	r2, [r7, #4]
 800c66e:	6852      	ldr	r2, [r2, #4]
 800c670:	fb02 f303 	mul.w	r3, r2, r3
 800c674:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 800c676:	7cfb      	ldrb	r3, [r7, #19]
 800c678:	68fa      	ldr	r2, [r7, #12]
 800c67a:	4413      	add	r3, r2
 800c67c:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	08db      	lsrs	r3, r3, #3
 800c682:	697a      	ldr	r2, [r7, #20]
 800c684:	4413      	add	r3, r2
 800c686:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	b2db      	uxtb	r3, r3
 800c68c:	f003 0307 	and.w	r3, r3, #7
 800c690:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 800c692:	2300      	movs	r3, #0
 800c694:	61bb      	str	r3, [r7, #24]
 800c696:	e00a      	b.n	800c6ae <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 800c698:	697b      	ldr	r3, [r7, #20]
 800c69a:	781b      	ldrb	r3, [r3, #0]
 800c69c:	461a      	mov	r2, r3
 800c69e:	69bb      	ldr	r3, [r7, #24]
 800c6a0:	00db      	lsls	r3, r3, #3
 800c6a2:	fa02 f303 	lsl.w	r3, r2, r3
 800c6a6:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 800c6a8:	69bb      	ldr	r3, [r7, #24]
 800c6aa:	3301      	adds	r3, #1
 800c6ac:	61bb      	str	r3, [r7, #24]
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	685b      	ldr	r3, [r3, #4]
 800c6b2:	f003 0307 	and.w	r3, r3, #7
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d004      	beq.n	800c6c4 <HID_ReadItem+0x90>
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	685b      	ldr	r3, [r3, #4]
 800c6be:	08db      	lsrs	r3, r3, #3
 800c6c0:	3301      	adds	r3, #1
 800c6c2:	e002      	b.n	800c6ca <HID_ReadItem+0x96>
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	685b      	ldr	r3, [r3, #4]
 800c6c8:	08db      	lsrs	r3, r3, #3
 800c6ca:	69ba      	ldr	r2, [r7, #24]
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d8e3      	bhi.n	800c698 <HID_ReadItem+0x64>
  }
  val = (val >> shift) & (((uint32_t)1U << ri->size) - 1U);
 800c6d0:	7cfb      	ldrb	r3, [r7, #19]
 800c6d2:	69fa      	ldr	r2, [r7, #28]
 800c6d4:	40da      	lsrs	r2, r3
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	685b      	ldr	r3, [r3, #4]
 800c6da:	f04f 31ff 	mov.w	r1, #4294967295
 800c6de:	fa01 f303 	lsl.w	r3, r1, r3
 800c6e2:	43db      	mvns	r3, r3
 800c6e4:	4013      	ands	r3, r2
 800c6e6:	61fb      	str	r3, [r7, #28]

  if ((val < ri->logical_min) || (val > ri->logical_max))
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	68db      	ldr	r3, [r3, #12]
 800c6ec:	69fa      	ldr	r2, [r7, #28]
 800c6ee:	429a      	cmp	r2, r3
 800c6f0:	d304      	bcc.n	800c6fc <HID_ReadItem+0xc8>
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	691b      	ldr	r3, [r3, #16]
 800c6f6:	69fa      	ldr	r2, [r7, #28]
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	d901      	bls.n	800c700 <HID_ReadItem+0xcc>
  {
    return (0U);
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	e02d      	b.n	800c75c <HID_ReadItem+0x128>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign != 0U) && ((val & ((uint32_t)1U << (ri->size - 1U))) != 0U))
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	7a9b      	ldrb	r3, [r3, #10]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d01e      	beq.n	800c746 <HID_ReadItem+0x112>
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	685b      	ldr	r3, [r3, #4]
 800c70c:	3b01      	subs	r3, #1
 800c70e:	69fa      	ldr	r2, [r7, #28]
 800c710:	fa22 f303 	lsr.w	r3, r2, r3
 800c714:	f003 0301 	and.w	r3, r3, #1
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d014      	beq.n	800c746 <HID_ReadItem+0x112>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	685b      	ldr	r3, [r3, #4]
 800c720:	2201      	movs	r2, #1
 800c722:	fa02 f303 	lsl.w	r3, r2, r3
 800c726:	425b      	negs	r3, r3
 800c728:	69fa      	ldr	r2, [r7, #28]
 800c72a:	4313      	orrs	r3, r2
 800c72c:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	69db      	ldr	r3, [r3, #28]
 800c732:	2b01      	cmp	r3, #1
 800c734:	d101      	bne.n	800c73a <HID_ReadItem+0x106>
    {
      return ((uint32_t)vs);
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	e010      	b.n	800c75c <HID_ReadItem+0x128>
    }
    return ((uint32_t)(vs * ri->resolution));
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	69db      	ldr	r3, [r3, #28]
 800c73e:	68ba      	ldr	r2, [r7, #8]
 800c740:	fb02 f303 	mul.w	r3, r2, r3
 800c744:	e00a      	b.n	800c75c <HID_ReadItem+0x128>
  }
  else
  {
    if (ri->resolution == 1U)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	69db      	ldr	r3, [r3, #28]
 800c74a:	2b01      	cmp	r3, #1
 800c74c:	d101      	bne.n	800c752 <HID_ReadItem+0x11e>
    {
      return (val);
 800c74e:	69fb      	ldr	r3, [r7, #28]
 800c750:	e004      	b.n	800c75c <HID_ReadItem+0x128>
    }
    return (val * ri->resolution);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	69db      	ldr	r3, [r3, #28]
 800c756:	69fa      	ldr	r2, [r7, #28]
 800c758:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3724      	adds	r7, #36	; 0x24
 800c760:	46bd      	mov	sp, r7
 800c762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c766:	4770      	bx	lr

0800c768 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800c768:	b5b0      	push	{r4, r5, r7, lr}
 800c76a:	b090      	sub	sp, #64	; 0x40
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	60f8      	str	r0, [r7, #12]
 800c770:	60b9      	str	r1, [r7, #8]
 800c772:	4613      	mov	r3, r2
 800c774:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d101      	bne.n	800c780 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800c77c:	2302      	movs	r3, #2
 800c77e:	e04d      	b.n	800c81c <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	79fa      	ldrb	r2, [r7, #7]
 800c784:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	2200      	movs	r2, #0
 800c78c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	2200      	movs	r2, #0
 800c794:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800c798:	68f8      	ldr	r0, [r7, #12]
 800c79a:	f000 f847 	bl	800c82c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d003      	beq.n	800c7cc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	68ba      	ldr	r2, [r7, #8]
 800c7c8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800c7cc:	4b15      	ldr	r3, [pc, #84]	; (800c824 <USBH_Init+0xbc>)
 800c7ce:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800c7d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c7d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800c7d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c7dc:	2100      	movs	r1, #0
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f001 feb3 	bl	800e54a <osMessageCreate>
 800c7e4:	4602      	mov	r2, r0
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800c7ec:	4b0e      	ldr	r3, [pc, #56]	; (800c828 <USBH_Init+0xc0>)
 800c7ee:	f107 0414 	add.w	r4, r7, #20
 800c7f2:	461d      	mov	r5, r3
 800c7f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c7f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c7f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c7fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800c800:	f107 0314 	add.w	r3, r7, #20
 800c804:	68f9      	ldr	r1, [r7, #12]
 800c806:	4618      	mov	r0, r3
 800c808:	f001 fe3f 	bl	800e48a <osThreadCreate>
 800c80c:	4602      	mov	r2, r0
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800c814:	68f8      	ldr	r0, [r7, #12]
 800c816:	f004 fe7d 	bl	8011514 <USBH_LL_Init>

  return USBH_OK;
 800c81a:	2300      	movs	r3, #0
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3740      	adds	r7, #64	; 0x40
 800c820:	46bd      	mov	sp, r7
 800c822:	bdb0      	pop	{r4, r5, r7, pc}
 800c824:	08011c40 	.word	0x08011c40
 800c828:	08011c50 	.word	0x08011c50

0800c82c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800c82c:	b480      	push	{r7}
 800c82e:	b085      	sub	sp, #20
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c834:	2300      	movs	r3, #0
 800c836:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c838:	2300      	movs	r3, #0
 800c83a:	60fb      	str	r3, [r7, #12]
 800c83c:	e009      	b.n	800c852 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800c83e:	687a      	ldr	r2, [r7, #4]
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	33e0      	adds	r3, #224	; 0xe0
 800c844:	009b      	lsls	r3, r3, #2
 800c846:	4413      	add	r3, r2
 800c848:	2200      	movs	r2, #0
 800c84a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	3301      	adds	r3, #1
 800c850:	60fb      	str	r3, [r7, #12]
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	2b0f      	cmp	r3, #15
 800c856:	d9f2      	bls.n	800c83e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c858:	2300      	movs	r3, #0
 800c85a:	60fb      	str	r3, [r7, #12]
 800c85c:	e009      	b.n	800c872 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800c85e:	687a      	ldr	r2, [r7, #4]
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	4413      	add	r3, r2
 800c864:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c868:	2200      	movs	r2, #0
 800c86a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	3301      	adds	r3, #1
 800c870:	60fb      	str	r3, [r7, #12]
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c878:	d3f1      	bcc.n	800c85e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2200      	movs	r2, #0
 800c87e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2200      	movs	r2, #0
 800c884:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2201      	movs	r2, #1
 800c88a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2200      	movs	r2, #0
 800c890:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2201      	movs	r2, #1
 800c898:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2240      	movs	r2, #64	; 0x40
 800c89e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2201      	movs	r2, #1
 800c8b2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800c8c6:	2300      	movs	r3, #0
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	3714      	adds	r7, #20
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d2:	4770      	bx	lr

0800c8d4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	b085      	sub	sp, #20
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
 800c8dc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d016      	beq.n	800c916 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d10e      	bne.n	800c910 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c8f8:	1c59      	adds	r1, r3, #1
 800c8fa:	687a      	ldr	r2, [r7, #4]
 800c8fc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800c900:	687a      	ldr	r2, [r7, #4]
 800c902:	33de      	adds	r3, #222	; 0xde
 800c904:	6839      	ldr	r1, [r7, #0]
 800c906:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c90a:	2300      	movs	r3, #0
 800c90c:	73fb      	strb	r3, [r7, #15]
 800c90e:	e004      	b.n	800c91a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800c910:	2302      	movs	r3, #2
 800c912:	73fb      	strb	r3, [r7, #15]
 800c914:	e001      	b.n	800c91a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800c916:	2302      	movs	r3, #2
 800c918:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c91a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3714      	adds	r7, #20
 800c920:	46bd      	mov	sp, r7
 800c922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c926:	4770      	bx	lr

0800c928 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c928:	b480      	push	{r7}
 800c92a:	b085      	sub	sp, #20
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	460b      	mov	r3, r1
 800c932:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c934:	2300      	movs	r3, #0
 800c936:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800c93e:	78fa      	ldrb	r2, [r7, #3]
 800c940:	429a      	cmp	r2, r3
 800c942:	d204      	bcs.n	800c94e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	78fa      	ldrb	r2, [r7, #3]
 800c948:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800c94c:	e001      	b.n	800c952 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c94e:	2302      	movs	r3, #2
 800c950:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c952:	7bfb      	ldrb	r3, [r7, #15]
}
 800c954:	4618      	mov	r0, r3
 800c956:	3714      	adds	r7, #20
 800c958:	46bd      	mov	sp, r7
 800c95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95e:	4770      	bx	lr

0800c960 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c960:	b480      	push	{r7}
 800c962:	b087      	sub	sp, #28
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
 800c968:	4608      	mov	r0, r1
 800c96a:	4611      	mov	r1, r2
 800c96c:	461a      	mov	r2, r3
 800c96e:	4603      	mov	r3, r0
 800c970:	70fb      	strb	r3, [r7, #3]
 800c972:	460b      	mov	r3, r1
 800c974:	70bb      	strb	r3, [r7, #2]
 800c976:	4613      	mov	r3, r2
 800c978:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c97a:	2300      	movs	r3, #0
 800c97c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c97e:	2300      	movs	r3, #0
 800c980:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c988:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c98a:	e025      	b.n	800c9d8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c98c:	7dfb      	ldrb	r3, [r7, #23]
 800c98e:	221a      	movs	r2, #26
 800c990:	fb02 f303 	mul.w	r3, r2, r3
 800c994:	3308      	adds	r3, #8
 800c996:	68fa      	ldr	r2, [r7, #12]
 800c998:	4413      	add	r3, r2
 800c99a:	3302      	adds	r3, #2
 800c99c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c99e:	693b      	ldr	r3, [r7, #16]
 800c9a0:	795b      	ldrb	r3, [r3, #5]
 800c9a2:	78fa      	ldrb	r2, [r7, #3]
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d002      	beq.n	800c9ae <USBH_FindInterface+0x4e>
 800c9a8:	78fb      	ldrb	r3, [r7, #3]
 800c9aa:	2bff      	cmp	r3, #255	; 0xff
 800c9ac:	d111      	bne.n	800c9d2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c9ae:	693b      	ldr	r3, [r7, #16]
 800c9b0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c9b2:	78ba      	ldrb	r2, [r7, #2]
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	d002      	beq.n	800c9be <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c9b8:	78bb      	ldrb	r3, [r7, #2]
 800c9ba:	2bff      	cmp	r3, #255	; 0xff
 800c9bc:	d109      	bne.n	800c9d2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c9c2:	787a      	ldrb	r2, [r7, #1]
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	d002      	beq.n	800c9ce <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c9c8:	787b      	ldrb	r3, [r7, #1]
 800c9ca:	2bff      	cmp	r3, #255	; 0xff
 800c9cc:	d101      	bne.n	800c9d2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c9ce:	7dfb      	ldrb	r3, [r7, #23]
 800c9d0:	e006      	b.n	800c9e0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c9d2:	7dfb      	ldrb	r3, [r7, #23]
 800c9d4:	3301      	adds	r3, #1
 800c9d6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c9d8:	7dfb      	ldrb	r3, [r7, #23]
 800c9da:	2b01      	cmp	r3, #1
 800c9dc:	d9d6      	bls.n	800c98c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c9de:	23ff      	movs	r3, #255	; 0xff
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	371c      	adds	r7, #28
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ea:	4770      	bx	lr

0800c9ec <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b082      	sub	sp, #8
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f004 fdc9 	bl	801158c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800c9fa:	2101      	movs	r1, #1
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f004 fee2 	bl	80117c6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800ca02:	2300      	movs	r3, #0
}
 800ca04:	4618      	mov	r0, r3
 800ca06:	3708      	adds	r7, #8
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}

0800ca0c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b088      	sub	sp, #32
 800ca10:	af04      	add	r7, sp, #16
 800ca12:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800ca14:	2302      	movs	r3, #2
 800ca16:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800ca18:	2300      	movs	r3, #0
 800ca1a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800ca22:	b2db      	uxtb	r3, r3
 800ca24:	2b01      	cmp	r3, #1
 800ca26:	d102      	bne.n	800ca2e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2203      	movs	r2, #3
 800ca2c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	781b      	ldrb	r3, [r3, #0]
 800ca32:	b2db      	uxtb	r3, r3
 800ca34:	2b0b      	cmp	r3, #11
 800ca36:	f200 8247 	bhi.w	800cec8 <USBH_Process+0x4bc>
 800ca3a:	a201      	add	r2, pc, #4	; (adr r2, 800ca40 <USBH_Process+0x34>)
 800ca3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca40:	0800ca71 	.word	0x0800ca71
 800ca44:	0800cabf 	.word	0x0800cabf
 800ca48:	0800cb43 	.word	0x0800cb43
 800ca4c:	0800ce47 	.word	0x0800ce47
 800ca50:	0800cec9 	.word	0x0800cec9
 800ca54:	0800cc03 	.word	0x0800cc03
 800ca58:	0800cdd1 	.word	0x0800cdd1
 800ca5c:	0800cc55 	.word	0x0800cc55
 800ca60:	0800cc91 	.word	0x0800cc91
 800ca64:	0800cccb 	.word	0x0800cccb
 800ca68:	0800cd29 	.word	0x0800cd29
 800ca6c:	0800ce2f 	.word	0x0800ce2f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ca76:	b2db      	uxtb	r3, r3
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	f000 8227 	beq.w	800cecc <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2201      	movs	r2, #1
 800ca82:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800ca84:	20c8      	movs	r0, #200	; 0xc8
 800ca86:	f004 fee5 	bl	8011854 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f004 fddb 	bl	8011646 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2200      	movs	r2, #0
 800ca94:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2201      	movs	r2, #1
 800caa4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cab4:	2200      	movs	r2, #0
 800cab6:	4619      	mov	r1, r3
 800cab8:	f001 fd70 	bl	800e59c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cabc:	e206      	b.n	800cecc <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800cac4:	2b01      	cmp	r3, #1
 800cac6:	d107      	bne.n	800cad8 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2200      	movs	r2, #0
 800cacc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2202      	movs	r2, #2
 800cad4:	701a      	strb	r2, [r3, #0]
 800cad6:	e025      	b.n	800cb24 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800cade:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cae2:	d914      	bls.n	800cb0e <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800caea:	3301      	adds	r3, #1
 800caec:	b2da      	uxtb	r2, r3
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800cafa:	2b03      	cmp	r3, #3
 800cafc:	d903      	bls.n	800cb06 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	220d      	movs	r2, #13
 800cb02:	701a      	strb	r2, [r3, #0]
 800cb04:	e00e      	b.n	800cb24 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	701a      	strb	r2, [r3, #0]
 800cb0c:	e00a      	b.n	800cb24 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800cb14:	f103 020a 	add.w	r2, r3, #10
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800cb1e:	200a      	movs	r0, #10
 800cb20:	f004 fe98 	bl	8011854 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2201      	movs	r2, #1
 800cb28:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cb38:	2200      	movs	r2, #0
 800cb3a:	4619      	mov	r1, r3
 800cb3c:	f001 fd2e 	bl	800e59c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cb40:	e1cb      	b.n	800ceda <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d005      	beq.n	800cb58 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cb52:	2104      	movs	r1, #4
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800cb58:	2064      	movs	r0, #100	; 0x64
 800cb5a:	f004 fe7b 	bl	8011854 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f004 fd4a 	bl	80115f8 <USBH_LL_GetSpeed>
 800cb64:	4603      	mov	r3, r0
 800cb66:	461a      	mov	r2, r3
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2205      	movs	r2, #5
 800cb72:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800cb74:	2100      	movs	r1, #0
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f001 fbf3 	bl	800e362 <USBH_AllocPipe>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	461a      	mov	r2, r3
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800cb84:	2180      	movs	r1, #128	; 0x80
 800cb86:	6878      	ldr	r0, [r7, #4]
 800cb88:	f001 fbeb 	bl	800e362 <USBH_AllocPipe>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	461a      	mov	r2, r3
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	7919      	ldrb	r1, [r3, #4]
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800cba4:	687a      	ldr	r2, [r7, #4]
 800cba6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800cba8:	b292      	uxth	r2, r2
 800cbaa:	9202      	str	r2, [sp, #8]
 800cbac:	2200      	movs	r2, #0
 800cbae:	9201      	str	r2, [sp, #4]
 800cbb0:	9300      	str	r3, [sp, #0]
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	2280      	movs	r2, #128	; 0x80
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f001 fba4 	bl	800e304 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	7959      	ldrb	r1, [r3, #5]
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800cbcc:	687a      	ldr	r2, [r7, #4]
 800cbce:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800cbd0:	b292      	uxth	r2, r2
 800cbd2:	9202      	str	r2, [sp, #8]
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	9201      	str	r2, [sp, #4]
 800cbd8:	9300      	str	r3, [sp, #0]
 800cbda:	4603      	mov	r3, r0
 800cbdc:	2200      	movs	r2, #0
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	f001 fb90 	bl	800e304 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2201      	movs	r2, #1
 800cbe8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	4619      	mov	r1, r3
 800cbfc:	f001 fcce 	bl	800e59c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cc00:	e16b      	b.n	800ceda <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	f000 f96e 	bl	800cee4 <USBH_HandleEnum>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800cc0c:	7bbb      	ldrb	r3, [r7, #14]
 800cc0e:	b2db      	uxtb	r3, r3
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	f040 815d 	bne.w	800ced0 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2200      	movs	r2, #0
 800cc1a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800cc24:	2b01      	cmp	r3, #1
 800cc26:	d103      	bne.n	800cc30 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2208      	movs	r2, #8
 800cc2c:	701a      	strb	r2, [r3, #0]
 800cc2e:	e002      	b.n	800cc36 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2207      	movs	r2, #7
 800cc34:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2205      	movs	r2, #5
 800cc3a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	4619      	mov	r1, r3
 800cc4e:	f001 fca5 	bl	800e59c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cc52:	e13d      	b.n	800ced0 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	f000 813a 	beq.w	800ced4 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cc66:	2101      	movs	r1, #1
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2208      	movs	r2, #8
 800cc70:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2205      	movs	r2, #5
 800cc76:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cc86:	2200      	movs	r2, #0
 800cc88:	4619      	mov	r1, r3
 800cc8a:	f001 fc87 	bl	800e59c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800cc8e:	e121      	b.n	800ced4 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800cc96:	b29b      	uxth	r3, r3
 800cc98:	4619      	mov	r1, r3
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	f000 fd00 	bl	800d6a0 <USBH_SetCfg>
 800cca0:	4603      	mov	r3, r0
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d102      	bne.n	800ccac <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	2209      	movs	r2, #9
 800ccaa:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2201      	movs	r2, #1
 800ccb0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	4619      	mov	r1, r3
 800ccc4:	f001 fc6a 	bl	800e59c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ccc8:	e107      	b.n	800ceda <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800ccd0:	f003 0320 	and.w	r3, r3, #32
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d015      	beq.n	800cd04 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800ccd8:	2101      	movs	r1, #1
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	f000 fd03 	bl	800d6e6 <USBH_SetFeature>
 800cce0:	4603      	mov	r3, r0
 800cce2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800cce4:	7bbb      	ldrb	r3, [r7, #14]
 800cce6:	b2db      	uxtb	r3, r3
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d103      	bne.n	800ccf4 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	220a      	movs	r2, #10
 800ccf0:	701a      	strb	r2, [r3, #0]
 800ccf2:	e00a      	b.n	800cd0a <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800ccf4:	7bbb      	ldrb	r3, [r7, #14]
 800ccf6:	b2db      	uxtb	r3, r3
 800ccf8:	2b03      	cmp	r3, #3
 800ccfa:	d106      	bne.n	800cd0a <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	220a      	movs	r2, #10
 800cd00:	701a      	strb	r2, [r3, #0]
 800cd02:	e002      	b.n	800cd0a <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	220a      	movs	r2, #10
 800cd08:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2201      	movs	r2, #1
 800cd0e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cd1e:	2200      	movs	r2, #0
 800cd20:	4619      	mov	r1, r3
 800cd22:	f001 fc3b 	bl	800e59c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cd26:	e0d8      	b.n	800ceda <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d03f      	beq.n	800cdb2 <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	2200      	movs	r2, #0
 800cd36:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	73fb      	strb	r3, [r7, #15]
 800cd3e:	e016      	b.n	800cd6e <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800cd40:	7bfa      	ldrb	r2, [r7, #15]
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	32de      	adds	r2, #222	; 0xde
 800cd46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd4a:	791a      	ldrb	r2, [r3, #4]
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800cd52:	429a      	cmp	r2, r3
 800cd54:	d108      	bne.n	800cd68 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 800cd56:	7bfa      	ldrb	r2, [r7, #15]
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	32de      	adds	r2, #222	; 0xde
 800cd5c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800cd66:	e005      	b.n	800cd74 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cd68:	7bfb      	ldrb	r3, [r7, #15]
 800cd6a:	3301      	adds	r3, #1
 800cd6c:	73fb      	strb	r3, [r7, #15]
 800cd6e:	7bfb      	ldrb	r3, [r7, #15]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d0e5      	beq.n	800cd40 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d016      	beq.n	800cdac <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cd84:	689b      	ldr	r3, [r3, #8]
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	4798      	blx	r3
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d109      	bne.n	800cda4 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2206      	movs	r2, #6
 800cd94:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cd9c:	2103      	movs	r1, #3
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	4798      	blx	r3
 800cda2:	e006      	b.n	800cdb2 <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	220d      	movs	r2, #13
 800cda8:	701a      	strb	r2, [r3, #0]
 800cdaa:	e002      	b.n	800cdb2 <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	220d      	movs	r2, #13
 800cdb0:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2205      	movs	r2, #5
 800cdb6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	4619      	mov	r1, r3
 800cdca:	f001 fbe7 	bl	800e59c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cdce:	e084      	b.n	800ceda <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d017      	beq.n	800ce0a <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cde0:	691b      	ldr	r3, [r3, #16]
 800cde2:	6878      	ldr	r0, [r7, #4]
 800cde4:	4798      	blx	r3
 800cde6:	4603      	mov	r3, r0
 800cde8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800cdea:	7bbb      	ldrb	r3, [r7, #14]
 800cdec:	b2db      	uxtb	r3, r3
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d103      	bne.n	800cdfa <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	220b      	movs	r2, #11
 800cdf6:	701a      	strb	r2, [r3, #0]
 800cdf8:	e00a      	b.n	800ce10 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 800cdfa:	7bbb      	ldrb	r3, [r7, #14]
 800cdfc:	b2db      	uxtb	r3, r3
 800cdfe:	2b02      	cmp	r3, #2
 800ce00:	d106      	bne.n	800ce10 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	220d      	movs	r2, #13
 800ce06:	701a      	strb	r2, [r3, #0]
 800ce08:	e002      	b.n	800ce10 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	220d      	movs	r2, #13
 800ce0e:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2205      	movs	r2, #5
 800ce14:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ce24:	2200      	movs	r2, #0
 800ce26:	4619      	mov	r1, r3
 800ce28:	f001 fbb8 	bl	800e59c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ce2c:	e055      	b.n	800ceda <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d04f      	beq.n	800ced8 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ce3e:	695b      	ldr	r3, [r3, #20]
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	4798      	blx	r3
      }
      break;
 800ce44:	e048      	b.n	800ced8 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2200      	movs	r2, #0
 800ce4a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f7ff fcec 	bl	800c82c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d009      	beq.n	800ce72 <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ce64:	68db      	ldr	r3, [r3, #12]
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d005      	beq.n	800ce88 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ce82:	2105      	movs	r1, #5
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800ce8e:	b2db      	uxtb	r3, r3
 800ce90:	2b01      	cmp	r3, #1
 800ce92:	d107      	bne.n	800cea4 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2200      	movs	r2, #0
 800ce98:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f7ff fda5 	bl	800c9ec <USBH_Start>
 800cea2:	e002      	b.n	800ceaa <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f004 fb71 	bl	801158c <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2201      	movs	r2, #1
 800ceae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cebe:	2200      	movs	r2, #0
 800cec0:	4619      	mov	r1, r3
 800cec2:	f001 fb6b 	bl	800e59c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cec6:	e008      	b.n	800ceda <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 800cec8:	bf00      	nop
 800ceca:	e006      	b.n	800ceda <USBH_Process+0x4ce>
      break;
 800cecc:	bf00      	nop
 800cece:	e004      	b.n	800ceda <USBH_Process+0x4ce>
      break;
 800ced0:	bf00      	nop
 800ced2:	e002      	b.n	800ceda <USBH_Process+0x4ce>
    break;
 800ced4:	bf00      	nop
 800ced6:	e000      	b.n	800ceda <USBH_Process+0x4ce>
      break;
 800ced8:	bf00      	nop
  }
  return USBH_OK;
 800ceda:	2300      	movs	r3, #0
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3710      	adds	r7, #16
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}

0800cee4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b088      	sub	sp, #32
 800cee8:	af04      	add	r7, sp, #16
 800ceea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ceec:	2301      	movs	r3, #1
 800ceee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800cef0:	2301      	movs	r3, #1
 800cef2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	785b      	ldrb	r3, [r3, #1]
 800cef8:	2b07      	cmp	r3, #7
 800cefa:	f200 8208 	bhi.w	800d30e <USBH_HandleEnum+0x42a>
 800cefe:	a201      	add	r2, pc, #4	; (adr r2, 800cf04 <USBH_HandleEnum+0x20>)
 800cf00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf04:	0800cf25 	.word	0x0800cf25
 800cf08:	0800cfe3 	.word	0x0800cfe3
 800cf0c:	0800d04d 	.word	0x0800d04d
 800cf10:	0800d0db 	.word	0x0800d0db
 800cf14:	0800d145 	.word	0x0800d145
 800cf18:	0800d1b5 	.word	0x0800d1b5
 800cf1c:	0800d251 	.word	0x0800d251
 800cf20:	0800d2cf 	.word	0x0800d2cf
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800cf24:	2108      	movs	r1, #8
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f000 faea 	bl	800d500 <USBH_Get_DevDesc>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cf30:	7bbb      	ldrb	r3, [r7, #14]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d130      	bne.n	800cf98 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2201      	movs	r2, #1
 800cf44:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	7919      	ldrb	r1, [r3, #4]
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800cf56:	687a      	ldr	r2, [r7, #4]
 800cf58:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800cf5a:	b292      	uxth	r2, r2
 800cf5c:	9202      	str	r2, [sp, #8]
 800cf5e:	2200      	movs	r2, #0
 800cf60:	9201      	str	r2, [sp, #4]
 800cf62:	9300      	str	r3, [sp, #0]
 800cf64:	4603      	mov	r3, r0
 800cf66:	2280      	movs	r2, #128	; 0x80
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	f001 f9cb 	bl	800e304 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	7959      	ldrb	r1, [r3, #5]
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800cf7e:	687a      	ldr	r2, [r7, #4]
 800cf80:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cf82:	b292      	uxth	r2, r2
 800cf84:	9202      	str	r2, [sp, #8]
 800cf86:	2200      	movs	r2, #0
 800cf88:	9201      	str	r2, [sp, #4]
 800cf8a:	9300      	str	r3, [sp, #0]
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	2200      	movs	r2, #0
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	f001 f9b7 	bl	800e304 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800cf96:	e1bc      	b.n	800d312 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cf98:	7bbb      	ldrb	r3, [r7, #14]
 800cf9a:	2b03      	cmp	r3, #3
 800cf9c:	f040 81b9 	bne.w	800d312 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cfa6:	3301      	adds	r3, #1
 800cfa8:	b2da      	uxtb	r2, r3
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cfb6:	2b03      	cmp	r3, #3
 800cfb8:	d903      	bls.n	800cfc2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	220d      	movs	r2, #13
 800cfbe:	701a      	strb	r2, [r3, #0]
      break;
 800cfc0:	e1a7      	b.n	800d312 <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	795b      	ldrb	r3, [r3, #5]
 800cfc6:	4619      	mov	r1, r3
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f001 f9eb 	bl	800e3a4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	791b      	ldrb	r3, [r3, #4]
 800cfd2:	4619      	mov	r1, r3
 800cfd4:	6878      	ldr	r0, [r7, #4]
 800cfd6:	f001 f9e5 	bl	800e3a4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2200      	movs	r2, #0
 800cfde:	701a      	strb	r2, [r3, #0]
      break;
 800cfe0:	e197      	b.n	800d312 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800cfe2:	2112      	movs	r1, #18
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f000 fa8b 	bl	800d500 <USBH_Get_DevDesc>
 800cfea:	4603      	mov	r3, r0
 800cfec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cfee:	7bbb      	ldrb	r3, [r7, #14]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d103      	bne.n	800cffc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2202      	movs	r2, #2
 800cff8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cffa:	e18c      	b.n	800d316 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cffc:	7bbb      	ldrb	r3, [r7, #14]
 800cffe:	2b03      	cmp	r3, #3
 800d000:	f040 8189 	bne.w	800d316 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d00a:	3301      	adds	r3, #1
 800d00c:	b2da      	uxtb	r2, r3
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d01a:	2b03      	cmp	r3, #3
 800d01c:	d903      	bls.n	800d026 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	220d      	movs	r2, #13
 800d022:	701a      	strb	r2, [r3, #0]
      break;
 800d024:	e177      	b.n	800d316 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	795b      	ldrb	r3, [r3, #5]
 800d02a:	4619      	mov	r1, r3
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f001 f9b9 	bl	800e3a4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	791b      	ldrb	r3, [r3, #4]
 800d036:	4619      	mov	r1, r3
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	f001 f9b3 	bl	800e3a4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2200      	movs	r2, #0
 800d042:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2200      	movs	r2, #0
 800d048:	701a      	strb	r2, [r3, #0]
      break;
 800d04a:	e164      	b.n	800d316 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800d04c:	2101      	movs	r1, #1
 800d04e:	6878      	ldr	r0, [r7, #4]
 800d050:	f000 fb02 	bl	800d658 <USBH_SetAddress>
 800d054:	4603      	mov	r3, r0
 800d056:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d058:	7bbb      	ldrb	r3, [r7, #14]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d132      	bne.n	800d0c4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800d05e:	2002      	movs	r0, #2
 800d060:	f004 fbf8 	bl	8011854 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2201      	movs	r2, #1
 800d068:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2203      	movs	r2, #3
 800d070:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	7919      	ldrb	r1, [r3, #4]
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d082:	687a      	ldr	r2, [r7, #4]
 800d084:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d086:	b292      	uxth	r2, r2
 800d088:	9202      	str	r2, [sp, #8]
 800d08a:	2200      	movs	r2, #0
 800d08c:	9201      	str	r2, [sp, #4]
 800d08e:	9300      	str	r3, [sp, #0]
 800d090:	4603      	mov	r3, r0
 800d092:	2280      	movs	r2, #128	; 0x80
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f001 f935 	bl	800e304 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	7959      	ldrb	r1, [r3, #5]
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d0aa:	687a      	ldr	r2, [r7, #4]
 800d0ac:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d0ae:	b292      	uxth	r2, r2
 800d0b0:	9202      	str	r2, [sp, #8]
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	9201      	str	r2, [sp, #4]
 800d0b6:	9300      	str	r3, [sp, #0]
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	f001 f921 	bl	800e304 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d0c2:	e12a      	b.n	800d31a <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d0c4:	7bbb      	ldrb	r3, [r7, #14]
 800d0c6:	2b03      	cmp	r3, #3
 800d0c8:	f040 8127 	bne.w	800d31a <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	220d      	movs	r2, #13
 800d0d0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	705a      	strb	r2, [r3, #1]
      break;
 800d0d8:	e11f      	b.n	800d31a <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800d0da:	2109      	movs	r1, #9
 800d0dc:	6878      	ldr	r0, [r7, #4]
 800d0de:	f000 fa37 	bl	800d550 <USBH_Get_CfgDesc>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d0e6:	7bbb      	ldrb	r3, [r7, #14]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d103      	bne.n	800d0f4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2204      	movs	r2, #4
 800d0f0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d0f2:	e114      	b.n	800d31e <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d0f4:	7bbb      	ldrb	r3, [r7, #14]
 800d0f6:	2b03      	cmp	r3, #3
 800d0f8:	f040 8111 	bne.w	800d31e <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d102:	3301      	adds	r3, #1
 800d104:	b2da      	uxtb	r2, r3
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d112:	2b03      	cmp	r3, #3
 800d114:	d903      	bls.n	800d11e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	220d      	movs	r2, #13
 800d11a:	701a      	strb	r2, [r3, #0]
      break;
 800d11c:	e0ff      	b.n	800d31e <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	795b      	ldrb	r3, [r3, #5]
 800d122:	4619      	mov	r1, r3
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f001 f93d 	bl	800e3a4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	791b      	ldrb	r3, [r3, #4]
 800d12e:	4619      	mov	r1, r3
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f001 f937 	bl	800e3a4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2200      	movs	r2, #0
 800d13a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2200      	movs	r2, #0
 800d140:	701a      	strb	r2, [r3, #0]
      break;
 800d142:	e0ec      	b.n	800d31e <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800d14a:	4619      	mov	r1, r3
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f000 f9ff 	bl	800d550 <USBH_Get_CfgDesc>
 800d152:	4603      	mov	r3, r0
 800d154:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d156:	7bbb      	ldrb	r3, [r7, #14]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d103      	bne.n	800d164 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2205      	movs	r2, #5
 800d160:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d162:	e0de      	b.n	800d322 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d164:	7bbb      	ldrb	r3, [r7, #14]
 800d166:	2b03      	cmp	r3, #3
 800d168:	f040 80db 	bne.w	800d322 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d172:	3301      	adds	r3, #1
 800d174:	b2da      	uxtb	r2, r3
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d182:	2b03      	cmp	r3, #3
 800d184:	d903      	bls.n	800d18e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	220d      	movs	r2, #13
 800d18a:	701a      	strb	r2, [r3, #0]
      break;
 800d18c:	e0c9      	b.n	800d322 <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	795b      	ldrb	r3, [r3, #5]
 800d192:	4619      	mov	r1, r3
 800d194:	6878      	ldr	r0, [r7, #4]
 800d196:	f001 f905 	bl	800e3a4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	791b      	ldrb	r3, [r3, #4]
 800d19e:	4619      	mov	r1, r3
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f001 f8ff 	bl	800e3a4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	701a      	strb	r2, [r3, #0]
      break;
 800d1b2:	e0b6      	b.n	800d322 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d036      	beq.n	800d22c <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d1ca:	23ff      	movs	r3, #255	; 0xff
 800d1cc:	6878      	ldr	r0, [r7, #4]
 800d1ce:	f000 f9e3 	bl	800d598 <USBH_Get_StringDesc>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d1d6:	7bbb      	ldrb	r3, [r7, #14]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d111      	bne.n	800d200 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2206      	movs	r2, #6
 800d1e0:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2205      	movs	r2, #5
 800d1e6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	4619      	mov	r1, r3
 800d1fa:	f001 f9cf 	bl	800e59c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d1fe:	e092      	b.n	800d326 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d200:	7bbb      	ldrb	r3, [r7, #14]
 800d202:	2b03      	cmp	r3, #3
 800d204:	f040 808f 	bne.w	800d326 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2206      	movs	r2, #6
 800d20c:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2205      	movs	r2, #5
 800d212:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d222:	2200      	movs	r2, #0
 800d224:	4619      	mov	r1, r3
 800d226:	f001 f9b9 	bl	800e59c <osMessagePut>
      break;
 800d22a:	e07c      	b.n	800d326 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2206      	movs	r2, #6
 800d230:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2205      	movs	r2, #5
 800d236:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d246:	2200      	movs	r2, #0
 800d248:	4619      	mov	r1, r3
 800d24a:	f001 f9a7 	bl	800e59c <osMessagePut>
      break;
 800d24e:	e06a      	b.n	800d326 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800d256:	2b00      	cmp	r3, #0
 800d258:	d027      	beq.n	800d2aa <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d266:	23ff      	movs	r3, #255	; 0xff
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f000 f995 	bl	800d598 <USBH_Get_StringDesc>
 800d26e:	4603      	mov	r3, r0
 800d270:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d272:	7bbb      	ldrb	r3, [r7, #14]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d103      	bne.n	800d280 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2207      	movs	r2, #7
 800d27c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d27e:	e054      	b.n	800d32a <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d280:	7bbb      	ldrb	r3, [r7, #14]
 800d282:	2b03      	cmp	r3, #3
 800d284:	d151      	bne.n	800d32a <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	2207      	movs	r2, #7
 800d28a:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2205      	movs	r2, #5
 800d290:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	4619      	mov	r1, r3
 800d2a4:	f001 f97a 	bl	800e59c <osMessagePut>
      break;
 800d2a8:	e03f      	b.n	800d32a <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	2207      	movs	r2, #7
 800d2ae:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2205      	movs	r2, #5
 800d2b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	4619      	mov	r1, r3
 800d2c8:	f001 f968 	bl	800e59c <osMessagePut>
      break;
 800d2cc:	e02d      	b.n	800d32a <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d017      	beq.n	800d308 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d2e4:	23ff      	movs	r3, #255	; 0xff
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	f000 f956 	bl	800d598 <USBH_Get_StringDesc>
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d2f0:	7bbb      	ldrb	r3, [r7, #14]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d102      	bne.n	800d2fc <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d2fa:	e018      	b.n	800d32e <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d2fc:	7bbb      	ldrb	r3, [r7, #14]
 800d2fe:	2b03      	cmp	r3, #3
 800d300:	d115      	bne.n	800d32e <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800d302:	2300      	movs	r3, #0
 800d304:	73fb      	strb	r3, [r7, #15]
      break;
 800d306:	e012      	b.n	800d32e <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800d308:	2300      	movs	r3, #0
 800d30a:	73fb      	strb	r3, [r7, #15]
      break;
 800d30c:	e00f      	b.n	800d32e <USBH_HandleEnum+0x44a>

    default:
      break;
 800d30e:	bf00      	nop
 800d310:	e00e      	b.n	800d330 <USBH_HandleEnum+0x44c>
      break;
 800d312:	bf00      	nop
 800d314:	e00c      	b.n	800d330 <USBH_HandleEnum+0x44c>
      break;
 800d316:	bf00      	nop
 800d318:	e00a      	b.n	800d330 <USBH_HandleEnum+0x44c>
      break;
 800d31a:	bf00      	nop
 800d31c:	e008      	b.n	800d330 <USBH_HandleEnum+0x44c>
      break;
 800d31e:	bf00      	nop
 800d320:	e006      	b.n	800d330 <USBH_HandleEnum+0x44c>
      break;
 800d322:	bf00      	nop
 800d324:	e004      	b.n	800d330 <USBH_HandleEnum+0x44c>
      break;
 800d326:	bf00      	nop
 800d328:	e002      	b.n	800d330 <USBH_HandleEnum+0x44c>
      break;
 800d32a:	bf00      	nop
 800d32c:	e000      	b.n	800d330 <USBH_HandleEnum+0x44c>
      break;
 800d32e:	bf00      	nop
  }
  return Status;
 800d330:	7bfb      	ldrb	r3, [r7, #15]
}
 800d332:	4618      	mov	r0, r3
 800d334:	3710      	adds	r7, #16
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}
 800d33a:	bf00      	nop

0800d33c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d33c:	b480      	push	{r7}
 800d33e:	b083      	sub	sp, #12
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
 800d344:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	683a      	ldr	r2, [r7, #0]
 800d34a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800d34e:	bf00      	nop
 800d350:	370c      	adds	r7, #12
 800d352:	46bd      	mov	sp, r7
 800d354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d358:	4770      	bx	lr

0800d35a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d35a:	b580      	push	{r7, lr}
 800d35c:	b082      	sub	sp, #8
 800d35e:	af00      	add	r7, sp, #0
 800d360:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d368:	1c5a      	adds	r2, r3, #1
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800d370:	6878      	ldr	r0, [r7, #4]
 800d372:	f000 f804 	bl	800d37e <USBH_HandleSof>
}
 800d376:	bf00      	nop
 800d378:	3708      	adds	r7, #8
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd80      	pop	{r7, pc}

0800d37e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d37e:	b580      	push	{r7, lr}
 800d380:	b082      	sub	sp, #8
 800d382:	af00      	add	r7, sp, #0
 800d384:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	781b      	ldrb	r3, [r3, #0]
 800d38a:	b2db      	uxtb	r3, r3
 800d38c:	2b0b      	cmp	r3, #11
 800d38e:	d10a      	bne.n	800d3a6 <USBH_HandleSof+0x28>
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d396:	2b00      	cmp	r3, #0
 800d398:	d005      	beq.n	800d3a6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d3a0:	699b      	ldr	r3, [r3, #24]
 800d3a2:	6878      	ldr	r0, [r7, #4]
 800d3a4:	4798      	blx	r3
  }
}
 800d3a6:	bf00      	nop
 800d3a8:	3708      	adds	r7, #8
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd80      	pop	{r7, pc}

0800d3ae <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800d3ae:	b580      	push	{r7, lr}
 800d3b0:	b082      	sub	sp, #8
 800d3b2:	af00      	add	r7, sp, #0
 800d3b4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2201      	movs	r2, #1
 800d3ba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2201      	movs	r2, #1
 800d3c2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	4619      	mov	r1, r3
 800d3d6:	f001 f8e1 	bl	800e59c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800d3da:	bf00      	nop
}
 800d3dc:	3708      	adds	r7, #8
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}

0800d3e2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d3e2:	b480      	push	{r7}
 800d3e4:	b083      	sub	sp, #12
 800d3e6:	af00      	add	r7, sp, #0
 800d3e8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800d3f2:	bf00      	nop
}
 800d3f4:	370c      	adds	r7, #12
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fc:	4770      	bx	lr

0800d3fe <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d3fe:	b580      	push	{r7, lr}
 800d400:	b082      	sub	sp, #8
 800d402:	af00      	add	r7, sp, #0
 800d404:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2201      	movs	r2, #1
 800d40a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2200      	movs	r2, #0
 800d412:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2200      	movs	r2, #0
 800d41a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	2201      	movs	r2, #1
 800d422:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d432:	2200      	movs	r2, #0
 800d434:	4619      	mov	r1, r3
 800d436:	f001 f8b1 	bl	800e59c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800d43a:	2300      	movs	r3, #0
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	3708      	adds	r7, #8
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}

0800d444 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b082      	sub	sp, #8
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2201      	movs	r2, #1
 800d450:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2200      	movs	r2, #0
 800d458:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2200      	movs	r2, #0
 800d460:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f004 f8ac 	bl	80115c2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	791b      	ldrb	r3, [r3, #4]
 800d46e:	4619      	mov	r1, r3
 800d470:	6878      	ldr	r0, [r7, #4]
 800d472:	f000 ff97 	bl	800e3a4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	795b      	ldrb	r3, [r3, #5]
 800d47a:	4619      	mov	r1, r3
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f000 ff91 	bl	800e3a4 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2201      	movs	r2, #1
 800d486:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d496:	2200      	movs	r2, #0
 800d498:	4619      	mov	r1, r3
 800d49a:	f001 f87f 	bl	800e59c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800d49e:	2300      	movs	r3, #0
}
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	3708      	adds	r7, #8
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	bd80      	pop	{r7, pc}

0800d4a8 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b086      	sub	sp, #24
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800d4b6:	f107 030c 	add.w	r3, r7, #12
 800d4ba:	f04f 32ff 	mov.w	r2, #4294967295
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f001 f8ac 	bl	800e61c <osMessageGet>
    if (event.status == osEventMessage)
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	2b10      	cmp	r3, #16
 800d4c8:	d1f2      	bne.n	800d4b0 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800d4ca:	6878      	ldr	r0, [r7, #4]
 800d4cc:	f7ff fa9e 	bl	800ca0c <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800d4d0:	e7ee      	b.n	800d4b0 <USBH_Process_OS+0x8>

0800d4d2 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800d4d2:	b580      	push	{r7, lr}
 800d4d4:	b082      	sub	sp, #8
 800d4d6:	af00      	add	r7, sp, #0
 800d4d8:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	2201      	movs	r2, #1
 800d4de:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	4619      	mov	r1, r3
 800d4f2:	f001 f853 	bl	800e59c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800d4f6:	2300      	movs	r3, #0
}
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	3708      	adds	r7, #8
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd80      	pop	{r7, pc}

0800d500 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b086      	sub	sp, #24
 800d504:	af02      	add	r7, sp, #8
 800d506:	6078      	str	r0, [r7, #4]
 800d508:	460b      	mov	r3, r1
 800d50a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800d512:	78fb      	ldrb	r3, [r7, #3]
 800d514:	b29b      	uxth	r3, r3
 800d516:	9300      	str	r3, [sp, #0]
 800d518:	4613      	mov	r3, r2
 800d51a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d51e:	2100      	movs	r1, #0
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f000 f864 	bl	800d5ee <USBH_GetDescriptor>
 800d526:	4603      	mov	r3, r0
 800d528:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800d52a:	7bfb      	ldrb	r3, [r7, #15]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d10a      	bne.n	800d546 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f203 3026 	addw	r0, r3, #806	; 0x326
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d53c:	78fa      	ldrb	r2, [r7, #3]
 800d53e:	b292      	uxth	r2, r2
 800d540:	4619      	mov	r1, r3
 800d542:	f000 f918 	bl	800d776 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800d546:	7bfb      	ldrb	r3, [r7, #15]
}
 800d548:	4618      	mov	r0, r3
 800d54a:	3710      	adds	r7, #16
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}

0800d550 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800d550:	b580      	push	{r7, lr}
 800d552:	b086      	sub	sp, #24
 800d554:	af02      	add	r7, sp, #8
 800d556:	6078      	str	r0, [r7, #4]
 800d558:	460b      	mov	r3, r1
 800d55a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	331c      	adds	r3, #28
 800d560:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d562:	887b      	ldrh	r3, [r7, #2]
 800d564:	9300      	str	r3, [sp, #0]
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d56c:	2100      	movs	r1, #0
 800d56e:	6878      	ldr	r0, [r7, #4]
 800d570:	f000 f83d 	bl	800d5ee <USBH_GetDescriptor>
 800d574:	4603      	mov	r3, r0
 800d576:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800d578:	7bfb      	ldrb	r3, [r7, #15]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d107      	bne.n	800d58e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800d57e:	887b      	ldrh	r3, [r7, #2]
 800d580:	461a      	mov	r2, r3
 800d582:	68b9      	ldr	r1, [r7, #8]
 800d584:	6878      	ldr	r0, [r7, #4]
 800d586:	f000 f987 	bl	800d898 <USBH_ParseCfgDesc>
 800d58a:	4603      	mov	r3, r0
 800d58c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d58e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d590:	4618      	mov	r0, r3
 800d592:	3710      	adds	r7, #16
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}

0800d598 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b088      	sub	sp, #32
 800d59c:	af02      	add	r7, sp, #8
 800d59e:	60f8      	str	r0, [r7, #12]
 800d5a0:	607a      	str	r2, [r7, #4]
 800d5a2:	461a      	mov	r2, r3
 800d5a4:	460b      	mov	r3, r1
 800d5a6:	72fb      	strb	r3, [r7, #11]
 800d5a8:	4613      	mov	r3, r2
 800d5aa:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800d5ac:	7afb      	ldrb	r3, [r7, #11]
 800d5ae:	b29b      	uxth	r3, r3
 800d5b0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800d5b4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800d5bc:	893b      	ldrh	r3, [r7, #8]
 800d5be:	9300      	str	r3, [sp, #0]
 800d5c0:	460b      	mov	r3, r1
 800d5c2:	2100      	movs	r1, #0
 800d5c4:	68f8      	ldr	r0, [r7, #12]
 800d5c6:	f000 f812 	bl	800d5ee <USBH_GetDescriptor>
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800d5ce:	7dfb      	ldrb	r3, [r7, #23]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d107      	bne.n	800d5e4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d5da:	893a      	ldrh	r2, [r7, #8]
 800d5dc:	6879      	ldr	r1, [r7, #4]
 800d5de:	4618      	mov	r0, r3
 800d5e0:	f000 fb24 	bl	800dc2c <USBH_ParseStringDesc>
  }

  return status;
 800d5e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	3718      	adds	r7, #24
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}

0800d5ee <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800d5ee:	b580      	push	{r7, lr}
 800d5f0:	b084      	sub	sp, #16
 800d5f2:	af00      	add	r7, sp, #0
 800d5f4:	60f8      	str	r0, [r7, #12]
 800d5f6:	607b      	str	r3, [r7, #4]
 800d5f8:	460b      	mov	r3, r1
 800d5fa:	72fb      	strb	r3, [r7, #11]
 800d5fc:	4613      	mov	r3, r2
 800d5fe:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	789b      	ldrb	r3, [r3, #2]
 800d604:	2b01      	cmp	r3, #1
 800d606:	d11c      	bne.n	800d642 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d608:	7afb      	ldrb	r3, [r7, #11]
 800d60a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d60e:	b2da      	uxtb	r2, r3
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	2206      	movs	r2, #6
 800d618:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	893a      	ldrh	r2, [r7, #8]
 800d61e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d620:	893b      	ldrh	r3, [r7, #8]
 800d622:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d626:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d62a:	d104      	bne.n	800d636 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	f240 4209 	movw	r2, #1033	; 0x409
 800d632:	829a      	strh	r2, [r3, #20]
 800d634:	e002      	b.n	800d63c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	2200      	movs	r2, #0
 800d63a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	8b3a      	ldrh	r2, [r7, #24]
 800d640:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800d642:	8b3b      	ldrh	r3, [r7, #24]
 800d644:	461a      	mov	r2, r3
 800d646:	6879      	ldr	r1, [r7, #4]
 800d648:	68f8      	ldr	r0, [r7, #12]
 800d64a:	f000 fb3d 	bl	800dcc8 <USBH_CtlReq>
 800d64e:	4603      	mov	r3, r0
}
 800d650:	4618      	mov	r0, r3
 800d652:	3710      	adds	r7, #16
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}

0800d658 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b082      	sub	sp, #8
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
 800d660:	460b      	mov	r3, r1
 800d662:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	789b      	ldrb	r3, [r3, #2]
 800d668:	2b01      	cmp	r3, #1
 800d66a:	d10f      	bne.n	800d68c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2200      	movs	r2, #0
 800d670:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2205      	movs	r2, #5
 800d676:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d678:	78fb      	ldrb	r3, [r7, #3]
 800d67a:	b29a      	uxth	r2, r3
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2200      	movs	r2, #0
 800d684:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	2200      	movs	r2, #0
 800d68a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d68c:	2200      	movs	r2, #0
 800d68e:	2100      	movs	r1, #0
 800d690:	6878      	ldr	r0, [r7, #4]
 800d692:	f000 fb19 	bl	800dcc8 <USBH_CtlReq>
 800d696:	4603      	mov	r3, r0
}
 800d698:	4618      	mov	r0, r3
 800d69a:	3708      	adds	r7, #8
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd80      	pop	{r7, pc}

0800d6a0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b082      	sub	sp, #8
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
 800d6a8:	460b      	mov	r3, r1
 800d6aa:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	789b      	ldrb	r3, [r3, #2]
 800d6b0:	2b01      	cmp	r3, #1
 800d6b2:	d10e      	bne.n	800d6d2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	2209      	movs	r2, #9
 800d6be:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	887a      	ldrh	r2, [r7, #2]
 800d6c4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	2100      	movs	r1, #0
 800d6d6:	6878      	ldr	r0, [r7, #4]
 800d6d8:	f000 faf6 	bl	800dcc8 <USBH_CtlReq>
 800d6dc:	4603      	mov	r3, r0
}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	3708      	adds	r7, #8
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}

0800d6e6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d6e6:	b580      	push	{r7, lr}
 800d6e8:	b082      	sub	sp, #8
 800d6ea:	af00      	add	r7, sp, #0
 800d6ec:	6078      	str	r0, [r7, #4]
 800d6ee:	460b      	mov	r3, r1
 800d6f0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	789b      	ldrb	r3, [r3, #2]
 800d6f6:	2b01      	cmp	r3, #1
 800d6f8:	d10f      	bne.n	800d71a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	2203      	movs	r2, #3
 800d704:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d706:	78fb      	ldrb	r3, [r7, #3]
 800d708:	b29a      	uxth	r2, r3
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2200      	movs	r2, #0
 800d712:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2200      	movs	r2, #0
 800d718:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d71a:	2200      	movs	r2, #0
 800d71c:	2100      	movs	r1, #0
 800d71e:	6878      	ldr	r0, [r7, #4]
 800d720:	f000 fad2 	bl	800dcc8 <USBH_CtlReq>
 800d724:	4603      	mov	r3, r0
}
 800d726:	4618      	mov	r0, r3
 800d728:	3708      	adds	r7, #8
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}

0800d72e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d72e:	b580      	push	{r7, lr}
 800d730:	b082      	sub	sp, #8
 800d732:	af00      	add	r7, sp, #0
 800d734:	6078      	str	r0, [r7, #4]
 800d736:	460b      	mov	r3, r1
 800d738:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	789b      	ldrb	r3, [r3, #2]
 800d73e:	2b01      	cmp	r3, #1
 800d740:	d10f      	bne.n	800d762 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2202      	movs	r2, #2
 800d746:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2201      	movs	r2, #1
 800d74c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	2200      	movs	r2, #0
 800d752:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d754:	78fb      	ldrb	r3, [r7, #3]
 800d756:	b29a      	uxth	r2, r3
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2200      	movs	r2, #0
 800d760:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800d762:	2200      	movs	r2, #0
 800d764:	2100      	movs	r1, #0
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f000 faae 	bl	800dcc8 <USBH_CtlReq>
 800d76c:	4603      	mov	r3, r0
}
 800d76e:	4618      	mov	r0, r3
 800d770:	3708      	adds	r7, #8
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}

0800d776 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800d776:	b480      	push	{r7}
 800d778:	b085      	sub	sp, #20
 800d77a:	af00      	add	r7, sp, #0
 800d77c:	60f8      	str	r0, [r7, #12]
 800d77e:	60b9      	str	r1, [r7, #8]
 800d780:	4613      	mov	r3, r2
 800d782:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800d784:	68bb      	ldr	r3, [r7, #8]
 800d786:	781a      	ldrb	r2, [r3, #0]
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800d78c:	68bb      	ldr	r3, [r7, #8]
 800d78e:	785a      	ldrb	r2, [r3, #1]
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	3302      	adds	r3, #2
 800d798:	781b      	ldrb	r3, [r3, #0]
 800d79a:	b29a      	uxth	r2, r3
 800d79c:	68bb      	ldr	r3, [r7, #8]
 800d79e:	3303      	adds	r3, #3
 800d7a0:	781b      	ldrb	r3, [r3, #0]
 800d7a2:	b29b      	uxth	r3, r3
 800d7a4:	021b      	lsls	r3, r3, #8
 800d7a6:	b29b      	uxth	r3, r3
 800d7a8:	4313      	orrs	r3, r2
 800d7aa:	b29a      	uxth	r2, r3
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	791a      	ldrb	r2, [r3, #4]
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	795a      	ldrb	r2, [r3, #5]
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	799a      	ldrb	r2, [r3, #6]
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800d7c8:	68bb      	ldr	r3, [r7, #8]
 800d7ca:	79da      	ldrb	r2, [r3, #7]
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	79db      	ldrb	r3, [r3, #7]
 800d7d4:	2b20      	cmp	r3, #32
 800d7d6:	dc11      	bgt.n	800d7fc <USBH_ParseDevDesc+0x86>
 800d7d8:	2b08      	cmp	r3, #8
 800d7da:	db16      	blt.n	800d80a <USBH_ParseDevDesc+0x94>
 800d7dc:	3b08      	subs	r3, #8
 800d7de:	2201      	movs	r2, #1
 800d7e0:	fa02 f303 	lsl.w	r3, r2, r3
 800d7e4:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800d7e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	bf14      	ite	ne
 800d7f0:	2301      	movne	r3, #1
 800d7f2:	2300      	moveq	r3, #0
 800d7f4:	b2db      	uxtb	r3, r3
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d102      	bne.n	800d800 <USBH_ParseDevDesc+0x8a>
 800d7fa:	e006      	b.n	800d80a <USBH_ParseDevDesc+0x94>
 800d7fc:	2b40      	cmp	r3, #64	; 0x40
 800d7fe:	d104      	bne.n	800d80a <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	79da      	ldrb	r2, [r3, #7]
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	71da      	strb	r2, [r3, #7]
      break;
 800d808:	e003      	b.n	800d812 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	2240      	movs	r2, #64	; 0x40
 800d80e:	71da      	strb	r2, [r3, #7]
      break;
 800d810:	bf00      	nop
  }

  if (length > 8U)
 800d812:	88fb      	ldrh	r3, [r7, #6]
 800d814:	2b08      	cmp	r3, #8
 800d816:	d939      	bls.n	800d88c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800d818:	68bb      	ldr	r3, [r7, #8]
 800d81a:	3308      	adds	r3, #8
 800d81c:	781b      	ldrb	r3, [r3, #0]
 800d81e:	b29a      	uxth	r2, r3
 800d820:	68bb      	ldr	r3, [r7, #8]
 800d822:	3309      	adds	r3, #9
 800d824:	781b      	ldrb	r3, [r3, #0]
 800d826:	b29b      	uxth	r3, r3
 800d828:	021b      	lsls	r3, r3, #8
 800d82a:	b29b      	uxth	r3, r3
 800d82c:	4313      	orrs	r3, r2
 800d82e:	b29a      	uxth	r2, r3
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800d834:	68bb      	ldr	r3, [r7, #8]
 800d836:	330a      	adds	r3, #10
 800d838:	781b      	ldrb	r3, [r3, #0]
 800d83a:	b29a      	uxth	r2, r3
 800d83c:	68bb      	ldr	r3, [r7, #8]
 800d83e:	330b      	adds	r3, #11
 800d840:	781b      	ldrb	r3, [r3, #0]
 800d842:	b29b      	uxth	r3, r3
 800d844:	021b      	lsls	r3, r3, #8
 800d846:	b29b      	uxth	r3, r3
 800d848:	4313      	orrs	r3, r2
 800d84a:	b29a      	uxth	r2, r3
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800d850:	68bb      	ldr	r3, [r7, #8]
 800d852:	330c      	adds	r3, #12
 800d854:	781b      	ldrb	r3, [r3, #0]
 800d856:	b29a      	uxth	r2, r3
 800d858:	68bb      	ldr	r3, [r7, #8]
 800d85a:	330d      	adds	r3, #13
 800d85c:	781b      	ldrb	r3, [r3, #0]
 800d85e:	b29b      	uxth	r3, r3
 800d860:	021b      	lsls	r3, r3, #8
 800d862:	b29b      	uxth	r3, r3
 800d864:	4313      	orrs	r3, r2
 800d866:	b29a      	uxth	r2, r3
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	7b9a      	ldrb	r2, [r3, #14]
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	7bda      	ldrb	r2, [r3, #15]
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800d87c:	68bb      	ldr	r3, [r7, #8]
 800d87e:	7c1a      	ldrb	r2, [r3, #16]
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800d884:	68bb      	ldr	r3, [r7, #8]
 800d886:	7c5a      	ldrb	r2, [r3, #17]
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	745a      	strb	r2, [r3, #17]
  }
}
 800d88c:	bf00      	nop
 800d88e:	3714      	adds	r7, #20
 800d890:	46bd      	mov	sp, r7
 800d892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d896:	4770      	bx	lr

0800d898 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b08c      	sub	sp, #48	; 0x30
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	60f8      	str	r0, [r7, #12]
 800d8a0:	60b9      	str	r1, [r7, #8]
 800d8a2:	4613      	mov	r3, r2
 800d8a4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d8ac:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d8b4:	68bb      	ldr	r3, [r7, #8]
 800d8b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800d8c4:	68bb      	ldr	r3, [r7, #8]
 800d8c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800d8c8:	68bb      	ldr	r3, [r7, #8]
 800d8ca:	781a      	ldrb	r2, [r3, #0]
 800d8cc:	6a3b      	ldr	r3, [r7, #32]
 800d8ce:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	785a      	ldrb	r2, [r3, #1]
 800d8d4:	6a3b      	ldr	r3, [r7, #32]
 800d8d6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800d8d8:	68bb      	ldr	r3, [r7, #8]
 800d8da:	3302      	adds	r3, #2
 800d8dc:	781b      	ldrb	r3, [r3, #0]
 800d8de:	b29a      	uxth	r2, r3
 800d8e0:	68bb      	ldr	r3, [r7, #8]
 800d8e2:	3303      	adds	r3, #3
 800d8e4:	781b      	ldrb	r3, [r3, #0]
 800d8e6:	b29b      	uxth	r3, r3
 800d8e8:	021b      	lsls	r3, r3, #8
 800d8ea:	b29b      	uxth	r3, r3
 800d8ec:	4313      	orrs	r3, r2
 800d8ee:	b29b      	uxth	r3, r3
 800d8f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d8f4:	bf28      	it	cs
 800d8f6:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800d8fa:	b29a      	uxth	r2, r3
 800d8fc:	6a3b      	ldr	r3, [r7, #32]
 800d8fe:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800d900:	68bb      	ldr	r3, [r7, #8]
 800d902:	791a      	ldrb	r2, [r3, #4]
 800d904:	6a3b      	ldr	r3, [r7, #32]
 800d906:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	795a      	ldrb	r2, [r3, #5]
 800d90c:	6a3b      	ldr	r3, [r7, #32]
 800d90e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	799a      	ldrb	r2, [r3, #6]
 800d914:	6a3b      	ldr	r3, [r7, #32]
 800d916:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800d918:	68bb      	ldr	r3, [r7, #8]
 800d91a:	79da      	ldrb	r2, [r3, #7]
 800d91c:	6a3b      	ldr	r3, [r7, #32]
 800d91e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800d920:	68bb      	ldr	r3, [r7, #8]
 800d922:	7a1a      	ldrb	r2, [r3, #8]
 800d924:	6a3b      	ldr	r3, [r7, #32]
 800d926:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800d928:	6a3b      	ldr	r3, [r7, #32]
 800d92a:	781b      	ldrb	r3, [r3, #0]
 800d92c:	2b09      	cmp	r3, #9
 800d92e:	d002      	beq.n	800d936 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800d930:	6a3b      	ldr	r3, [r7, #32]
 800d932:	2209      	movs	r2, #9
 800d934:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d936:	88fb      	ldrh	r3, [r7, #6]
 800d938:	2b09      	cmp	r3, #9
 800d93a:	f240 809d 	bls.w	800da78 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800d93e:	2309      	movs	r3, #9
 800d940:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800d942:	2300      	movs	r3, #0
 800d944:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d946:	e081      	b.n	800da4c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d948:	f107 0316 	add.w	r3, r7, #22
 800d94c:	4619      	mov	r1, r3
 800d94e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d950:	f000 f99f 	bl	800dc92 <USBH_GetNextDesc>
 800d954:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800d956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d958:	785b      	ldrb	r3, [r3, #1]
 800d95a:	2b04      	cmp	r3, #4
 800d95c:	d176      	bne.n	800da4c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800d95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d960:	781b      	ldrb	r3, [r3, #0]
 800d962:	2b09      	cmp	r3, #9
 800d964:	d002      	beq.n	800d96c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800d966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d968:	2209      	movs	r2, #9
 800d96a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800d96c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d970:	221a      	movs	r2, #26
 800d972:	fb02 f303 	mul.w	r3, r2, r3
 800d976:	3308      	adds	r3, #8
 800d978:	6a3a      	ldr	r2, [r7, #32]
 800d97a:	4413      	add	r3, r2
 800d97c:	3302      	adds	r3, #2
 800d97e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800d980:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d982:	69f8      	ldr	r0, [r7, #28]
 800d984:	f000 f87e 	bl	800da84 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d988:	2300      	movs	r3, #0
 800d98a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800d98e:	2300      	movs	r3, #0
 800d990:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d992:	e043      	b.n	800da1c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d994:	f107 0316 	add.w	r3, r7, #22
 800d998:	4619      	mov	r1, r3
 800d99a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d99c:	f000 f979 	bl	800dc92 <USBH_GetNextDesc>
 800d9a0:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9a4:	785b      	ldrb	r3, [r3, #1]
 800d9a6:	2b05      	cmp	r3, #5
 800d9a8:	d138      	bne.n	800da1c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800d9aa:	69fb      	ldr	r3, [r7, #28]
 800d9ac:	795b      	ldrb	r3, [r3, #5]
 800d9ae:	2b01      	cmp	r3, #1
 800d9b0:	d10f      	bne.n	800d9d2 <USBH_ParseCfgDesc+0x13a>
 800d9b2:	69fb      	ldr	r3, [r7, #28]
 800d9b4:	799b      	ldrb	r3, [r3, #6]
 800d9b6:	2b02      	cmp	r3, #2
 800d9b8:	d10b      	bne.n	800d9d2 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d9ba:	69fb      	ldr	r3, [r7, #28]
 800d9bc:	79db      	ldrb	r3, [r3, #7]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d10f      	bne.n	800d9e2 <USBH_ParseCfgDesc+0x14a>
 800d9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9c4:	781b      	ldrb	r3, [r3, #0]
 800d9c6:	2b09      	cmp	r3, #9
 800d9c8:	d00b      	beq.n	800d9e2 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800d9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9cc:	2209      	movs	r2, #9
 800d9ce:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d9d0:	e007      	b.n	800d9e2 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800d9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9d4:	781b      	ldrb	r3, [r3, #0]
 800d9d6:	2b07      	cmp	r3, #7
 800d9d8:	d004      	beq.n	800d9e4 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800d9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9dc:	2207      	movs	r2, #7
 800d9de:	701a      	strb	r2, [r3, #0]
 800d9e0:	e000      	b.n	800d9e4 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d9e2:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d9e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9e8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d9ec:	3201      	adds	r2, #1
 800d9ee:	00d2      	lsls	r2, r2, #3
 800d9f0:	211a      	movs	r1, #26
 800d9f2:	fb01 f303 	mul.w	r3, r1, r3
 800d9f6:	4413      	add	r3, r2
 800d9f8:	3308      	adds	r3, #8
 800d9fa:	6a3a      	ldr	r2, [r7, #32]
 800d9fc:	4413      	add	r3, r2
 800d9fe:	3304      	adds	r3, #4
 800da00:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800da02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da04:	69b9      	ldr	r1, [r7, #24]
 800da06:	68f8      	ldr	r0, [r7, #12]
 800da08:	f000 f86b 	bl	800dae2 <USBH_ParseEPDesc>
 800da0c:	4603      	mov	r3, r0
 800da0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800da12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800da16:	3301      	adds	r3, #1
 800da18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800da1c:	69fb      	ldr	r3, [r7, #28]
 800da1e:	791b      	ldrb	r3, [r3, #4]
 800da20:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800da24:	429a      	cmp	r2, r3
 800da26:	d204      	bcs.n	800da32 <USBH_ParseCfgDesc+0x19a>
 800da28:	6a3b      	ldr	r3, [r7, #32]
 800da2a:	885a      	ldrh	r2, [r3, #2]
 800da2c:	8afb      	ldrh	r3, [r7, #22]
 800da2e:	429a      	cmp	r2, r3
 800da30:	d8b0      	bhi.n	800d994 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800da32:	69fb      	ldr	r3, [r7, #28]
 800da34:	791b      	ldrb	r3, [r3, #4]
 800da36:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800da3a:	429a      	cmp	r2, r3
 800da3c:	d201      	bcs.n	800da42 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800da3e:	2303      	movs	r3, #3
 800da40:	e01c      	b.n	800da7c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800da42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da46:	3301      	adds	r3, #1
 800da48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800da4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da50:	2b01      	cmp	r3, #1
 800da52:	d805      	bhi.n	800da60 <USBH_ParseCfgDesc+0x1c8>
 800da54:	6a3b      	ldr	r3, [r7, #32]
 800da56:	885a      	ldrh	r2, [r3, #2]
 800da58:	8afb      	ldrh	r3, [r7, #22]
 800da5a:	429a      	cmp	r2, r3
 800da5c:	f63f af74 	bhi.w	800d948 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800da60:	6a3b      	ldr	r3, [r7, #32]
 800da62:	791b      	ldrb	r3, [r3, #4]
 800da64:	2b02      	cmp	r3, #2
 800da66:	bf28      	it	cs
 800da68:	2302      	movcs	r3, #2
 800da6a:	b2db      	uxtb	r3, r3
 800da6c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800da70:	429a      	cmp	r2, r3
 800da72:	d201      	bcs.n	800da78 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800da74:	2303      	movs	r3, #3
 800da76:	e001      	b.n	800da7c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800da78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800da7c:	4618      	mov	r0, r3
 800da7e:	3730      	adds	r7, #48	; 0x30
 800da80:	46bd      	mov	sp, r7
 800da82:	bd80      	pop	{r7, pc}

0800da84 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800da84:	b480      	push	{r7}
 800da86:	b083      	sub	sp, #12
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
 800da8c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	781a      	ldrb	r2, [r3, #0]
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	785a      	ldrb	r2, [r3, #1]
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	789a      	ldrb	r2, [r3, #2]
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	78da      	ldrb	r2, [r3, #3]
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800daae:	683b      	ldr	r3, [r7, #0]
 800dab0:	791a      	ldrb	r2, [r3, #4]
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	795a      	ldrb	r2, [r3, #5]
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	799a      	ldrb	r2, [r3, #6]
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	79da      	ldrb	r2, [r3, #7]
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	7a1a      	ldrb	r2, [r3, #8]
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	721a      	strb	r2, [r3, #8]
}
 800dad6:	bf00      	nop
 800dad8:	370c      	adds	r7, #12
 800dada:	46bd      	mov	sp, r7
 800dadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae0:	4770      	bx	lr

0800dae2 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800dae2:	b480      	push	{r7}
 800dae4:	b087      	sub	sp, #28
 800dae6:	af00      	add	r7, sp, #0
 800dae8:	60f8      	str	r0, [r7, #12]
 800daea:	60b9      	str	r1, [r7, #8]
 800daec:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800daee:	2300      	movs	r3, #0
 800daf0:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	781a      	ldrb	r2, [r3, #0]
 800daf6:	68bb      	ldr	r3, [r7, #8]
 800daf8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	785a      	ldrb	r2, [r3, #1]
 800dafe:	68bb      	ldr	r3, [r7, #8]
 800db00:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	789a      	ldrb	r2, [r3, #2]
 800db06:	68bb      	ldr	r3, [r7, #8]
 800db08:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	78da      	ldrb	r2, [r3, #3]
 800db0e:	68bb      	ldr	r3, [r7, #8]
 800db10:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	3304      	adds	r3, #4
 800db16:	781b      	ldrb	r3, [r3, #0]
 800db18:	b29a      	uxth	r2, r3
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	3305      	adds	r3, #5
 800db1e:	781b      	ldrb	r3, [r3, #0]
 800db20:	b29b      	uxth	r3, r3
 800db22:	021b      	lsls	r3, r3, #8
 800db24:	b29b      	uxth	r3, r3
 800db26:	4313      	orrs	r3, r2
 800db28:	b29a      	uxth	r2, r3
 800db2a:	68bb      	ldr	r3, [r7, #8]
 800db2c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	799a      	ldrb	r2, [r3, #6]
 800db32:	68bb      	ldr	r3, [r7, #8]
 800db34:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800db36:	68bb      	ldr	r3, [r7, #8]
 800db38:	889b      	ldrh	r3, [r3, #4]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d102      	bne.n	800db44 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800db3e:	2303      	movs	r3, #3
 800db40:	75fb      	strb	r3, [r7, #23]
 800db42:	e033      	b.n	800dbac <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800db44:	68bb      	ldr	r3, [r7, #8]
 800db46:	889b      	ldrh	r3, [r3, #4]
 800db48:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800db4c:	f023 0307 	bic.w	r3, r3, #7
 800db50:	b29a      	uxth	r2, r3
 800db52:	68bb      	ldr	r3, [r7, #8]
 800db54:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800db56:	68bb      	ldr	r3, [r7, #8]
 800db58:	889b      	ldrh	r3, [r3, #4]
 800db5a:	b21a      	sxth	r2, r3
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	3304      	adds	r3, #4
 800db60:	781b      	ldrb	r3, [r3, #0]
 800db62:	b299      	uxth	r1, r3
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	3305      	adds	r3, #5
 800db68:	781b      	ldrb	r3, [r3, #0]
 800db6a:	b29b      	uxth	r3, r3
 800db6c:	021b      	lsls	r3, r3, #8
 800db6e:	b29b      	uxth	r3, r3
 800db70:	430b      	orrs	r3, r1
 800db72:	b29b      	uxth	r3, r3
 800db74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d110      	bne.n	800db9e <USBH_ParseEPDesc+0xbc>
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	3304      	adds	r3, #4
 800db80:	781b      	ldrb	r3, [r3, #0]
 800db82:	b299      	uxth	r1, r3
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	3305      	adds	r3, #5
 800db88:	781b      	ldrb	r3, [r3, #0]
 800db8a:	b29b      	uxth	r3, r3
 800db8c:	021b      	lsls	r3, r3, #8
 800db8e:	b29b      	uxth	r3, r3
 800db90:	430b      	orrs	r3, r1
 800db92:	b29b      	uxth	r3, r3
 800db94:	b21b      	sxth	r3, r3
 800db96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800db9a:	b21b      	sxth	r3, r3
 800db9c:	e001      	b.n	800dba2 <USBH_ParseEPDesc+0xc0>
 800db9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dba2:	4313      	orrs	r3, r2
 800dba4:	b21b      	sxth	r3, r3
 800dba6:	b29a      	uxth	r2, r3
 800dba8:	68bb      	ldr	r3, [r7, #8]
 800dbaa:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d116      	bne.n	800dbe4 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800dbb6:	68bb      	ldr	r3, [r7, #8]
 800dbb8:	78db      	ldrb	r3, [r3, #3]
 800dbba:	f003 0303 	and.w	r3, r3, #3
 800dbbe:	2b01      	cmp	r3, #1
 800dbc0:	d005      	beq.n	800dbce <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	78db      	ldrb	r3, [r3, #3]
 800dbc6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800dbca:	2b03      	cmp	r3, #3
 800dbcc:	d127      	bne.n	800dc1e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	799b      	ldrb	r3, [r3, #6]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d003      	beq.n	800dbde <USBH_ParseEPDesc+0xfc>
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	799b      	ldrb	r3, [r3, #6]
 800dbda:	2b10      	cmp	r3, #16
 800dbdc:	d91f      	bls.n	800dc1e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800dbde:	2303      	movs	r3, #3
 800dbe0:	75fb      	strb	r3, [r7, #23]
 800dbe2:	e01c      	b.n	800dc1e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	78db      	ldrb	r3, [r3, #3]
 800dbe8:	f003 0303 	and.w	r3, r3, #3
 800dbec:	2b01      	cmp	r3, #1
 800dbee:	d10a      	bne.n	800dc06 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800dbf0:	68bb      	ldr	r3, [r7, #8]
 800dbf2:	799b      	ldrb	r3, [r3, #6]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d003      	beq.n	800dc00 <USBH_ParseEPDesc+0x11e>
 800dbf8:	68bb      	ldr	r3, [r7, #8]
 800dbfa:	799b      	ldrb	r3, [r3, #6]
 800dbfc:	2b10      	cmp	r3, #16
 800dbfe:	d90e      	bls.n	800dc1e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800dc00:	2303      	movs	r3, #3
 800dc02:	75fb      	strb	r3, [r7, #23]
 800dc04:	e00b      	b.n	800dc1e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800dc06:	68bb      	ldr	r3, [r7, #8]
 800dc08:	78db      	ldrb	r3, [r3, #3]
 800dc0a:	f003 0303 	and.w	r3, r3, #3
 800dc0e:	2b03      	cmp	r3, #3
 800dc10:	d105      	bne.n	800dc1e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	799b      	ldrb	r3, [r3, #6]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d101      	bne.n	800dc1e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800dc1a:	2303      	movs	r3, #3
 800dc1c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800dc1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc20:	4618      	mov	r0, r3
 800dc22:	371c      	adds	r7, #28
 800dc24:	46bd      	mov	sp, r7
 800dc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2a:	4770      	bx	lr

0800dc2c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b087      	sub	sp, #28
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	60f8      	str	r0, [r7, #12]
 800dc34:	60b9      	str	r1, [r7, #8]
 800dc36:	4613      	mov	r3, r2
 800dc38:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	3301      	adds	r3, #1
 800dc3e:	781b      	ldrb	r3, [r3, #0]
 800dc40:	2b03      	cmp	r3, #3
 800dc42:	d120      	bne.n	800dc86 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	781b      	ldrb	r3, [r3, #0]
 800dc48:	1e9a      	subs	r2, r3, #2
 800dc4a:	88fb      	ldrh	r3, [r7, #6]
 800dc4c:	4293      	cmp	r3, r2
 800dc4e:	bf28      	it	cs
 800dc50:	4613      	movcs	r3, r2
 800dc52:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	3302      	adds	r3, #2
 800dc58:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	82fb      	strh	r3, [r7, #22]
 800dc5e:	e00b      	b.n	800dc78 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800dc60:	8afb      	ldrh	r3, [r7, #22]
 800dc62:	68fa      	ldr	r2, [r7, #12]
 800dc64:	4413      	add	r3, r2
 800dc66:	781a      	ldrb	r2, [r3, #0]
 800dc68:	68bb      	ldr	r3, [r7, #8]
 800dc6a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	3301      	adds	r3, #1
 800dc70:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800dc72:	8afb      	ldrh	r3, [r7, #22]
 800dc74:	3302      	adds	r3, #2
 800dc76:	82fb      	strh	r3, [r7, #22]
 800dc78:	8afa      	ldrh	r2, [r7, #22]
 800dc7a:	8abb      	ldrh	r3, [r7, #20]
 800dc7c:	429a      	cmp	r2, r3
 800dc7e:	d3ef      	bcc.n	800dc60 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800dc80:	68bb      	ldr	r3, [r7, #8]
 800dc82:	2200      	movs	r2, #0
 800dc84:	701a      	strb	r2, [r3, #0]
  }
}
 800dc86:	bf00      	nop
 800dc88:	371c      	adds	r7, #28
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc90:	4770      	bx	lr

0800dc92 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800dc92:	b480      	push	{r7}
 800dc94:	b085      	sub	sp, #20
 800dc96:	af00      	add	r7, sp, #0
 800dc98:	6078      	str	r0, [r7, #4]
 800dc9a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	881a      	ldrh	r2, [r3, #0]
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	781b      	ldrb	r3, [r3, #0]
 800dca4:	b29b      	uxth	r3, r3
 800dca6:	4413      	add	r3, r2
 800dca8:	b29a      	uxth	r2, r3
 800dcaa:	683b      	ldr	r3, [r7, #0]
 800dcac:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	781b      	ldrb	r3, [r3, #0]
 800dcb2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	4413      	add	r3, r2
 800dcb8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800dcba:	68fb      	ldr	r3, [r7, #12]
}
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	3714      	adds	r7, #20
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc6:	4770      	bx	lr

0800dcc8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b086      	sub	sp, #24
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	60f8      	str	r0, [r7, #12]
 800dcd0:	60b9      	str	r1, [r7, #8]
 800dcd2:	4613      	mov	r3, r2
 800dcd4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800dcd6:	2301      	movs	r3, #1
 800dcd8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	789b      	ldrb	r3, [r3, #2]
 800dcde:	2b01      	cmp	r3, #1
 800dce0:	d002      	beq.n	800dce8 <USBH_CtlReq+0x20>
 800dce2:	2b02      	cmp	r3, #2
 800dce4:	d01d      	beq.n	800dd22 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800dce6:	e043      	b.n	800dd70 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	68ba      	ldr	r2, [r7, #8]
 800dcec:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	88fa      	ldrh	r2, [r7, #6]
 800dcf2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	2201      	movs	r2, #1
 800dcf8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	2202      	movs	r2, #2
 800dcfe:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800dd00:	2301      	movs	r3, #1
 800dd02:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	2203      	movs	r2, #3
 800dd08:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800dd18:	2200      	movs	r2, #0
 800dd1a:	4619      	mov	r1, r3
 800dd1c:	f000 fc3e 	bl	800e59c <osMessagePut>
      break;
 800dd20:	e026      	b.n	800dd70 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800dd22:	68f8      	ldr	r0, [r7, #12]
 800dd24:	f000 f82a 	bl	800dd7c <USBH_HandleControl>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800dd2c:	7dfb      	ldrb	r3, [r7, #23]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d002      	beq.n	800dd38 <USBH_CtlReq+0x70>
 800dd32:	7dfb      	ldrb	r3, [r7, #23]
 800dd34:	2b03      	cmp	r3, #3
 800dd36:	d106      	bne.n	800dd46 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	2201      	movs	r2, #1
 800dd3c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	2200      	movs	r2, #0
 800dd42:	761a      	strb	r2, [r3, #24]
 800dd44:	e005      	b.n	800dd52 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800dd46:	7dfb      	ldrb	r3, [r7, #23]
 800dd48:	2b02      	cmp	r3, #2
 800dd4a:	d102      	bne.n	800dd52 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	2201      	movs	r2, #1
 800dd50:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	2203      	movs	r2, #3
 800dd56:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800dd66:	2200      	movs	r2, #0
 800dd68:	4619      	mov	r1, r3
 800dd6a:	f000 fc17 	bl	800e59c <osMessagePut>
      break;
 800dd6e:	bf00      	nop
  }
  return status;
 800dd70:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd72:	4618      	mov	r0, r3
 800dd74:	3718      	adds	r7, #24
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}
	...

0800dd7c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b086      	sub	sp, #24
 800dd80:	af02      	add	r7, sp, #8
 800dd82:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800dd84:	2301      	movs	r3, #1
 800dd86:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	7e1b      	ldrb	r3, [r3, #24]
 800dd90:	3b01      	subs	r3, #1
 800dd92:	2b0a      	cmp	r3, #10
 800dd94:	f200 8229 	bhi.w	800e1ea <USBH_HandleControl+0x46e>
 800dd98:	a201      	add	r2, pc, #4	; (adr r2, 800dda0 <USBH_HandleControl+0x24>)
 800dd9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd9e:	bf00      	nop
 800dda0:	0800ddcd 	.word	0x0800ddcd
 800dda4:	0800dde7 	.word	0x0800dde7
 800dda8:	0800de89 	.word	0x0800de89
 800ddac:	0800deaf 	.word	0x0800deaf
 800ddb0:	0800df3b 	.word	0x0800df3b
 800ddb4:	0800df65 	.word	0x0800df65
 800ddb8:	0800e027 	.word	0x0800e027
 800ddbc:	0800e049 	.word	0x0800e049
 800ddc0:	0800e0db 	.word	0x0800e0db
 800ddc4:	0800e101 	.word	0x0800e101
 800ddc8:	0800e193 	.word	0x0800e193
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	f103 0110 	add.w	r1, r3, #16
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	795b      	ldrb	r3, [r3, #5]
 800ddd6:	461a      	mov	r2, r3
 800ddd8:	6878      	ldr	r0, [r7, #4]
 800ddda:	f000 fa17 	bl	800e20c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	2202      	movs	r2, #2
 800dde2:	761a      	strb	r2, [r3, #24]
      break;
 800dde4:	e20c      	b.n	800e200 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	795b      	ldrb	r3, [r3, #5]
 800ddea:	4619      	mov	r1, r3
 800ddec:	6878      	ldr	r0, [r7, #4]
 800ddee:	f003 fcd7 	bl	80117a0 <USBH_LL_GetURBState>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ddf6:	7bbb      	ldrb	r3, [r7, #14]
 800ddf8:	2b01      	cmp	r3, #1
 800ddfa:	d12c      	bne.n	800de56 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	7c1b      	ldrb	r3, [r3, #16]
 800de00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800de04:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	8adb      	ldrh	r3, [r3, #22]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d00a      	beq.n	800de24 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800de0e:	7b7b      	ldrb	r3, [r7, #13]
 800de10:	2b80      	cmp	r3, #128	; 0x80
 800de12:	d103      	bne.n	800de1c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2203      	movs	r2, #3
 800de18:	761a      	strb	r2, [r3, #24]
 800de1a:	e00d      	b.n	800de38 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2205      	movs	r2, #5
 800de20:	761a      	strb	r2, [r3, #24]
 800de22:	e009      	b.n	800de38 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800de24:	7b7b      	ldrb	r3, [r7, #13]
 800de26:	2b80      	cmp	r3, #128	; 0x80
 800de28:	d103      	bne.n	800de32 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	2209      	movs	r2, #9
 800de2e:	761a      	strb	r2, [r3, #24]
 800de30:	e002      	b.n	800de38 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2207      	movs	r2, #7
 800de36:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2203      	movs	r2, #3
 800de3c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800de4c:	2200      	movs	r2, #0
 800de4e:	4619      	mov	r1, r3
 800de50:	f000 fba4 	bl	800e59c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800de54:	e1cb      	b.n	800e1ee <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800de56:	7bbb      	ldrb	r3, [r7, #14]
 800de58:	2b04      	cmp	r3, #4
 800de5a:	d003      	beq.n	800de64 <USBH_HandleControl+0xe8>
 800de5c:	7bbb      	ldrb	r3, [r7, #14]
 800de5e:	2b02      	cmp	r3, #2
 800de60:	f040 81c5 	bne.w	800e1ee <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	220b      	movs	r2, #11
 800de68:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	2203      	movs	r2, #3
 800de6e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800de7e:	2200      	movs	r2, #0
 800de80:	4619      	mov	r1, r3
 800de82:	f000 fb8b 	bl	800e59c <osMessagePut>
      break;
 800de86:	e1b2      	b.n	800e1ee <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800de8e:	b29a      	uxth	r2, r3
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	6899      	ldr	r1, [r3, #8]
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	899a      	ldrh	r2, [r3, #12]
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	791b      	ldrb	r3, [r3, #4]
 800dea0:	6878      	ldr	r0, [r7, #4]
 800dea2:	f000 f9f2 	bl	800e28a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	2204      	movs	r2, #4
 800deaa:	761a      	strb	r2, [r3, #24]
      break;
 800deac:	e1a8      	b.n	800e200 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	791b      	ldrb	r3, [r3, #4]
 800deb2:	4619      	mov	r1, r3
 800deb4:	6878      	ldr	r0, [r7, #4]
 800deb6:	f003 fc73 	bl	80117a0 <USBH_LL_GetURBState>
 800deba:	4603      	mov	r3, r0
 800debc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800debe:	7bbb      	ldrb	r3, [r7, #14]
 800dec0:	2b01      	cmp	r3, #1
 800dec2:	d110      	bne.n	800dee6 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2209      	movs	r2, #9
 800dec8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	2203      	movs	r2, #3
 800dece:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800dede:	2200      	movs	r2, #0
 800dee0:	4619      	mov	r1, r3
 800dee2:	f000 fb5b 	bl	800e59c <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800dee6:	7bbb      	ldrb	r3, [r7, #14]
 800dee8:	2b05      	cmp	r3, #5
 800deea:	d110      	bne.n	800df0e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800deec:	2303      	movs	r3, #3
 800deee:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2203      	movs	r2, #3
 800def4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800df04:	2200      	movs	r2, #0
 800df06:	4619      	mov	r1, r3
 800df08:	f000 fb48 	bl	800e59c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800df0c:	e171      	b.n	800e1f2 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800df0e:	7bbb      	ldrb	r3, [r7, #14]
 800df10:	2b04      	cmp	r3, #4
 800df12:	f040 816e 	bne.w	800e1f2 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	220b      	movs	r2, #11
 800df1a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2203      	movs	r2, #3
 800df20:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800df30:	2200      	movs	r2, #0
 800df32:	4619      	mov	r1, r3
 800df34:	f000 fb32 	bl	800e59c <osMessagePut>
      break;
 800df38:	e15b      	b.n	800e1f2 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	6899      	ldr	r1, [r3, #8]
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	899a      	ldrh	r2, [r3, #12]
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	795b      	ldrb	r3, [r3, #5]
 800df46:	2001      	movs	r0, #1
 800df48:	9000      	str	r0, [sp, #0]
 800df4a:	6878      	ldr	r0, [r7, #4]
 800df4c:	f000 f978 	bl	800e240 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800df56:	b29a      	uxth	r2, r3
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	2206      	movs	r2, #6
 800df60:	761a      	strb	r2, [r3, #24]
      break;
 800df62:	e14d      	b.n	800e200 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	795b      	ldrb	r3, [r3, #5]
 800df68:	4619      	mov	r1, r3
 800df6a:	6878      	ldr	r0, [r7, #4]
 800df6c:	f003 fc18 	bl	80117a0 <USBH_LL_GetURBState>
 800df70:	4603      	mov	r3, r0
 800df72:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800df74:	7bbb      	ldrb	r3, [r7, #14]
 800df76:	2b01      	cmp	r3, #1
 800df78:	d111      	bne.n	800df9e <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	2207      	movs	r2, #7
 800df7e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2203      	movs	r2, #3
 800df84:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800df94:	2200      	movs	r2, #0
 800df96:	4619      	mov	r1, r3
 800df98:	f000 fb00 	bl	800e59c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800df9c:	e12b      	b.n	800e1f6 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800df9e:	7bbb      	ldrb	r3, [r7, #14]
 800dfa0:	2b05      	cmp	r3, #5
 800dfa2:	d113      	bne.n	800dfcc <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	220c      	movs	r2, #12
 800dfa8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800dfaa:	2303      	movs	r3, #3
 800dfac:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	2203      	movs	r2, #3
 800dfb2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	4619      	mov	r1, r3
 800dfc6:	f000 fae9 	bl	800e59c <osMessagePut>
      break;
 800dfca:	e114      	b.n	800e1f6 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800dfcc:	7bbb      	ldrb	r3, [r7, #14]
 800dfce:	2b02      	cmp	r3, #2
 800dfd0:	d111      	bne.n	800dff6 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	2205      	movs	r2, #5
 800dfd6:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	2203      	movs	r2, #3
 800dfdc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800dfec:	2200      	movs	r2, #0
 800dfee:	4619      	mov	r1, r3
 800dff0:	f000 fad4 	bl	800e59c <osMessagePut>
      break;
 800dff4:	e0ff      	b.n	800e1f6 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800dff6:	7bbb      	ldrb	r3, [r7, #14]
 800dff8:	2b04      	cmp	r3, #4
 800dffa:	f040 80fc 	bne.w	800e1f6 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	220b      	movs	r2, #11
 800e002:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800e004:	2302      	movs	r3, #2
 800e006:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2203      	movs	r2, #3
 800e00c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e01c:	2200      	movs	r2, #0
 800e01e:	4619      	mov	r1, r3
 800e020:	f000 fabc 	bl	800e59c <osMessagePut>
      break;
 800e024:	e0e7      	b.n	800e1f6 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	791b      	ldrb	r3, [r3, #4]
 800e02a:	2200      	movs	r2, #0
 800e02c:	2100      	movs	r1, #0
 800e02e:	6878      	ldr	r0, [r7, #4]
 800e030:	f000 f92b 	bl	800e28a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e03a:	b29a      	uxth	r2, r3
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	2208      	movs	r2, #8
 800e044:	761a      	strb	r2, [r3, #24]

      break;
 800e046:	e0db      	b.n	800e200 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	791b      	ldrb	r3, [r3, #4]
 800e04c:	4619      	mov	r1, r3
 800e04e:	6878      	ldr	r0, [r7, #4]
 800e050:	f003 fba6 	bl	80117a0 <USBH_LL_GetURBState>
 800e054:	4603      	mov	r3, r0
 800e056:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e058:	7bbb      	ldrb	r3, [r7, #14]
 800e05a:	2b01      	cmp	r3, #1
 800e05c:	d113      	bne.n	800e086 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	220d      	movs	r2, #13
 800e062:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800e064:	2300      	movs	r3, #0
 800e066:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2203      	movs	r2, #3
 800e06c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e07c:	2200      	movs	r2, #0
 800e07e:	4619      	mov	r1, r3
 800e080:	f000 fa8c 	bl	800e59c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e084:	e0b9      	b.n	800e1fa <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800e086:	7bbb      	ldrb	r3, [r7, #14]
 800e088:	2b04      	cmp	r3, #4
 800e08a:	d111      	bne.n	800e0b0 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	220b      	movs	r2, #11
 800e090:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2203      	movs	r2, #3
 800e096:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	4619      	mov	r1, r3
 800e0aa:	f000 fa77 	bl	800e59c <osMessagePut>
      break;
 800e0ae:	e0a4      	b.n	800e1fa <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800e0b0:	7bbb      	ldrb	r3, [r7, #14]
 800e0b2:	2b05      	cmp	r3, #5
 800e0b4:	f040 80a1 	bne.w	800e1fa <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800e0b8:	2303      	movs	r3, #3
 800e0ba:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	2203      	movs	r2, #3
 800e0c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	4619      	mov	r1, r3
 800e0d4:	f000 fa62 	bl	800e59c <osMessagePut>
      break;
 800e0d8:	e08f      	b.n	800e1fa <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	795b      	ldrb	r3, [r3, #5]
 800e0de:	2201      	movs	r2, #1
 800e0e0:	9200      	str	r2, [sp, #0]
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	2100      	movs	r1, #0
 800e0e6:	6878      	ldr	r0, [r7, #4]
 800e0e8:	f000 f8aa 	bl	800e240 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e0f2:	b29a      	uxth	r2, r3
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	220a      	movs	r2, #10
 800e0fc:	761a      	strb	r2, [r3, #24]
      break;
 800e0fe:	e07f      	b.n	800e200 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	795b      	ldrb	r3, [r3, #5]
 800e104:	4619      	mov	r1, r3
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	f003 fb4a 	bl	80117a0 <USBH_LL_GetURBState>
 800e10c:	4603      	mov	r3, r0
 800e10e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800e110:	7bbb      	ldrb	r3, [r7, #14]
 800e112:	2b01      	cmp	r3, #1
 800e114:	d113      	bne.n	800e13e <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800e116:	2300      	movs	r3, #0
 800e118:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	220d      	movs	r2, #13
 800e11e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2203      	movs	r2, #3
 800e124:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e134:	2200      	movs	r2, #0
 800e136:	4619      	mov	r1, r3
 800e138:	f000 fa30 	bl	800e59c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e13c:	e05f      	b.n	800e1fe <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e13e:	7bbb      	ldrb	r3, [r7, #14]
 800e140:	2b02      	cmp	r3, #2
 800e142:	d111      	bne.n	800e168 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2209      	movs	r2, #9
 800e148:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	2203      	movs	r2, #3
 800e14e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e15e:	2200      	movs	r2, #0
 800e160:	4619      	mov	r1, r3
 800e162:	f000 fa1b 	bl	800e59c <osMessagePut>
      break;
 800e166:	e04a      	b.n	800e1fe <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800e168:	7bbb      	ldrb	r3, [r7, #14]
 800e16a:	2b04      	cmp	r3, #4
 800e16c:	d147      	bne.n	800e1fe <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	220b      	movs	r2, #11
 800e172:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	2203      	movs	r2, #3
 800e178:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e188:	2200      	movs	r2, #0
 800e18a:	4619      	mov	r1, r3
 800e18c:	f000 fa06 	bl	800e59c <osMessagePut>
      break;
 800e190:	e035      	b.n	800e1fe <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	7e5b      	ldrb	r3, [r3, #25]
 800e196:	3301      	adds	r3, #1
 800e198:	b2da      	uxtb	r2, r3
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	765a      	strb	r2, [r3, #25]
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	7e5b      	ldrb	r3, [r3, #25]
 800e1a2:	2b02      	cmp	r3, #2
 800e1a4:	d806      	bhi.n	800e1b4 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	2201      	movs	r2, #1
 800e1aa:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	2201      	movs	r2, #1
 800e1b0:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800e1b2:	e025      	b.n	800e200 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e1ba:	2106      	movs	r1, #6
 800e1bc:	6878      	ldr	r0, [r7, #4]
 800e1be:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	795b      	ldrb	r3, [r3, #5]
 800e1ca:	4619      	mov	r1, r3
 800e1cc:	6878      	ldr	r0, [r7, #4]
 800e1ce:	f000 f8e9 	bl	800e3a4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	791b      	ldrb	r3, [r3, #4]
 800e1d6:	4619      	mov	r1, r3
 800e1d8:	6878      	ldr	r0, [r7, #4]
 800e1da:	f000 f8e3 	bl	800e3a4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800e1e4:	2302      	movs	r3, #2
 800e1e6:	73fb      	strb	r3, [r7, #15]
      break;
 800e1e8:	e00a      	b.n	800e200 <USBH_HandleControl+0x484>

    default:
      break;
 800e1ea:	bf00      	nop
 800e1ec:	e008      	b.n	800e200 <USBH_HandleControl+0x484>
      break;
 800e1ee:	bf00      	nop
 800e1f0:	e006      	b.n	800e200 <USBH_HandleControl+0x484>
      break;
 800e1f2:	bf00      	nop
 800e1f4:	e004      	b.n	800e200 <USBH_HandleControl+0x484>
      break;
 800e1f6:	bf00      	nop
 800e1f8:	e002      	b.n	800e200 <USBH_HandleControl+0x484>
      break;
 800e1fa:	bf00      	nop
 800e1fc:	e000      	b.n	800e200 <USBH_HandleControl+0x484>
      break;
 800e1fe:	bf00      	nop
  }

  return status;
 800e200:	7bfb      	ldrb	r3, [r7, #15]
}
 800e202:	4618      	mov	r0, r3
 800e204:	3710      	adds	r7, #16
 800e206:	46bd      	mov	sp, r7
 800e208:	bd80      	pop	{r7, pc}
 800e20a:	bf00      	nop

0800e20c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b088      	sub	sp, #32
 800e210:	af04      	add	r7, sp, #16
 800e212:	60f8      	str	r0, [r7, #12]
 800e214:	60b9      	str	r1, [r7, #8]
 800e216:	4613      	mov	r3, r2
 800e218:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e21a:	79f9      	ldrb	r1, [r7, #7]
 800e21c:	2300      	movs	r3, #0
 800e21e:	9303      	str	r3, [sp, #12]
 800e220:	2308      	movs	r3, #8
 800e222:	9302      	str	r3, [sp, #8]
 800e224:	68bb      	ldr	r3, [r7, #8]
 800e226:	9301      	str	r3, [sp, #4]
 800e228:	2300      	movs	r3, #0
 800e22a:	9300      	str	r3, [sp, #0]
 800e22c:	2300      	movs	r3, #0
 800e22e:	2200      	movs	r2, #0
 800e230:	68f8      	ldr	r0, [r7, #12]
 800e232:	f003 fa84 	bl	801173e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800e236:	2300      	movs	r3, #0
}
 800e238:	4618      	mov	r0, r3
 800e23a:	3710      	adds	r7, #16
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd80      	pop	{r7, pc}

0800e240 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b088      	sub	sp, #32
 800e244:	af04      	add	r7, sp, #16
 800e246:	60f8      	str	r0, [r7, #12]
 800e248:	60b9      	str	r1, [r7, #8]
 800e24a:	4611      	mov	r1, r2
 800e24c:	461a      	mov	r2, r3
 800e24e:	460b      	mov	r3, r1
 800e250:	80fb      	strh	r3, [r7, #6]
 800e252:	4613      	mov	r3, r2
 800e254:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d001      	beq.n	800e264 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800e260:	2300      	movs	r3, #0
 800e262:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e264:	7979      	ldrb	r1, [r7, #5]
 800e266:	7e3b      	ldrb	r3, [r7, #24]
 800e268:	9303      	str	r3, [sp, #12]
 800e26a:	88fb      	ldrh	r3, [r7, #6]
 800e26c:	9302      	str	r3, [sp, #8]
 800e26e:	68bb      	ldr	r3, [r7, #8]
 800e270:	9301      	str	r3, [sp, #4]
 800e272:	2301      	movs	r3, #1
 800e274:	9300      	str	r3, [sp, #0]
 800e276:	2300      	movs	r3, #0
 800e278:	2200      	movs	r2, #0
 800e27a:	68f8      	ldr	r0, [r7, #12]
 800e27c:	f003 fa5f 	bl	801173e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e280:	2300      	movs	r3, #0
}
 800e282:	4618      	mov	r0, r3
 800e284:	3710      	adds	r7, #16
 800e286:	46bd      	mov	sp, r7
 800e288:	bd80      	pop	{r7, pc}

0800e28a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800e28a:	b580      	push	{r7, lr}
 800e28c:	b088      	sub	sp, #32
 800e28e:	af04      	add	r7, sp, #16
 800e290:	60f8      	str	r0, [r7, #12]
 800e292:	60b9      	str	r1, [r7, #8]
 800e294:	4611      	mov	r1, r2
 800e296:	461a      	mov	r2, r3
 800e298:	460b      	mov	r3, r1
 800e29a:	80fb      	strh	r3, [r7, #6]
 800e29c:	4613      	mov	r3, r2
 800e29e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e2a0:	7979      	ldrb	r1, [r7, #5]
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	9303      	str	r3, [sp, #12]
 800e2a6:	88fb      	ldrh	r3, [r7, #6]
 800e2a8:	9302      	str	r3, [sp, #8]
 800e2aa:	68bb      	ldr	r3, [r7, #8]
 800e2ac:	9301      	str	r3, [sp, #4]
 800e2ae:	2301      	movs	r3, #1
 800e2b0:	9300      	str	r3, [sp, #0]
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	2201      	movs	r2, #1
 800e2b6:	68f8      	ldr	r0, [r7, #12]
 800e2b8:	f003 fa41 	bl	801173e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e2bc:	2300      	movs	r3, #0

}
 800e2be:	4618      	mov	r0, r3
 800e2c0:	3710      	adds	r7, #16
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bd80      	pop	{r7, pc}

0800e2c6 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 800e2c6:	b580      	push	{r7, lr}
 800e2c8:	b088      	sub	sp, #32
 800e2ca:	af04      	add	r7, sp, #16
 800e2cc:	60f8      	str	r0, [r7, #12]
 800e2ce:	60b9      	str	r1, [r7, #8]
 800e2d0:	4611      	mov	r1, r2
 800e2d2:	461a      	mov	r2, r3
 800e2d4:	460b      	mov	r3, r1
 800e2d6:	71fb      	strb	r3, [r7, #7]
 800e2d8:	4613      	mov	r3, r2
 800e2da:	71bb      	strb	r3, [r7, #6]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e2dc:	79fb      	ldrb	r3, [r7, #7]
 800e2de:	b29b      	uxth	r3, r3
 800e2e0:	79b9      	ldrb	r1, [r7, #6]
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	9203      	str	r2, [sp, #12]
 800e2e6:	9302      	str	r3, [sp, #8]
 800e2e8:	68bb      	ldr	r3, [r7, #8]
 800e2ea:	9301      	str	r3, [sp, #4]
 800e2ec:	2301      	movs	r3, #1
 800e2ee:	9300      	str	r3, [sp, #0]
 800e2f0:	2303      	movs	r3, #3
 800e2f2:	2201      	movs	r2, #1
 800e2f4:	68f8      	ldr	r0, [r7, #12]
 800e2f6:	f003 fa22 	bl	801173e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 800e2fa:	2300      	movs	r3, #0
}
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	3710      	adds	r7, #16
 800e300:	46bd      	mov	sp, r7
 800e302:	bd80      	pop	{r7, pc}

0800e304 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b086      	sub	sp, #24
 800e308:	af04      	add	r7, sp, #16
 800e30a:	6078      	str	r0, [r7, #4]
 800e30c:	4608      	mov	r0, r1
 800e30e:	4611      	mov	r1, r2
 800e310:	461a      	mov	r2, r3
 800e312:	4603      	mov	r3, r0
 800e314:	70fb      	strb	r3, [r7, #3]
 800e316:	460b      	mov	r3, r1
 800e318:	70bb      	strb	r3, [r7, #2]
 800e31a:	4613      	mov	r3, r2
 800e31c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800e31e:	7878      	ldrb	r0, [r7, #1]
 800e320:	78ba      	ldrb	r2, [r7, #2]
 800e322:	78f9      	ldrb	r1, [r7, #3]
 800e324:	8b3b      	ldrh	r3, [r7, #24]
 800e326:	9302      	str	r3, [sp, #8]
 800e328:	7d3b      	ldrb	r3, [r7, #20]
 800e32a:	9301      	str	r3, [sp, #4]
 800e32c:	7c3b      	ldrb	r3, [r7, #16]
 800e32e:	9300      	str	r3, [sp, #0]
 800e330:	4603      	mov	r3, r0
 800e332:	6878      	ldr	r0, [r7, #4]
 800e334:	f003 f9b5 	bl	80116a2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800e338:	2300      	movs	r3, #0
}
 800e33a:	4618      	mov	r0, r3
 800e33c:	3708      	adds	r7, #8
 800e33e:	46bd      	mov	sp, r7
 800e340:	bd80      	pop	{r7, pc}

0800e342 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800e342:	b580      	push	{r7, lr}
 800e344:	b082      	sub	sp, #8
 800e346:	af00      	add	r7, sp, #0
 800e348:	6078      	str	r0, [r7, #4]
 800e34a:	460b      	mov	r3, r1
 800e34c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800e34e:	78fb      	ldrb	r3, [r7, #3]
 800e350:	4619      	mov	r1, r3
 800e352:	6878      	ldr	r0, [r7, #4]
 800e354:	f003 f9d4 	bl	8011700 <USBH_LL_ClosePipe>

  return USBH_OK;
 800e358:	2300      	movs	r3, #0
}
 800e35a:	4618      	mov	r0, r3
 800e35c:	3708      	adds	r7, #8
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd80      	pop	{r7, pc}

0800e362 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e362:	b580      	push	{r7, lr}
 800e364:	b084      	sub	sp, #16
 800e366:	af00      	add	r7, sp, #0
 800e368:	6078      	str	r0, [r7, #4]
 800e36a:	460b      	mov	r3, r1
 800e36c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f000 f836 	bl	800e3e0 <USBH_GetFreePipe>
 800e374:	4603      	mov	r3, r0
 800e376:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e378:	89fb      	ldrh	r3, [r7, #14]
 800e37a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e37e:	4293      	cmp	r3, r2
 800e380:	d00a      	beq.n	800e398 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800e382:	78fa      	ldrb	r2, [r7, #3]
 800e384:	89fb      	ldrh	r3, [r7, #14]
 800e386:	f003 030f 	and.w	r3, r3, #15
 800e38a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e38e:	6879      	ldr	r1, [r7, #4]
 800e390:	33e0      	adds	r3, #224	; 0xe0
 800e392:	009b      	lsls	r3, r3, #2
 800e394:	440b      	add	r3, r1
 800e396:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800e398:	89fb      	ldrh	r3, [r7, #14]
 800e39a:	b2db      	uxtb	r3, r3
}
 800e39c:	4618      	mov	r0, r3
 800e39e:	3710      	adds	r7, #16
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}

0800e3a4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e3a4:	b480      	push	{r7}
 800e3a6:	b083      	sub	sp, #12
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
 800e3ac:	460b      	mov	r3, r1
 800e3ae:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800e3b0:	78fb      	ldrb	r3, [r7, #3]
 800e3b2:	2b0f      	cmp	r3, #15
 800e3b4:	d80d      	bhi.n	800e3d2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800e3b6:	78fb      	ldrb	r3, [r7, #3]
 800e3b8:	687a      	ldr	r2, [r7, #4]
 800e3ba:	33e0      	adds	r3, #224	; 0xe0
 800e3bc:	009b      	lsls	r3, r3, #2
 800e3be:	4413      	add	r3, r2
 800e3c0:	685a      	ldr	r2, [r3, #4]
 800e3c2:	78fb      	ldrb	r3, [r7, #3]
 800e3c4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800e3c8:	6879      	ldr	r1, [r7, #4]
 800e3ca:	33e0      	adds	r3, #224	; 0xe0
 800e3cc:	009b      	lsls	r3, r3, #2
 800e3ce:	440b      	add	r3, r1
 800e3d0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800e3d2:	2300      	movs	r3, #0
}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	370c      	adds	r7, #12
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3de:	4770      	bx	lr

0800e3e0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800e3e0:	b480      	push	{r7}
 800e3e2:	b085      	sub	sp, #20
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	73fb      	strb	r3, [r7, #15]
 800e3f0:	e00f      	b.n	800e412 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e3f2:	7bfb      	ldrb	r3, [r7, #15]
 800e3f4:	687a      	ldr	r2, [r7, #4]
 800e3f6:	33e0      	adds	r3, #224	; 0xe0
 800e3f8:	009b      	lsls	r3, r3, #2
 800e3fa:	4413      	add	r3, r2
 800e3fc:	685b      	ldr	r3, [r3, #4]
 800e3fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e402:	2b00      	cmp	r3, #0
 800e404:	d102      	bne.n	800e40c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800e406:	7bfb      	ldrb	r3, [r7, #15]
 800e408:	b29b      	uxth	r3, r3
 800e40a:	e007      	b.n	800e41c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800e40c:	7bfb      	ldrb	r3, [r7, #15]
 800e40e:	3301      	adds	r3, #1
 800e410:	73fb      	strb	r3, [r7, #15]
 800e412:	7bfb      	ldrb	r3, [r7, #15]
 800e414:	2b0f      	cmp	r3, #15
 800e416:	d9ec      	bls.n	800e3f2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800e418:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800e41c:	4618      	mov	r0, r3
 800e41e:	3714      	adds	r7, #20
 800e420:	46bd      	mov	sp, r7
 800e422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e426:	4770      	bx	lr

0800e428 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800e428:	b480      	push	{r7}
 800e42a:	b085      	sub	sp, #20
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	4603      	mov	r3, r0
 800e430:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800e432:	2300      	movs	r3, #0
 800e434:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800e436:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e43a:	2b84      	cmp	r3, #132	; 0x84
 800e43c:	d005      	beq.n	800e44a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800e43e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	4413      	add	r3, r2
 800e446:	3303      	adds	r3, #3
 800e448:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800e44a:	68fb      	ldr	r3, [r7, #12]
}
 800e44c:	4618      	mov	r0, r3
 800e44e:	3714      	adds	r7, #20
 800e450:	46bd      	mov	sp, r7
 800e452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e456:	4770      	bx	lr

0800e458 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800e458:	b480      	push	{r7}
 800e45a:	b083      	sub	sp, #12
 800e45c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e45e:	f3ef 8305 	mrs	r3, IPSR
 800e462:	607b      	str	r3, [r7, #4]
  return(result);
 800e464:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800e466:	2b00      	cmp	r3, #0
 800e468:	bf14      	ite	ne
 800e46a:	2301      	movne	r3, #1
 800e46c:	2300      	moveq	r3, #0
 800e46e:	b2db      	uxtb	r3, r3
}
 800e470:	4618      	mov	r0, r3
 800e472:	370c      	adds	r7, #12
 800e474:	46bd      	mov	sp, r7
 800e476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47a:	4770      	bx	lr

0800e47c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800e480:	f001 f932 	bl	800f6e8 <vTaskStartScheduler>
  
  return osOK;
 800e484:	2300      	movs	r3, #0
}
 800e486:	4618      	mov	r0, r3
 800e488:	bd80      	pop	{r7, pc}

0800e48a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800e48a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e48c:	b089      	sub	sp, #36	; 0x24
 800e48e:	af04      	add	r7, sp, #16
 800e490:	6078      	str	r0, [r7, #4]
 800e492:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	695b      	ldr	r3, [r3, #20]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d020      	beq.n	800e4de <osThreadCreate+0x54>
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	699b      	ldr	r3, [r3, #24]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d01c      	beq.n	800e4de <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	685c      	ldr	r4, [r3, #4]
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681d      	ldr	r5, [r3, #0]
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	691e      	ldr	r6, [r3, #16]
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	f7ff ffb6 	bl	800e428 <makeFreeRtosPriority>
 800e4bc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	695b      	ldr	r3, [r3, #20]
 800e4c2:	687a      	ldr	r2, [r7, #4]
 800e4c4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e4c6:	9202      	str	r2, [sp, #8]
 800e4c8:	9301      	str	r3, [sp, #4]
 800e4ca:	9100      	str	r1, [sp, #0]
 800e4cc:	683b      	ldr	r3, [r7, #0]
 800e4ce:	4632      	mov	r2, r6
 800e4d0:	4629      	mov	r1, r5
 800e4d2:	4620      	mov	r0, r4
 800e4d4:	f000 ff40 	bl	800f358 <xTaskCreateStatic>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	60fb      	str	r3, [r7, #12]
 800e4dc:	e01c      	b.n	800e518 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	685c      	ldr	r4, [r3, #4]
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e4ea:	b29e      	uxth	r6, r3
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	f7ff ff98 	bl	800e428 <makeFreeRtosPriority>
 800e4f8:	4602      	mov	r2, r0
 800e4fa:	f107 030c 	add.w	r3, r7, #12
 800e4fe:	9301      	str	r3, [sp, #4]
 800e500:	9200      	str	r2, [sp, #0]
 800e502:	683b      	ldr	r3, [r7, #0]
 800e504:	4632      	mov	r2, r6
 800e506:	4629      	mov	r1, r5
 800e508:	4620      	mov	r0, r4
 800e50a:	f000 ff82 	bl	800f412 <xTaskCreate>
 800e50e:	4603      	mov	r3, r0
 800e510:	2b01      	cmp	r3, #1
 800e512:	d001      	beq.n	800e518 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800e514:	2300      	movs	r3, #0
 800e516:	e000      	b.n	800e51a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800e518:	68fb      	ldr	r3, [r7, #12]
}
 800e51a:	4618      	mov	r0, r3
 800e51c:	3714      	adds	r7, #20
 800e51e:	46bd      	mov	sp, r7
 800e520:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e522 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e522:	b580      	push	{r7, lr}
 800e524:	b084      	sub	sp, #16
 800e526:	af00      	add	r7, sp, #0
 800e528:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d001      	beq.n	800e538 <osDelay+0x16>
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	e000      	b.n	800e53a <osDelay+0x18>
 800e538:	2301      	movs	r3, #1
 800e53a:	4618      	mov	r0, r3
 800e53c:	f001 f8a0 	bl	800f680 <vTaskDelay>
  
  return osOK;
 800e540:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800e542:	4618      	mov	r0, r3
 800e544:	3710      	adds	r7, #16
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}

0800e54a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800e54a:	b590      	push	{r4, r7, lr}
 800e54c:	b085      	sub	sp, #20
 800e54e:	af02      	add	r7, sp, #8
 800e550:	6078      	str	r0, [r7, #4]
 800e552:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	689b      	ldr	r3, [r3, #8]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d011      	beq.n	800e580 <osMessageCreate+0x36>
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	68db      	ldr	r3, [r3, #12]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d00d      	beq.n	800e580 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	6818      	ldr	r0, [r3, #0]
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	6859      	ldr	r1, [r3, #4]
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	689a      	ldr	r2, [r3, #8]
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	68db      	ldr	r3, [r3, #12]
 800e574:	2400      	movs	r4, #0
 800e576:	9400      	str	r4, [sp, #0]
 800e578:	f000 f9e0 	bl	800e93c <xQueueGenericCreateStatic>
 800e57c:	4603      	mov	r3, r0
 800e57e:	e008      	b.n	800e592 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	6818      	ldr	r0, [r3, #0]
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	685b      	ldr	r3, [r3, #4]
 800e588:	2200      	movs	r2, #0
 800e58a:	4619      	mov	r1, r3
 800e58c:	f000 fa4e 	bl	800ea2c <xQueueGenericCreate>
 800e590:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800e592:	4618      	mov	r0, r3
 800e594:	370c      	adds	r7, #12
 800e596:	46bd      	mov	sp, r7
 800e598:	bd90      	pop	{r4, r7, pc}
	...

0800e59c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b086      	sub	sp, #24
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	60f8      	str	r0, [r7, #12]
 800e5a4:	60b9      	str	r1, [r7, #8]
 800e5a6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800e5b0:	697b      	ldr	r3, [r7, #20]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d101      	bne.n	800e5ba <osMessagePut+0x1e>
    ticks = 1;
 800e5b6:	2301      	movs	r3, #1
 800e5b8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800e5ba:	f7ff ff4d 	bl	800e458 <inHandlerMode>
 800e5be:	4603      	mov	r3, r0
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d018      	beq.n	800e5f6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800e5c4:	f107 0210 	add.w	r2, r7, #16
 800e5c8:	f107 0108 	add.w	r1, r7, #8
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	68f8      	ldr	r0, [r7, #12]
 800e5d0:	f000 fbb6 	bl	800ed40 <xQueueGenericSendFromISR>
 800e5d4:	4603      	mov	r3, r0
 800e5d6:	2b01      	cmp	r3, #1
 800e5d8:	d001      	beq.n	800e5de <osMessagePut+0x42>
      return osErrorOS;
 800e5da:	23ff      	movs	r3, #255	; 0xff
 800e5dc:	e018      	b.n	800e610 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e5de:	693b      	ldr	r3, [r7, #16]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d014      	beq.n	800e60e <osMessagePut+0x72>
 800e5e4:	4b0c      	ldr	r3, [pc, #48]	; (800e618 <osMessagePut+0x7c>)
 800e5e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5ea:	601a      	str	r2, [r3, #0]
 800e5ec:	f3bf 8f4f 	dsb	sy
 800e5f0:	f3bf 8f6f 	isb	sy
 800e5f4:	e00b      	b.n	800e60e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800e5f6:	f107 0108 	add.w	r1, r7, #8
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	697a      	ldr	r2, [r7, #20]
 800e5fe:	68f8      	ldr	r0, [r7, #12]
 800e600:	f000 faa0 	bl	800eb44 <xQueueGenericSend>
 800e604:	4603      	mov	r3, r0
 800e606:	2b01      	cmp	r3, #1
 800e608:	d001      	beq.n	800e60e <osMessagePut+0x72>
      return osErrorOS;
 800e60a:	23ff      	movs	r3, #255	; 0xff
 800e60c:	e000      	b.n	800e610 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800e60e:	2300      	movs	r3, #0
}
 800e610:	4618      	mov	r0, r3
 800e612:	3718      	adds	r7, #24
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}
 800e618:	e000ed04 	.word	0xe000ed04

0800e61c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800e61c:	b590      	push	{r4, r7, lr}
 800e61e:	b08b      	sub	sp, #44	; 0x2c
 800e620:	af00      	add	r7, sp, #0
 800e622:	60f8      	str	r0, [r7, #12]
 800e624:	60b9      	str	r1, [r7, #8]
 800e626:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800e628:	68bb      	ldr	r3, [r7, #8]
 800e62a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800e62c:	2300      	movs	r3, #0
 800e62e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800e630:	68bb      	ldr	r3, [r7, #8]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d10a      	bne.n	800e64c <osMessageGet+0x30>
    event.status = osErrorParameter;
 800e636:	2380      	movs	r3, #128	; 0x80
 800e638:	617b      	str	r3, [r7, #20]
    return event;
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	461c      	mov	r4, r3
 800e63e:	f107 0314 	add.w	r3, r7, #20
 800e642:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e646:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e64a:	e054      	b.n	800e6f6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800e64c:	2300      	movs	r3, #0
 800e64e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800e650:	2300      	movs	r3, #0
 800e652:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e65a:	d103      	bne.n	800e664 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800e65c:	f04f 33ff 	mov.w	r3, #4294967295
 800e660:	627b      	str	r3, [r7, #36]	; 0x24
 800e662:	e009      	b.n	800e678 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d006      	beq.n	800e678 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800e66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e670:	2b00      	cmp	r3, #0
 800e672:	d101      	bne.n	800e678 <osMessageGet+0x5c>
      ticks = 1;
 800e674:	2301      	movs	r3, #1
 800e676:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800e678:	f7ff feee 	bl	800e458 <inHandlerMode>
 800e67c:	4603      	mov	r3, r0
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d01c      	beq.n	800e6bc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800e682:	f107 0220 	add.w	r2, r7, #32
 800e686:	f107 0314 	add.w	r3, r7, #20
 800e68a:	3304      	adds	r3, #4
 800e68c:	4619      	mov	r1, r3
 800e68e:	68b8      	ldr	r0, [r7, #8]
 800e690:	f000 fcd2 	bl	800f038 <xQueueReceiveFromISR>
 800e694:	4603      	mov	r3, r0
 800e696:	2b01      	cmp	r3, #1
 800e698:	d102      	bne.n	800e6a0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800e69a:	2310      	movs	r3, #16
 800e69c:	617b      	str	r3, [r7, #20]
 800e69e:	e001      	b.n	800e6a4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e6a4:	6a3b      	ldr	r3, [r7, #32]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d01d      	beq.n	800e6e6 <osMessageGet+0xca>
 800e6aa:	4b15      	ldr	r3, [pc, #84]	; (800e700 <osMessageGet+0xe4>)
 800e6ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6b0:	601a      	str	r2, [r3, #0]
 800e6b2:	f3bf 8f4f 	dsb	sy
 800e6b6:	f3bf 8f6f 	isb	sy
 800e6ba:	e014      	b.n	800e6e6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800e6bc:	f107 0314 	add.w	r3, r7, #20
 800e6c0:	3304      	adds	r3, #4
 800e6c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6c4:	4619      	mov	r1, r3
 800e6c6:	68b8      	ldr	r0, [r7, #8]
 800e6c8:	f000 fbd6 	bl	800ee78 <xQueueReceive>
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	2b01      	cmp	r3, #1
 800e6d0:	d102      	bne.n	800e6d8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800e6d2:	2310      	movs	r3, #16
 800e6d4:	617b      	str	r3, [r7, #20]
 800e6d6:	e006      	b.n	800e6e6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800e6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d101      	bne.n	800e6e2 <osMessageGet+0xc6>
 800e6de:	2300      	movs	r3, #0
 800e6e0:	e000      	b.n	800e6e4 <osMessageGet+0xc8>
 800e6e2:	2340      	movs	r3, #64	; 0x40
 800e6e4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	461c      	mov	r4, r3
 800e6ea:	f107 0314 	add.w	r3, r7, #20
 800e6ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e6f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800e6f6:	68f8      	ldr	r0, [r7, #12]
 800e6f8:	372c      	adds	r7, #44	; 0x2c
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bd90      	pop	{r4, r7, pc}
 800e6fe:	bf00      	nop
 800e700:	e000ed04 	.word	0xe000ed04

0800e704 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e704:	b480      	push	{r7}
 800e706:	b083      	sub	sp, #12
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	f103 0208 	add.w	r2, r3, #8
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	f04f 32ff 	mov.w	r2, #4294967295
 800e71c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	f103 0208 	add.w	r2, r3, #8
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f103 0208 	add.w	r2, r3, #8
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	2200      	movs	r2, #0
 800e736:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e738:	bf00      	nop
 800e73a:	370c      	adds	r7, #12
 800e73c:	46bd      	mov	sp, r7
 800e73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e742:	4770      	bx	lr

0800e744 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e744:	b480      	push	{r7}
 800e746:	b083      	sub	sp, #12
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	2200      	movs	r2, #0
 800e750:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e752:	bf00      	nop
 800e754:	370c      	adds	r7, #12
 800e756:	46bd      	mov	sp, r7
 800e758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75c:	4770      	bx	lr

0800e75e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e75e:	b480      	push	{r7}
 800e760:	b085      	sub	sp, #20
 800e762:	af00      	add	r7, sp, #0
 800e764:	6078      	str	r0, [r7, #4]
 800e766:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	685b      	ldr	r3, [r3, #4]
 800e76c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e76e:	683b      	ldr	r3, [r7, #0]
 800e770:	68fa      	ldr	r2, [r7, #12]
 800e772:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	689a      	ldr	r2, [r3, #8]
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	689b      	ldr	r3, [r3, #8]
 800e780:	683a      	ldr	r2, [r7, #0]
 800e782:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	683a      	ldr	r2, [r7, #0]
 800e788:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e78a:	683b      	ldr	r3, [r7, #0]
 800e78c:	687a      	ldr	r2, [r7, #4]
 800e78e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	1c5a      	adds	r2, r3, #1
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	601a      	str	r2, [r3, #0]
}
 800e79a:	bf00      	nop
 800e79c:	3714      	adds	r7, #20
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a4:	4770      	bx	lr

0800e7a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e7a6:	b480      	push	{r7}
 800e7a8:	b085      	sub	sp, #20
 800e7aa:	af00      	add	r7, sp, #0
 800e7ac:	6078      	str	r0, [r7, #4]
 800e7ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e7b0:	683b      	ldr	r3, [r7, #0]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e7b6:	68bb      	ldr	r3, [r7, #8]
 800e7b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7bc:	d103      	bne.n	800e7c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	691b      	ldr	r3, [r3, #16]
 800e7c2:	60fb      	str	r3, [r7, #12]
 800e7c4:	e00c      	b.n	800e7e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	3308      	adds	r3, #8
 800e7ca:	60fb      	str	r3, [r7, #12]
 800e7cc:	e002      	b.n	800e7d4 <vListInsert+0x2e>
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	685b      	ldr	r3, [r3, #4]
 800e7d2:	60fb      	str	r3, [r7, #12]
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	685b      	ldr	r3, [r3, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	68ba      	ldr	r2, [r7, #8]
 800e7dc:	429a      	cmp	r2, r3
 800e7de:	d2f6      	bcs.n	800e7ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	685a      	ldr	r2, [r3, #4]
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	685b      	ldr	r3, [r3, #4]
 800e7ec:	683a      	ldr	r2, [r7, #0]
 800e7ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	68fa      	ldr	r2, [r7, #12]
 800e7f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	683a      	ldr	r2, [r7, #0]
 800e7fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e7fc:	683b      	ldr	r3, [r7, #0]
 800e7fe:	687a      	ldr	r2, [r7, #4]
 800e800:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	1c5a      	adds	r2, r3, #1
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	601a      	str	r2, [r3, #0]
}
 800e80c:	bf00      	nop
 800e80e:	3714      	adds	r7, #20
 800e810:	46bd      	mov	sp, r7
 800e812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e816:	4770      	bx	lr

0800e818 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e818:	b480      	push	{r7}
 800e81a:	b085      	sub	sp, #20
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	691b      	ldr	r3, [r3, #16]
 800e824:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	685b      	ldr	r3, [r3, #4]
 800e82a:	687a      	ldr	r2, [r7, #4]
 800e82c:	6892      	ldr	r2, [r2, #8]
 800e82e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	689b      	ldr	r3, [r3, #8]
 800e834:	687a      	ldr	r2, [r7, #4]
 800e836:	6852      	ldr	r2, [r2, #4]
 800e838:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	685b      	ldr	r3, [r3, #4]
 800e83e:	687a      	ldr	r2, [r7, #4]
 800e840:	429a      	cmp	r2, r3
 800e842:	d103      	bne.n	800e84c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	689a      	ldr	r2, [r3, #8]
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	2200      	movs	r2, #0
 800e850:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	1e5a      	subs	r2, r3, #1
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	681b      	ldr	r3, [r3, #0]
}
 800e860:	4618      	mov	r0, r3
 800e862:	3714      	adds	r7, #20
 800e864:	46bd      	mov	sp, r7
 800e866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86a:	4770      	bx	lr

0800e86c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b084      	sub	sp, #16
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
 800e874:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d10a      	bne.n	800e896 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e884:	f383 8811 	msr	BASEPRI, r3
 800e888:	f3bf 8f6f 	isb	sy
 800e88c:	f3bf 8f4f 	dsb	sy
 800e890:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e892:	bf00      	nop
 800e894:	e7fe      	b.n	800e894 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e896:	f001 fd5d 	bl	8010354 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	681a      	ldr	r2, [r3, #0]
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8a2:	68f9      	ldr	r1, [r7, #12]
 800e8a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e8a6:	fb01 f303 	mul.w	r3, r1, r3
 800e8aa:	441a      	add	r2, r3
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	681a      	ldr	r2, [r3, #0]
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	681a      	ldr	r2, [r3, #0]
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8c6:	3b01      	subs	r3, #1
 800e8c8:	68f9      	ldr	r1, [r7, #12]
 800e8ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e8cc:	fb01 f303 	mul.w	r3, r1, r3
 800e8d0:	441a      	add	r2, r3
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	22ff      	movs	r2, #255	; 0xff
 800e8da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	22ff      	movs	r2, #255	; 0xff
 800e8e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e8e6:	683b      	ldr	r3, [r7, #0]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d114      	bne.n	800e916 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	691b      	ldr	r3, [r3, #16]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d01a      	beq.n	800e92a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	3310      	adds	r3, #16
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f001 f937 	bl	800fb6c <xTaskRemoveFromEventList>
 800e8fe:	4603      	mov	r3, r0
 800e900:	2b00      	cmp	r3, #0
 800e902:	d012      	beq.n	800e92a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e904:	4b0c      	ldr	r3, [pc, #48]	; (800e938 <xQueueGenericReset+0xcc>)
 800e906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e90a:	601a      	str	r2, [r3, #0]
 800e90c:	f3bf 8f4f 	dsb	sy
 800e910:	f3bf 8f6f 	isb	sy
 800e914:	e009      	b.n	800e92a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	3310      	adds	r3, #16
 800e91a:	4618      	mov	r0, r3
 800e91c:	f7ff fef2 	bl	800e704 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	3324      	adds	r3, #36	; 0x24
 800e924:	4618      	mov	r0, r3
 800e926:	f7ff feed 	bl	800e704 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e92a:	f001 fd43 	bl	80103b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e92e:	2301      	movs	r3, #1
}
 800e930:	4618      	mov	r0, r3
 800e932:	3710      	adds	r7, #16
 800e934:	46bd      	mov	sp, r7
 800e936:	bd80      	pop	{r7, pc}
 800e938:	e000ed04 	.word	0xe000ed04

0800e93c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b08e      	sub	sp, #56	; 0x38
 800e940:	af02      	add	r7, sp, #8
 800e942:	60f8      	str	r0, [r7, #12]
 800e944:	60b9      	str	r1, [r7, #8]
 800e946:	607a      	str	r2, [r7, #4]
 800e948:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d10a      	bne.n	800e966 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e954:	f383 8811 	msr	BASEPRI, r3
 800e958:	f3bf 8f6f 	isb	sy
 800e95c:	f3bf 8f4f 	dsb	sy
 800e960:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e962:	bf00      	nop
 800e964:	e7fe      	b.n	800e964 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e966:	683b      	ldr	r3, [r7, #0]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d10a      	bne.n	800e982 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e96c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e970:	f383 8811 	msr	BASEPRI, r3
 800e974:	f3bf 8f6f 	isb	sy
 800e978:	f3bf 8f4f 	dsb	sy
 800e97c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e97e:	bf00      	nop
 800e980:	e7fe      	b.n	800e980 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d002      	beq.n	800e98e <xQueueGenericCreateStatic+0x52>
 800e988:	68bb      	ldr	r3, [r7, #8]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d001      	beq.n	800e992 <xQueueGenericCreateStatic+0x56>
 800e98e:	2301      	movs	r3, #1
 800e990:	e000      	b.n	800e994 <xQueueGenericCreateStatic+0x58>
 800e992:	2300      	movs	r3, #0
 800e994:	2b00      	cmp	r3, #0
 800e996:	d10a      	bne.n	800e9ae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e99c:	f383 8811 	msr	BASEPRI, r3
 800e9a0:	f3bf 8f6f 	isb	sy
 800e9a4:	f3bf 8f4f 	dsb	sy
 800e9a8:	623b      	str	r3, [r7, #32]
}
 800e9aa:	bf00      	nop
 800e9ac:	e7fe      	b.n	800e9ac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d102      	bne.n	800e9ba <xQueueGenericCreateStatic+0x7e>
 800e9b4:	68bb      	ldr	r3, [r7, #8]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d101      	bne.n	800e9be <xQueueGenericCreateStatic+0x82>
 800e9ba:	2301      	movs	r3, #1
 800e9bc:	e000      	b.n	800e9c0 <xQueueGenericCreateStatic+0x84>
 800e9be:	2300      	movs	r3, #0
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d10a      	bne.n	800e9da <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9c8:	f383 8811 	msr	BASEPRI, r3
 800e9cc:	f3bf 8f6f 	isb	sy
 800e9d0:	f3bf 8f4f 	dsb	sy
 800e9d4:	61fb      	str	r3, [r7, #28]
}
 800e9d6:	bf00      	nop
 800e9d8:	e7fe      	b.n	800e9d8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e9da:	2348      	movs	r3, #72	; 0x48
 800e9dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e9de:	697b      	ldr	r3, [r7, #20]
 800e9e0:	2b48      	cmp	r3, #72	; 0x48
 800e9e2:	d00a      	beq.n	800e9fa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9e8:	f383 8811 	msr	BASEPRI, r3
 800e9ec:	f3bf 8f6f 	isb	sy
 800e9f0:	f3bf 8f4f 	dsb	sy
 800e9f4:	61bb      	str	r3, [r7, #24]
}
 800e9f6:	bf00      	nop
 800e9f8:	e7fe      	b.n	800e9f8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e9fa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ea00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d00d      	beq.n	800ea22 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ea06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea08:	2201      	movs	r2, #1
 800ea0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ea0e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ea12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea14:	9300      	str	r3, [sp, #0]
 800ea16:	4613      	mov	r3, r2
 800ea18:	687a      	ldr	r2, [r7, #4]
 800ea1a:	68b9      	ldr	r1, [r7, #8]
 800ea1c:	68f8      	ldr	r0, [r7, #12]
 800ea1e:	f000 f83f 	bl	800eaa0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ea22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ea24:	4618      	mov	r0, r3
 800ea26:	3730      	adds	r7, #48	; 0x30
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	bd80      	pop	{r7, pc}

0800ea2c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b08a      	sub	sp, #40	; 0x28
 800ea30:	af02      	add	r7, sp, #8
 800ea32:	60f8      	str	r0, [r7, #12]
 800ea34:	60b9      	str	r1, [r7, #8]
 800ea36:	4613      	mov	r3, r2
 800ea38:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d10a      	bne.n	800ea56 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ea40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea44:	f383 8811 	msr	BASEPRI, r3
 800ea48:	f3bf 8f6f 	isb	sy
 800ea4c:	f3bf 8f4f 	dsb	sy
 800ea50:	613b      	str	r3, [r7, #16]
}
 800ea52:	bf00      	nop
 800ea54:	e7fe      	b.n	800ea54 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	68ba      	ldr	r2, [r7, #8]
 800ea5a:	fb02 f303 	mul.w	r3, r2, r3
 800ea5e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ea60:	69fb      	ldr	r3, [r7, #28]
 800ea62:	3348      	adds	r3, #72	; 0x48
 800ea64:	4618      	mov	r0, r3
 800ea66:	f001 fd97 	bl	8010598 <pvPortMalloc>
 800ea6a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ea6c:	69bb      	ldr	r3, [r7, #24]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d011      	beq.n	800ea96 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ea72:	69bb      	ldr	r3, [r7, #24]
 800ea74:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ea76:	697b      	ldr	r3, [r7, #20]
 800ea78:	3348      	adds	r3, #72	; 0x48
 800ea7a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ea7c:	69bb      	ldr	r3, [r7, #24]
 800ea7e:	2200      	movs	r2, #0
 800ea80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ea84:	79fa      	ldrb	r2, [r7, #7]
 800ea86:	69bb      	ldr	r3, [r7, #24]
 800ea88:	9300      	str	r3, [sp, #0]
 800ea8a:	4613      	mov	r3, r2
 800ea8c:	697a      	ldr	r2, [r7, #20]
 800ea8e:	68b9      	ldr	r1, [r7, #8]
 800ea90:	68f8      	ldr	r0, [r7, #12]
 800ea92:	f000 f805 	bl	800eaa0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ea96:	69bb      	ldr	r3, [r7, #24]
	}
 800ea98:	4618      	mov	r0, r3
 800ea9a:	3720      	adds	r7, #32
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}

0800eaa0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b084      	sub	sp, #16
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	60f8      	str	r0, [r7, #12]
 800eaa8:	60b9      	str	r1, [r7, #8]
 800eaaa:	607a      	str	r2, [r7, #4]
 800eaac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800eaae:	68bb      	ldr	r3, [r7, #8]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d103      	bne.n	800eabc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800eab4:	69bb      	ldr	r3, [r7, #24]
 800eab6:	69ba      	ldr	r2, [r7, #24]
 800eab8:	601a      	str	r2, [r3, #0]
 800eaba:	e002      	b.n	800eac2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800eabc:	69bb      	ldr	r3, [r7, #24]
 800eabe:	687a      	ldr	r2, [r7, #4]
 800eac0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800eac2:	69bb      	ldr	r3, [r7, #24]
 800eac4:	68fa      	ldr	r2, [r7, #12]
 800eac6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800eac8:	69bb      	ldr	r3, [r7, #24]
 800eaca:	68ba      	ldr	r2, [r7, #8]
 800eacc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800eace:	2101      	movs	r1, #1
 800ead0:	69b8      	ldr	r0, [r7, #24]
 800ead2:	f7ff fecb 	bl	800e86c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ead6:	bf00      	nop
 800ead8:	3710      	adds	r7, #16
 800eada:	46bd      	mov	sp, r7
 800eadc:	bd80      	pop	{r7, pc}

0800eade <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800eade:	b580      	push	{r7, lr}
 800eae0:	b082      	sub	sp, #8
 800eae2:	af00      	add	r7, sp, #0
 800eae4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d00e      	beq.n	800eb0a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	2200      	movs	r2, #0
 800eaf0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	2200      	movs	r2, #0
 800eafc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800eafe:	2300      	movs	r3, #0
 800eb00:	2200      	movs	r2, #0
 800eb02:	2100      	movs	r1, #0
 800eb04:	6878      	ldr	r0, [r7, #4]
 800eb06:	f000 f81d 	bl	800eb44 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800eb0a:	bf00      	nop
 800eb0c:	3708      	adds	r7, #8
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}

0800eb12 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800eb12:	b580      	push	{r7, lr}
 800eb14:	b086      	sub	sp, #24
 800eb16:	af00      	add	r7, sp, #0
 800eb18:	4603      	mov	r3, r0
 800eb1a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800eb1c:	2301      	movs	r3, #1
 800eb1e:	617b      	str	r3, [r7, #20]
 800eb20:	2300      	movs	r3, #0
 800eb22:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800eb24:	79fb      	ldrb	r3, [r7, #7]
 800eb26:	461a      	mov	r2, r3
 800eb28:	6939      	ldr	r1, [r7, #16]
 800eb2a:	6978      	ldr	r0, [r7, #20]
 800eb2c:	f7ff ff7e 	bl	800ea2c <xQueueGenericCreate>
 800eb30:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800eb32:	68f8      	ldr	r0, [r7, #12]
 800eb34:	f7ff ffd3 	bl	800eade <prvInitialiseMutex>

		return xNewQueue;
 800eb38:	68fb      	ldr	r3, [r7, #12]
	}
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	3718      	adds	r7, #24
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	bd80      	pop	{r7, pc}
	...

0800eb44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b08e      	sub	sp, #56	; 0x38
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	60f8      	str	r0, [r7, #12]
 800eb4c:	60b9      	str	r1, [r7, #8]
 800eb4e:	607a      	str	r2, [r7, #4]
 800eb50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800eb52:	2300      	movs	r3, #0
 800eb54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800eb5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d10a      	bne.n	800eb76 <xQueueGenericSend+0x32>
	__asm volatile
 800eb60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb64:	f383 8811 	msr	BASEPRI, r3
 800eb68:	f3bf 8f6f 	isb	sy
 800eb6c:	f3bf 8f4f 	dsb	sy
 800eb70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800eb72:	bf00      	nop
 800eb74:	e7fe      	b.n	800eb74 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eb76:	68bb      	ldr	r3, [r7, #8]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d103      	bne.n	800eb84 <xQueueGenericSend+0x40>
 800eb7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d101      	bne.n	800eb88 <xQueueGenericSend+0x44>
 800eb84:	2301      	movs	r3, #1
 800eb86:	e000      	b.n	800eb8a <xQueueGenericSend+0x46>
 800eb88:	2300      	movs	r3, #0
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d10a      	bne.n	800eba4 <xQueueGenericSend+0x60>
	__asm volatile
 800eb8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb92:	f383 8811 	msr	BASEPRI, r3
 800eb96:	f3bf 8f6f 	isb	sy
 800eb9a:	f3bf 8f4f 	dsb	sy
 800eb9e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800eba0:	bf00      	nop
 800eba2:	e7fe      	b.n	800eba2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	2b02      	cmp	r3, #2
 800eba8:	d103      	bne.n	800ebb2 <xQueueGenericSend+0x6e>
 800ebaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebae:	2b01      	cmp	r3, #1
 800ebb0:	d101      	bne.n	800ebb6 <xQueueGenericSend+0x72>
 800ebb2:	2301      	movs	r3, #1
 800ebb4:	e000      	b.n	800ebb8 <xQueueGenericSend+0x74>
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d10a      	bne.n	800ebd2 <xQueueGenericSend+0x8e>
	__asm volatile
 800ebbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebc0:	f383 8811 	msr	BASEPRI, r3
 800ebc4:	f3bf 8f6f 	isb	sy
 800ebc8:	f3bf 8f4f 	dsb	sy
 800ebcc:	623b      	str	r3, [r7, #32]
}
 800ebce:	bf00      	nop
 800ebd0:	e7fe      	b.n	800ebd0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ebd2:	f001 f987 	bl	800fee4 <xTaskGetSchedulerState>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d102      	bne.n	800ebe2 <xQueueGenericSend+0x9e>
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d101      	bne.n	800ebe6 <xQueueGenericSend+0xa2>
 800ebe2:	2301      	movs	r3, #1
 800ebe4:	e000      	b.n	800ebe8 <xQueueGenericSend+0xa4>
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d10a      	bne.n	800ec02 <xQueueGenericSend+0xbe>
	__asm volatile
 800ebec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebf0:	f383 8811 	msr	BASEPRI, r3
 800ebf4:	f3bf 8f6f 	isb	sy
 800ebf8:	f3bf 8f4f 	dsb	sy
 800ebfc:	61fb      	str	r3, [r7, #28]
}
 800ebfe:	bf00      	nop
 800ec00:	e7fe      	b.n	800ec00 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ec02:	f001 fba7 	bl	8010354 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ec06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec0e:	429a      	cmp	r2, r3
 800ec10:	d302      	bcc.n	800ec18 <xQueueGenericSend+0xd4>
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	2b02      	cmp	r3, #2
 800ec16:	d129      	bne.n	800ec6c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ec18:	683a      	ldr	r2, [r7, #0]
 800ec1a:	68b9      	ldr	r1, [r7, #8]
 800ec1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec1e:	f000 fa8b 	bl	800f138 <prvCopyDataToQueue>
 800ec22:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ec24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d010      	beq.n	800ec4e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ec2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec2e:	3324      	adds	r3, #36	; 0x24
 800ec30:	4618      	mov	r0, r3
 800ec32:	f000 ff9b 	bl	800fb6c <xTaskRemoveFromEventList>
 800ec36:	4603      	mov	r3, r0
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d013      	beq.n	800ec64 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ec3c:	4b3f      	ldr	r3, [pc, #252]	; (800ed3c <xQueueGenericSend+0x1f8>)
 800ec3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec42:	601a      	str	r2, [r3, #0]
 800ec44:	f3bf 8f4f 	dsb	sy
 800ec48:	f3bf 8f6f 	isb	sy
 800ec4c:	e00a      	b.n	800ec64 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ec4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d007      	beq.n	800ec64 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ec54:	4b39      	ldr	r3, [pc, #228]	; (800ed3c <xQueueGenericSend+0x1f8>)
 800ec56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec5a:	601a      	str	r2, [r3, #0]
 800ec5c:	f3bf 8f4f 	dsb	sy
 800ec60:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ec64:	f001 fba6 	bl	80103b4 <vPortExitCritical>
				return pdPASS;
 800ec68:	2301      	movs	r3, #1
 800ec6a:	e063      	b.n	800ed34 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d103      	bne.n	800ec7a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ec72:	f001 fb9f 	bl	80103b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ec76:	2300      	movs	r3, #0
 800ec78:	e05c      	b.n	800ed34 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ec7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d106      	bne.n	800ec8e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ec80:	f107 0314 	add.w	r3, r7, #20
 800ec84:	4618      	mov	r0, r3
 800ec86:	f000 ffd3 	bl	800fc30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ec8a:	2301      	movs	r3, #1
 800ec8c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ec8e:	f001 fb91 	bl	80103b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ec92:	f000 fd89 	bl	800f7a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ec96:	f001 fb5d 	bl	8010354 <vPortEnterCritical>
 800ec9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eca0:	b25b      	sxtb	r3, r3
 800eca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eca6:	d103      	bne.n	800ecb0 <xQueueGenericSend+0x16c>
 800eca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecaa:	2200      	movs	r2, #0
 800ecac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ecb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ecb6:	b25b      	sxtb	r3, r3
 800ecb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecbc:	d103      	bne.n	800ecc6 <xQueueGenericSend+0x182>
 800ecbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ecc6:	f001 fb75 	bl	80103b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ecca:	1d3a      	adds	r2, r7, #4
 800eccc:	f107 0314 	add.w	r3, r7, #20
 800ecd0:	4611      	mov	r1, r2
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	f000 ffc2 	bl	800fc5c <xTaskCheckForTimeOut>
 800ecd8:	4603      	mov	r3, r0
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d124      	bne.n	800ed28 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ecde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ece0:	f000 fb22 	bl	800f328 <prvIsQueueFull>
 800ece4:	4603      	mov	r3, r0
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d018      	beq.n	800ed1c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ecea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecec:	3310      	adds	r3, #16
 800ecee:	687a      	ldr	r2, [r7, #4]
 800ecf0:	4611      	mov	r1, r2
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	f000 ff16 	bl	800fb24 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ecf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ecfa:	f000 faad 	bl	800f258 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ecfe:	f000 fd61 	bl	800f7c4 <xTaskResumeAll>
 800ed02:	4603      	mov	r3, r0
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	f47f af7c 	bne.w	800ec02 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ed0a:	4b0c      	ldr	r3, [pc, #48]	; (800ed3c <xQueueGenericSend+0x1f8>)
 800ed0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed10:	601a      	str	r2, [r3, #0]
 800ed12:	f3bf 8f4f 	dsb	sy
 800ed16:	f3bf 8f6f 	isb	sy
 800ed1a:	e772      	b.n	800ec02 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ed1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed1e:	f000 fa9b 	bl	800f258 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ed22:	f000 fd4f 	bl	800f7c4 <xTaskResumeAll>
 800ed26:	e76c      	b.n	800ec02 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ed28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed2a:	f000 fa95 	bl	800f258 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ed2e:	f000 fd49 	bl	800f7c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ed32:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ed34:	4618      	mov	r0, r3
 800ed36:	3738      	adds	r7, #56	; 0x38
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd80      	pop	{r7, pc}
 800ed3c:	e000ed04 	.word	0xe000ed04

0800ed40 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b090      	sub	sp, #64	; 0x40
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	60f8      	str	r0, [r7, #12]
 800ed48:	60b9      	str	r1, [r7, #8]
 800ed4a:	607a      	str	r2, [r7, #4]
 800ed4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ed52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d10a      	bne.n	800ed6e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ed58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed5c:	f383 8811 	msr	BASEPRI, r3
 800ed60:	f3bf 8f6f 	isb	sy
 800ed64:	f3bf 8f4f 	dsb	sy
 800ed68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ed6a:	bf00      	nop
 800ed6c:	e7fe      	b.n	800ed6c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d103      	bne.n	800ed7c <xQueueGenericSendFromISR+0x3c>
 800ed74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d101      	bne.n	800ed80 <xQueueGenericSendFromISR+0x40>
 800ed7c:	2301      	movs	r3, #1
 800ed7e:	e000      	b.n	800ed82 <xQueueGenericSendFromISR+0x42>
 800ed80:	2300      	movs	r3, #0
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d10a      	bne.n	800ed9c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ed86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed8a:	f383 8811 	msr	BASEPRI, r3
 800ed8e:	f3bf 8f6f 	isb	sy
 800ed92:	f3bf 8f4f 	dsb	sy
 800ed96:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ed98:	bf00      	nop
 800ed9a:	e7fe      	b.n	800ed9a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ed9c:	683b      	ldr	r3, [r7, #0]
 800ed9e:	2b02      	cmp	r3, #2
 800eda0:	d103      	bne.n	800edaa <xQueueGenericSendFromISR+0x6a>
 800eda2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eda4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eda6:	2b01      	cmp	r3, #1
 800eda8:	d101      	bne.n	800edae <xQueueGenericSendFromISR+0x6e>
 800edaa:	2301      	movs	r3, #1
 800edac:	e000      	b.n	800edb0 <xQueueGenericSendFromISR+0x70>
 800edae:	2300      	movs	r3, #0
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d10a      	bne.n	800edca <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800edb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edb8:	f383 8811 	msr	BASEPRI, r3
 800edbc:	f3bf 8f6f 	isb	sy
 800edc0:	f3bf 8f4f 	dsb	sy
 800edc4:	623b      	str	r3, [r7, #32]
}
 800edc6:	bf00      	nop
 800edc8:	e7fe      	b.n	800edc8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800edca:	f001 fba5 	bl	8010518 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800edce:	f3ef 8211 	mrs	r2, BASEPRI
 800edd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edd6:	f383 8811 	msr	BASEPRI, r3
 800edda:	f3bf 8f6f 	isb	sy
 800edde:	f3bf 8f4f 	dsb	sy
 800ede2:	61fa      	str	r2, [r7, #28]
 800ede4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ede6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ede8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800edea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800edee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edf2:	429a      	cmp	r2, r3
 800edf4:	d302      	bcc.n	800edfc <xQueueGenericSendFromISR+0xbc>
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	2b02      	cmp	r3, #2
 800edfa:	d12f      	bne.n	800ee5c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800edfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ee02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ee06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee0a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ee0c:	683a      	ldr	r2, [r7, #0]
 800ee0e:	68b9      	ldr	r1, [r7, #8]
 800ee10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ee12:	f000 f991 	bl	800f138 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ee16:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ee1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee1e:	d112      	bne.n	800ee46 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ee20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d016      	beq.n	800ee56 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ee28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee2a:	3324      	adds	r3, #36	; 0x24
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f000 fe9d 	bl	800fb6c <xTaskRemoveFromEventList>
 800ee32:	4603      	mov	r3, r0
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d00e      	beq.n	800ee56 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d00b      	beq.n	800ee56 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	2201      	movs	r2, #1
 800ee42:	601a      	str	r2, [r3, #0]
 800ee44:	e007      	b.n	800ee56 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ee46:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ee4a:	3301      	adds	r3, #1
 800ee4c:	b2db      	uxtb	r3, r3
 800ee4e:	b25a      	sxtb	r2, r3
 800ee50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ee56:	2301      	movs	r3, #1
 800ee58:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ee5a:	e001      	b.n	800ee60 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ee60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee62:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ee64:	697b      	ldr	r3, [r7, #20]
 800ee66:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ee6a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ee6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ee6e:	4618      	mov	r0, r3
 800ee70:	3740      	adds	r7, #64	; 0x40
 800ee72:	46bd      	mov	sp, r7
 800ee74:	bd80      	pop	{r7, pc}
	...

0800ee78 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b08c      	sub	sp, #48	; 0x30
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	60f8      	str	r0, [r7, #12]
 800ee80:	60b9      	str	r1, [r7, #8]
 800ee82:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ee84:	2300      	movs	r3, #0
 800ee86:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ee8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d10a      	bne.n	800eea8 <xQueueReceive+0x30>
	__asm volatile
 800ee92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee96:	f383 8811 	msr	BASEPRI, r3
 800ee9a:	f3bf 8f6f 	isb	sy
 800ee9e:	f3bf 8f4f 	dsb	sy
 800eea2:	623b      	str	r3, [r7, #32]
}
 800eea4:	bf00      	nop
 800eea6:	e7fe      	b.n	800eea6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eea8:	68bb      	ldr	r3, [r7, #8]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d103      	bne.n	800eeb6 <xQueueReceive+0x3e>
 800eeae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d101      	bne.n	800eeba <xQueueReceive+0x42>
 800eeb6:	2301      	movs	r3, #1
 800eeb8:	e000      	b.n	800eebc <xQueueReceive+0x44>
 800eeba:	2300      	movs	r3, #0
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d10a      	bne.n	800eed6 <xQueueReceive+0x5e>
	__asm volatile
 800eec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eec4:	f383 8811 	msr	BASEPRI, r3
 800eec8:	f3bf 8f6f 	isb	sy
 800eecc:	f3bf 8f4f 	dsb	sy
 800eed0:	61fb      	str	r3, [r7, #28]
}
 800eed2:	bf00      	nop
 800eed4:	e7fe      	b.n	800eed4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eed6:	f001 f805 	bl	800fee4 <xTaskGetSchedulerState>
 800eeda:	4603      	mov	r3, r0
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d102      	bne.n	800eee6 <xQueueReceive+0x6e>
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d101      	bne.n	800eeea <xQueueReceive+0x72>
 800eee6:	2301      	movs	r3, #1
 800eee8:	e000      	b.n	800eeec <xQueueReceive+0x74>
 800eeea:	2300      	movs	r3, #0
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d10a      	bne.n	800ef06 <xQueueReceive+0x8e>
	__asm volatile
 800eef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eef4:	f383 8811 	msr	BASEPRI, r3
 800eef8:	f3bf 8f6f 	isb	sy
 800eefc:	f3bf 8f4f 	dsb	sy
 800ef00:	61bb      	str	r3, [r7, #24]
}
 800ef02:	bf00      	nop
 800ef04:	e7fe      	b.n	800ef04 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ef06:	f001 fa25 	bl	8010354 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ef0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef0e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ef10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d01f      	beq.n	800ef56 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ef16:	68b9      	ldr	r1, [r7, #8]
 800ef18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef1a:	f000 f977 	bl	800f20c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ef1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef20:	1e5a      	subs	r2, r3, #1
 800ef22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef24:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ef26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef28:	691b      	ldr	r3, [r3, #16]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d00f      	beq.n	800ef4e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ef2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef30:	3310      	adds	r3, #16
 800ef32:	4618      	mov	r0, r3
 800ef34:	f000 fe1a 	bl	800fb6c <xTaskRemoveFromEventList>
 800ef38:	4603      	mov	r3, r0
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d007      	beq.n	800ef4e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ef3e:	4b3d      	ldr	r3, [pc, #244]	; (800f034 <xQueueReceive+0x1bc>)
 800ef40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef44:	601a      	str	r2, [r3, #0]
 800ef46:	f3bf 8f4f 	dsb	sy
 800ef4a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ef4e:	f001 fa31 	bl	80103b4 <vPortExitCritical>
				return pdPASS;
 800ef52:	2301      	movs	r3, #1
 800ef54:	e069      	b.n	800f02a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d103      	bne.n	800ef64 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ef5c:	f001 fa2a 	bl	80103b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ef60:	2300      	movs	r3, #0
 800ef62:	e062      	b.n	800f02a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ef64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d106      	bne.n	800ef78 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ef6a:	f107 0310 	add.w	r3, r7, #16
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f000 fe5e 	bl	800fc30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ef74:	2301      	movs	r3, #1
 800ef76:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ef78:	f001 fa1c 	bl	80103b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ef7c:	f000 fc14 	bl	800f7a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ef80:	f001 f9e8 	bl	8010354 <vPortEnterCritical>
 800ef84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ef8a:	b25b      	sxtb	r3, r3
 800ef8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef90:	d103      	bne.n	800ef9a <xQueueReceive+0x122>
 800ef92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef94:	2200      	movs	r2, #0
 800ef96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ef9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800efa0:	b25b      	sxtb	r3, r3
 800efa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efa6:	d103      	bne.n	800efb0 <xQueueReceive+0x138>
 800efa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efaa:	2200      	movs	r2, #0
 800efac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800efb0:	f001 fa00 	bl	80103b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800efb4:	1d3a      	adds	r2, r7, #4
 800efb6:	f107 0310 	add.w	r3, r7, #16
 800efba:	4611      	mov	r1, r2
 800efbc:	4618      	mov	r0, r3
 800efbe:	f000 fe4d 	bl	800fc5c <xTaskCheckForTimeOut>
 800efc2:	4603      	mov	r3, r0
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d123      	bne.n	800f010 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800efc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800efca:	f000 f997 	bl	800f2fc <prvIsQueueEmpty>
 800efce:	4603      	mov	r3, r0
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d017      	beq.n	800f004 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800efd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efd6:	3324      	adds	r3, #36	; 0x24
 800efd8:	687a      	ldr	r2, [r7, #4]
 800efda:	4611      	mov	r1, r2
 800efdc:	4618      	mov	r0, r3
 800efde:	f000 fda1 	bl	800fb24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800efe2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800efe4:	f000 f938 	bl	800f258 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800efe8:	f000 fbec 	bl	800f7c4 <xTaskResumeAll>
 800efec:	4603      	mov	r3, r0
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d189      	bne.n	800ef06 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800eff2:	4b10      	ldr	r3, [pc, #64]	; (800f034 <xQueueReceive+0x1bc>)
 800eff4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eff8:	601a      	str	r2, [r3, #0]
 800effa:	f3bf 8f4f 	dsb	sy
 800effe:	f3bf 8f6f 	isb	sy
 800f002:	e780      	b.n	800ef06 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f004:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f006:	f000 f927 	bl	800f258 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f00a:	f000 fbdb 	bl	800f7c4 <xTaskResumeAll>
 800f00e:	e77a      	b.n	800ef06 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f010:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f012:	f000 f921 	bl	800f258 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f016:	f000 fbd5 	bl	800f7c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f01a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f01c:	f000 f96e 	bl	800f2fc <prvIsQueueEmpty>
 800f020:	4603      	mov	r3, r0
 800f022:	2b00      	cmp	r3, #0
 800f024:	f43f af6f 	beq.w	800ef06 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f028:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f02a:	4618      	mov	r0, r3
 800f02c:	3730      	adds	r7, #48	; 0x30
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd80      	pop	{r7, pc}
 800f032:	bf00      	nop
 800f034:	e000ed04 	.word	0xe000ed04

0800f038 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b08e      	sub	sp, #56	; 0x38
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	60f8      	str	r0, [r7, #12]
 800f040:	60b9      	str	r1, [r7, #8]
 800f042:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d10a      	bne.n	800f064 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800f04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f052:	f383 8811 	msr	BASEPRI, r3
 800f056:	f3bf 8f6f 	isb	sy
 800f05a:	f3bf 8f4f 	dsb	sy
 800f05e:	623b      	str	r3, [r7, #32]
}
 800f060:	bf00      	nop
 800f062:	e7fe      	b.n	800f062 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f064:	68bb      	ldr	r3, [r7, #8]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d103      	bne.n	800f072 <xQueueReceiveFromISR+0x3a>
 800f06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d101      	bne.n	800f076 <xQueueReceiveFromISR+0x3e>
 800f072:	2301      	movs	r3, #1
 800f074:	e000      	b.n	800f078 <xQueueReceiveFromISR+0x40>
 800f076:	2300      	movs	r3, #0
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d10a      	bne.n	800f092 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800f07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f080:	f383 8811 	msr	BASEPRI, r3
 800f084:	f3bf 8f6f 	isb	sy
 800f088:	f3bf 8f4f 	dsb	sy
 800f08c:	61fb      	str	r3, [r7, #28]
}
 800f08e:	bf00      	nop
 800f090:	e7fe      	b.n	800f090 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f092:	f001 fa41 	bl	8010518 <vPortValidateInterruptPriority>
	__asm volatile
 800f096:	f3ef 8211 	mrs	r2, BASEPRI
 800f09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f09e:	f383 8811 	msr	BASEPRI, r3
 800f0a2:	f3bf 8f6f 	isb	sy
 800f0a6:	f3bf 8f4f 	dsb	sy
 800f0aa:	61ba      	str	r2, [r7, #24]
 800f0ac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f0ae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f0b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0b6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d02f      	beq.n	800f11e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f0c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f0c8:	68b9      	ldr	r1, [r7, #8]
 800f0ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0cc:	f000 f89e 	bl	800f20c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0d2:	1e5a      	subs	r2, r3, #1
 800f0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0d6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f0d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f0dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0e0:	d112      	bne.n	800f108 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0e4:	691b      	ldr	r3, [r3, #16]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d016      	beq.n	800f118 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0ec:	3310      	adds	r3, #16
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	f000 fd3c 	bl	800fb6c <xTaskRemoveFromEventList>
 800f0f4:	4603      	mov	r3, r0
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d00e      	beq.n	800f118 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d00b      	beq.n	800f118 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	2201      	movs	r2, #1
 800f104:	601a      	str	r2, [r3, #0]
 800f106:	e007      	b.n	800f118 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f108:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f10c:	3301      	adds	r3, #1
 800f10e:	b2db      	uxtb	r3, r3
 800f110:	b25a      	sxtb	r2, r3
 800f112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f118:	2301      	movs	r3, #1
 800f11a:	637b      	str	r3, [r7, #52]	; 0x34
 800f11c:	e001      	b.n	800f122 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800f11e:	2300      	movs	r3, #0
 800f120:	637b      	str	r3, [r7, #52]	; 0x34
 800f122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f124:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f126:	693b      	ldr	r3, [r7, #16]
 800f128:	f383 8811 	msr	BASEPRI, r3
}
 800f12c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f12e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f130:	4618      	mov	r0, r3
 800f132:	3738      	adds	r7, #56	; 0x38
 800f134:	46bd      	mov	sp, r7
 800f136:	bd80      	pop	{r7, pc}

0800f138 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b086      	sub	sp, #24
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	60f8      	str	r0, [r7, #12]
 800f140:	60b9      	str	r1, [r7, #8]
 800f142:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f144:	2300      	movs	r3, #0
 800f146:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f14c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f152:	2b00      	cmp	r3, #0
 800f154:	d10d      	bne.n	800f172 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d14d      	bne.n	800f1fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	689b      	ldr	r3, [r3, #8]
 800f162:	4618      	mov	r0, r3
 800f164:	f000 fedc 	bl	800ff20 <xTaskPriorityDisinherit>
 800f168:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	2200      	movs	r2, #0
 800f16e:	609a      	str	r2, [r3, #8]
 800f170:	e043      	b.n	800f1fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d119      	bne.n	800f1ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	6858      	ldr	r0, [r3, #4]
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f180:	461a      	mov	r2, r3
 800f182:	68b9      	ldr	r1, [r7, #8]
 800f184:	f002 fbf4 	bl	8011970 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	685a      	ldr	r2, [r3, #4]
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f190:	441a      	add	r2, r3
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	685a      	ldr	r2, [r3, #4]
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	689b      	ldr	r3, [r3, #8]
 800f19e:	429a      	cmp	r2, r3
 800f1a0:	d32b      	bcc.n	800f1fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	681a      	ldr	r2, [r3, #0]
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	605a      	str	r2, [r3, #4]
 800f1aa:	e026      	b.n	800f1fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	68d8      	ldr	r0, [r3, #12]
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1b4:	461a      	mov	r2, r3
 800f1b6:	68b9      	ldr	r1, [r7, #8]
 800f1b8:	f002 fbda 	bl	8011970 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	68da      	ldr	r2, [r3, #12]
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1c4:	425b      	negs	r3, r3
 800f1c6:	441a      	add	r2, r3
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	68da      	ldr	r2, [r3, #12]
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	429a      	cmp	r2, r3
 800f1d6:	d207      	bcs.n	800f1e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	689a      	ldr	r2, [r3, #8]
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1e0:	425b      	negs	r3, r3
 800f1e2:	441a      	add	r2, r3
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	2b02      	cmp	r3, #2
 800f1ec:	d105      	bne.n	800f1fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f1ee:	693b      	ldr	r3, [r7, #16]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d002      	beq.n	800f1fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f1f4:	693b      	ldr	r3, [r7, #16]
 800f1f6:	3b01      	subs	r3, #1
 800f1f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f1fa:	693b      	ldr	r3, [r7, #16]
 800f1fc:	1c5a      	adds	r2, r3, #1
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f202:	697b      	ldr	r3, [r7, #20]
}
 800f204:	4618      	mov	r0, r3
 800f206:	3718      	adds	r7, #24
 800f208:	46bd      	mov	sp, r7
 800f20a:	bd80      	pop	{r7, pc}

0800f20c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b082      	sub	sp, #8
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
 800f214:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d018      	beq.n	800f250 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	68da      	ldr	r2, [r3, #12]
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f226:	441a      	add	r2, r3
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	68da      	ldr	r2, [r3, #12]
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	689b      	ldr	r3, [r3, #8]
 800f234:	429a      	cmp	r2, r3
 800f236:	d303      	bcc.n	800f240 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681a      	ldr	r2, [r3, #0]
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	68d9      	ldr	r1, [r3, #12]
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f248:	461a      	mov	r2, r3
 800f24a:	6838      	ldr	r0, [r7, #0]
 800f24c:	f002 fb90 	bl	8011970 <memcpy>
	}
}
 800f250:	bf00      	nop
 800f252:	3708      	adds	r7, #8
 800f254:	46bd      	mov	sp, r7
 800f256:	bd80      	pop	{r7, pc}

0800f258 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b084      	sub	sp, #16
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f260:	f001 f878 	bl	8010354 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f26a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f26c:	e011      	b.n	800f292 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f272:	2b00      	cmp	r3, #0
 800f274:	d012      	beq.n	800f29c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	3324      	adds	r3, #36	; 0x24
 800f27a:	4618      	mov	r0, r3
 800f27c:	f000 fc76 	bl	800fb6c <xTaskRemoveFromEventList>
 800f280:	4603      	mov	r3, r0
 800f282:	2b00      	cmp	r3, #0
 800f284:	d001      	beq.n	800f28a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f286:	f000 fd4b 	bl	800fd20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f28a:	7bfb      	ldrb	r3, [r7, #15]
 800f28c:	3b01      	subs	r3, #1
 800f28e:	b2db      	uxtb	r3, r3
 800f290:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f296:	2b00      	cmp	r3, #0
 800f298:	dce9      	bgt.n	800f26e <prvUnlockQueue+0x16>
 800f29a:	e000      	b.n	800f29e <prvUnlockQueue+0x46>
					break;
 800f29c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	22ff      	movs	r2, #255	; 0xff
 800f2a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f2a6:	f001 f885 	bl	80103b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f2aa:	f001 f853 	bl	8010354 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f2b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f2b6:	e011      	b.n	800f2dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	691b      	ldr	r3, [r3, #16]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d012      	beq.n	800f2e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	3310      	adds	r3, #16
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	f000 fc51 	bl	800fb6c <xTaskRemoveFromEventList>
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d001      	beq.n	800f2d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f2d0:	f000 fd26 	bl	800fd20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f2d4:	7bbb      	ldrb	r3, [r7, #14]
 800f2d6:	3b01      	subs	r3, #1
 800f2d8:	b2db      	uxtb	r3, r3
 800f2da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f2dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	dce9      	bgt.n	800f2b8 <prvUnlockQueue+0x60>
 800f2e4:	e000      	b.n	800f2e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f2e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	22ff      	movs	r2, #255	; 0xff
 800f2ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f2f0:	f001 f860 	bl	80103b4 <vPortExitCritical>
}
 800f2f4:	bf00      	nop
 800f2f6:	3710      	adds	r7, #16
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	bd80      	pop	{r7, pc}

0800f2fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b084      	sub	sp, #16
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f304:	f001 f826 	bl	8010354 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d102      	bne.n	800f316 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f310:	2301      	movs	r3, #1
 800f312:	60fb      	str	r3, [r7, #12]
 800f314:	e001      	b.n	800f31a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f316:	2300      	movs	r3, #0
 800f318:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f31a:	f001 f84b 	bl	80103b4 <vPortExitCritical>

	return xReturn;
 800f31e:	68fb      	ldr	r3, [r7, #12]
}
 800f320:	4618      	mov	r0, r3
 800f322:	3710      	adds	r7, #16
 800f324:	46bd      	mov	sp, r7
 800f326:	bd80      	pop	{r7, pc}

0800f328 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b084      	sub	sp, #16
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f330:	f001 f810 	bl	8010354 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f33c:	429a      	cmp	r2, r3
 800f33e:	d102      	bne.n	800f346 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f340:	2301      	movs	r3, #1
 800f342:	60fb      	str	r3, [r7, #12]
 800f344:	e001      	b.n	800f34a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f346:	2300      	movs	r3, #0
 800f348:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f34a:	f001 f833 	bl	80103b4 <vPortExitCritical>

	return xReturn;
 800f34e:	68fb      	ldr	r3, [r7, #12]
}
 800f350:	4618      	mov	r0, r3
 800f352:	3710      	adds	r7, #16
 800f354:	46bd      	mov	sp, r7
 800f356:	bd80      	pop	{r7, pc}

0800f358 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b08e      	sub	sp, #56	; 0x38
 800f35c:	af04      	add	r7, sp, #16
 800f35e:	60f8      	str	r0, [r7, #12]
 800f360:	60b9      	str	r1, [r7, #8]
 800f362:	607a      	str	r2, [r7, #4]
 800f364:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d10a      	bne.n	800f382 <xTaskCreateStatic+0x2a>
	__asm volatile
 800f36c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f370:	f383 8811 	msr	BASEPRI, r3
 800f374:	f3bf 8f6f 	isb	sy
 800f378:	f3bf 8f4f 	dsb	sy
 800f37c:	623b      	str	r3, [r7, #32]
}
 800f37e:	bf00      	nop
 800f380:	e7fe      	b.n	800f380 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f384:	2b00      	cmp	r3, #0
 800f386:	d10a      	bne.n	800f39e <xTaskCreateStatic+0x46>
	__asm volatile
 800f388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f38c:	f383 8811 	msr	BASEPRI, r3
 800f390:	f3bf 8f6f 	isb	sy
 800f394:	f3bf 8f4f 	dsb	sy
 800f398:	61fb      	str	r3, [r7, #28]
}
 800f39a:	bf00      	nop
 800f39c:	e7fe      	b.n	800f39c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f39e:	2354      	movs	r3, #84	; 0x54
 800f3a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f3a2:	693b      	ldr	r3, [r7, #16]
 800f3a4:	2b54      	cmp	r3, #84	; 0x54
 800f3a6:	d00a      	beq.n	800f3be <xTaskCreateStatic+0x66>
	__asm volatile
 800f3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3ac:	f383 8811 	msr	BASEPRI, r3
 800f3b0:	f3bf 8f6f 	isb	sy
 800f3b4:	f3bf 8f4f 	dsb	sy
 800f3b8:	61bb      	str	r3, [r7, #24]
}
 800f3ba:	bf00      	nop
 800f3bc:	e7fe      	b.n	800f3bc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f3be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d01e      	beq.n	800f404 <xTaskCreateStatic+0xac>
 800f3c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d01b      	beq.n	800f404 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f3d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3d8:	2202      	movs	r2, #2
 800f3da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f3de:	2300      	movs	r3, #0
 800f3e0:	9303      	str	r3, [sp, #12]
 800f3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3e4:	9302      	str	r3, [sp, #8]
 800f3e6:	f107 0314 	add.w	r3, r7, #20
 800f3ea:	9301      	str	r3, [sp, #4]
 800f3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ee:	9300      	str	r3, [sp, #0]
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	687a      	ldr	r2, [r7, #4]
 800f3f4:	68b9      	ldr	r1, [r7, #8]
 800f3f6:	68f8      	ldr	r0, [r7, #12]
 800f3f8:	f000 f850 	bl	800f49c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f3fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f3fe:	f000 f8d5 	bl	800f5ac <prvAddNewTaskToReadyList>
 800f402:	e001      	b.n	800f408 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f404:	2300      	movs	r3, #0
 800f406:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f408:	697b      	ldr	r3, [r7, #20]
	}
 800f40a:	4618      	mov	r0, r3
 800f40c:	3728      	adds	r7, #40	; 0x28
 800f40e:	46bd      	mov	sp, r7
 800f410:	bd80      	pop	{r7, pc}

0800f412 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f412:	b580      	push	{r7, lr}
 800f414:	b08c      	sub	sp, #48	; 0x30
 800f416:	af04      	add	r7, sp, #16
 800f418:	60f8      	str	r0, [r7, #12]
 800f41a:	60b9      	str	r1, [r7, #8]
 800f41c:	603b      	str	r3, [r7, #0]
 800f41e:	4613      	mov	r3, r2
 800f420:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f422:	88fb      	ldrh	r3, [r7, #6]
 800f424:	009b      	lsls	r3, r3, #2
 800f426:	4618      	mov	r0, r3
 800f428:	f001 f8b6 	bl	8010598 <pvPortMalloc>
 800f42c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f42e:	697b      	ldr	r3, [r7, #20]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d00e      	beq.n	800f452 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f434:	2054      	movs	r0, #84	; 0x54
 800f436:	f001 f8af 	bl	8010598 <pvPortMalloc>
 800f43a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f43c:	69fb      	ldr	r3, [r7, #28]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d003      	beq.n	800f44a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f442:	69fb      	ldr	r3, [r7, #28]
 800f444:	697a      	ldr	r2, [r7, #20]
 800f446:	631a      	str	r2, [r3, #48]	; 0x30
 800f448:	e005      	b.n	800f456 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f44a:	6978      	ldr	r0, [r7, #20]
 800f44c:	f001 f970 	bl	8010730 <vPortFree>
 800f450:	e001      	b.n	800f456 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f452:	2300      	movs	r3, #0
 800f454:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f456:	69fb      	ldr	r3, [r7, #28]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d017      	beq.n	800f48c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f45c:	69fb      	ldr	r3, [r7, #28]
 800f45e:	2200      	movs	r2, #0
 800f460:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f464:	88fa      	ldrh	r2, [r7, #6]
 800f466:	2300      	movs	r3, #0
 800f468:	9303      	str	r3, [sp, #12]
 800f46a:	69fb      	ldr	r3, [r7, #28]
 800f46c:	9302      	str	r3, [sp, #8]
 800f46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f470:	9301      	str	r3, [sp, #4]
 800f472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f474:	9300      	str	r3, [sp, #0]
 800f476:	683b      	ldr	r3, [r7, #0]
 800f478:	68b9      	ldr	r1, [r7, #8]
 800f47a:	68f8      	ldr	r0, [r7, #12]
 800f47c:	f000 f80e 	bl	800f49c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f480:	69f8      	ldr	r0, [r7, #28]
 800f482:	f000 f893 	bl	800f5ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f486:	2301      	movs	r3, #1
 800f488:	61bb      	str	r3, [r7, #24]
 800f48a:	e002      	b.n	800f492 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f48c:	f04f 33ff 	mov.w	r3, #4294967295
 800f490:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f492:	69bb      	ldr	r3, [r7, #24]
	}
 800f494:	4618      	mov	r0, r3
 800f496:	3720      	adds	r7, #32
 800f498:	46bd      	mov	sp, r7
 800f49a:	bd80      	pop	{r7, pc}

0800f49c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b088      	sub	sp, #32
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	60f8      	str	r0, [r7, #12]
 800f4a4:	60b9      	str	r1, [r7, #8]
 800f4a6:	607a      	str	r2, [r7, #4]
 800f4a8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f4b4:	3b01      	subs	r3, #1
 800f4b6:	009b      	lsls	r3, r3, #2
 800f4b8:	4413      	add	r3, r2
 800f4ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f4bc:	69bb      	ldr	r3, [r7, #24]
 800f4be:	f023 0307 	bic.w	r3, r3, #7
 800f4c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f4c4:	69bb      	ldr	r3, [r7, #24]
 800f4c6:	f003 0307 	and.w	r3, r3, #7
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d00a      	beq.n	800f4e4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800f4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4d2:	f383 8811 	msr	BASEPRI, r3
 800f4d6:	f3bf 8f6f 	isb	sy
 800f4da:	f3bf 8f4f 	dsb	sy
 800f4de:	617b      	str	r3, [r7, #20]
}
 800f4e0:	bf00      	nop
 800f4e2:	e7fe      	b.n	800f4e2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f4e4:	68bb      	ldr	r3, [r7, #8]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d01f      	beq.n	800f52a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	61fb      	str	r3, [r7, #28]
 800f4ee:	e012      	b.n	800f516 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f4f0:	68ba      	ldr	r2, [r7, #8]
 800f4f2:	69fb      	ldr	r3, [r7, #28]
 800f4f4:	4413      	add	r3, r2
 800f4f6:	7819      	ldrb	r1, [r3, #0]
 800f4f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4fa:	69fb      	ldr	r3, [r7, #28]
 800f4fc:	4413      	add	r3, r2
 800f4fe:	3334      	adds	r3, #52	; 0x34
 800f500:	460a      	mov	r2, r1
 800f502:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f504:	68ba      	ldr	r2, [r7, #8]
 800f506:	69fb      	ldr	r3, [r7, #28]
 800f508:	4413      	add	r3, r2
 800f50a:	781b      	ldrb	r3, [r3, #0]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d006      	beq.n	800f51e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f510:	69fb      	ldr	r3, [r7, #28]
 800f512:	3301      	adds	r3, #1
 800f514:	61fb      	str	r3, [r7, #28]
 800f516:	69fb      	ldr	r3, [r7, #28]
 800f518:	2b0f      	cmp	r3, #15
 800f51a:	d9e9      	bls.n	800f4f0 <prvInitialiseNewTask+0x54>
 800f51c:	e000      	b.n	800f520 <prvInitialiseNewTask+0x84>
			{
				break;
 800f51e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f522:	2200      	movs	r2, #0
 800f524:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f528:	e003      	b.n	800f532 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f52c:	2200      	movs	r2, #0
 800f52e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f534:	2b06      	cmp	r3, #6
 800f536:	d901      	bls.n	800f53c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f538:	2306      	movs	r3, #6
 800f53a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f53e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f540:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f544:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f546:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f54a:	2200      	movs	r2, #0
 800f54c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f550:	3304      	adds	r3, #4
 800f552:	4618      	mov	r0, r3
 800f554:	f7ff f8f6 	bl	800e744 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f55a:	3318      	adds	r3, #24
 800f55c:	4618      	mov	r0, r3
 800f55e:	f7ff f8f1 	bl	800e744 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f566:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f56a:	f1c3 0207 	rsb	r2, r3, #7
 800f56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f570:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f576:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f57a:	2200      	movs	r2, #0
 800f57c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f580:	2200      	movs	r2, #0
 800f582:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f586:	683a      	ldr	r2, [r7, #0]
 800f588:	68f9      	ldr	r1, [r7, #12]
 800f58a:	69b8      	ldr	r0, [r7, #24]
 800f58c:	f000 fdb4 	bl	80100f8 <pxPortInitialiseStack>
 800f590:	4602      	mov	r2, r0
 800f592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f594:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d002      	beq.n	800f5a2 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f59e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f5a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f5a2:	bf00      	nop
 800f5a4:	3720      	adds	r7, #32
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bd80      	pop	{r7, pc}
	...

0800f5ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b082      	sub	sp, #8
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f5b4:	f000 fece 	bl	8010354 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f5b8:	4b2a      	ldr	r3, [pc, #168]	; (800f664 <prvAddNewTaskToReadyList+0xb8>)
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	3301      	adds	r3, #1
 800f5be:	4a29      	ldr	r2, [pc, #164]	; (800f664 <prvAddNewTaskToReadyList+0xb8>)
 800f5c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f5c2:	4b29      	ldr	r3, [pc, #164]	; (800f668 <prvAddNewTaskToReadyList+0xbc>)
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d109      	bne.n	800f5de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f5ca:	4a27      	ldr	r2, [pc, #156]	; (800f668 <prvAddNewTaskToReadyList+0xbc>)
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f5d0:	4b24      	ldr	r3, [pc, #144]	; (800f664 <prvAddNewTaskToReadyList+0xb8>)
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	2b01      	cmp	r3, #1
 800f5d6:	d110      	bne.n	800f5fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f5d8:	f000 fbc6 	bl	800fd68 <prvInitialiseTaskLists>
 800f5dc:	e00d      	b.n	800f5fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f5de:	4b23      	ldr	r3, [pc, #140]	; (800f66c <prvAddNewTaskToReadyList+0xc0>)
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d109      	bne.n	800f5fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f5e6:	4b20      	ldr	r3, [pc, #128]	; (800f668 <prvAddNewTaskToReadyList+0xbc>)
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5f0:	429a      	cmp	r2, r3
 800f5f2:	d802      	bhi.n	800f5fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f5f4:	4a1c      	ldr	r2, [pc, #112]	; (800f668 <prvAddNewTaskToReadyList+0xbc>)
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f5fa:	4b1d      	ldr	r3, [pc, #116]	; (800f670 <prvAddNewTaskToReadyList+0xc4>)
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	3301      	adds	r3, #1
 800f600:	4a1b      	ldr	r2, [pc, #108]	; (800f670 <prvAddNewTaskToReadyList+0xc4>)
 800f602:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f608:	2201      	movs	r2, #1
 800f60a:	409a      	lsls	r2, r3
 800f60c:	4b19      	ldr	r3, [pc, #100]	; (800f674 <prvAddNewTaskToReadyList+0xc8>)
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	4313      	orrs	r3, r2
 800f612:	4a18      	ldr	r2, [pc, #96]	; (800f674 <prvAddNewTaskToReadyList+0xc8>)
 800f614:	6013      	str	r3, [r2, #0]
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f61a:	4613      	mov	r3, r2
 800f61c:	009b      	lsls	r3, r3, #2
 800f61e:	4413      	add	r3, r2
 800f620:	009b      	lsls	r3, r3, #2
 800f622:	4a15      	ldr	r2, [pc, #84]	; (800f678 <prvAddNewTaskToReadyList+0xcc>)
 800f624:	441a      	add	r2, r3
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	3304      	adds	r3, #4
 800f62a:	4619      	mov	r1, r3
 800f62c:	4610      	mov	r0, r2
 800f62e:	f7ff f896 	bl	800e75e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f632:	f000 febf 	bl	80103b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f636:	4b0d      	ldr	r3, [pc, #52]	; (800f66c <prvAddNewTaskToReadyList+0xc0>)
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d00e      	beq.n	800f65c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f63e:	4b0a      	ldr	r3, [pc, #40]	; (800f668 <prvAddNewTaskToReadyList+0xbc>)
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f648:	429a      	cmp	r2, r3
 800f64a:	d207      	bcs.n	800f65c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f64c:	4b0b      	ldr	r3, [pc, #44]	; (800f67c <prvAddNewTaskToReadyList+0xd0>)
 800f64e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f652:	601a      	str	r2, [r3, #0]
 800f654:	f3bf 8f4f 	dsb	sy
 800f658:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f65c:	bf00      	nop
 800f65e:	3708      	adds	r7, #8
 800f660:	46bd      	mov	sp, r7
 800f662:	bd80      	pop	{r7, pc}
 800f664:	20000680 	.word	0x20000680
 800f668:	20000580 	.word	0x20000580
 800f66c:	2000068c 	.word	0x2000068c
 800f670:	2000069c 	.word	0x2000069c
 800f674:	20000688 	.word	0x20000688
 800f678:	20000584 	.word	0x20000584
 800f67c:	e000ed04 	.word	0xe000ed04

0800f680 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f680:	b580      	push	{r7, lr}
 800f682:	b084      	sub	sp, #16
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f688:	2300      	movs	r3, #0
 800f68a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d017      	beq.n	800f6c2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f692:	4b13      	ldr	r3, [pc, #76]	; (800f6e0 <vTaskDelay+0x60>)
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d00a      	beq.n	800f6b0 <vTaskDelay+0x30>
	__asm volatile
 800f69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f69e:	f383 8811 	msr	BASEPRI, r3
 800f6a2:	f3bf 8f6f 	isb	sy
 800f6a6:	f3bf 8f4f 	dsb	sy
 800f6aa:	60bb      	str	r3, [r7, #8]
}
 800f6ac:	bf00      	nop
 800f6ae:	e7fe      	b.n	800f6ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f6b0:	f000 f87a 	bl	800f7a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f6b4:	2100      	movs	r1, #0
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	f000 fcb8 	bl	801002c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f6bc:	f000 f882 	bl	800f7c4 <xTaskResumeAll>
 800f6c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d107      	bne.n	800f6d8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f6c8:	4b06      	ldr	r3, [pc, #24]	; (800f6e4 <vTaskDelay+0x64>)
 800f6ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6ce:	601a      	str	r2, [r3, #0]
 800f6d0:	f3bf 8f4f 	dsb	sy
 800f6d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f6d8:	bf00      	nop
 800f6da:	3710      	adds	r7, #16
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	bd80      	pop	{r7, pc}
 800f6e0:	200006a8 	.word	0x200006a8
 800f6e4:	e000ed04 	.word	0xe000ed04

0800f6e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b08a      	sub	sp, #40	; 0x28
 800f6ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f6f6:	463a      	mov	r2, r7
 800f6f8:	1d39      	adds	r1, r7, #4
 800f6fa:	f107 0308 	add.w	r3, r7, #8
 800f6fe:	4618      	mov	r0, r3
 800f700:	f7f1 fcc2 	bl	8001088 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f704:	6839      	ldr	r1, [r7, #0]
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	68ba      	ldr	r2, [r7, #8]
 800f70a:	9202      	str	r2, [sp, #8]
 800f70c:	9301      	str	r3, [sp, #4]
 800f70e:	2300      	movs	r3, #0
 800f710:	9300      	str	r3, [sp, #0]
 800f712:	2300      	movs	r3, #0
 800f714:	460a      	mov	r2, r1
 800f716:	491e      	ldr	r1, [pc, #120]	; (800f790 <vTaskStartScheduler+0xa8>)
 800f718:	481e      	ldr	r0, [pc, #120]	; (800f794 <vTaskStartScheduler+0xac>)
 800f71a:	f7ff fe1d 	bl	800f358 <xTaskCreateStatic>
 800f71e:	4603      	mov	r3, r0
 800f720:	4a1d      	ldr	r2, [pc, #116]	; (800f798 <vTaskStartScheduler+0xb0>)
 800f722:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f724:	4b1c      	ldr	r3, [pc, #112]	; (800f798 <vTaskStartScheduler+0xb0>)
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d002      	beq.n	800f732 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f72c:	2301      	movs	r3, #1
 800f72e:	617b      	str	r3, [r7, #20]
 800f730:	e001      	b.n	800f736 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f732:	2300      	movs	r3, #0
 800f734:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f736:	697b      	ldr	r3, [r7, #20]
 800f738:	2b01      	cmp	r3, #1
 800f73a:	d116      	bne.n	800f76a <vTaskStartScheduler+0x82>
	__asm volatile
 800f73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f740:	f383 8811 	msr	BASEPRI, r3
 800f744:	f3bf 8f6f 	isb	sy
 800f748:	f3bf 8f4f 	dsb	sy
 800f74c:	613b      	str	r3, [r7, #16]
}
 800f74e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f750:	4b12      	ldr	r3, [pc, #72]	; (800f79c <vTaskStartScheduler+0xb4>)
 800f752:	f04f 32ff 	mov.w	r2, #4294967295
 800f756:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f758:	4b11      	ldr	r3, [pc, #68]	; (800f7a0 <vTaskStartScheduler+0xb8>)
 800f75a:	2201      	movs	r2, #1
 800f75c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f75e:	4b11      	ldr	r3, [pc, #68]	; (800f7a4 <vTaskStartScheduler+0xbc>)
 800f760:	2200      	movs	r2, #0
 800f762:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f764:	f000 fd54 	bl	8010210 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f768:	e00e      	b.n	800f788 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f76a:	697b      	ldr	r3, [r7, #20]
 800f76c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f770:	d10a      	bne.n	800f788 <vTaskStartScheduler+0xa0>
	__asm volatile
 800f772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f776:	f383 8811 	msr	BASEPRI, r3
 800f77a:	f3bf 8f6f 	isb	sy
 800f77e:	f3bf 8f4f 	dsb	sy
 800f782:	60fb      	str	r3, [r7, #12]
}
 800f784:	bf00      	nop
 800f786:	e7fe      	b.n	800f786 <vTaskStartScheduler+0x9e>
}
 800f788:	bf00      	nop
 800f78a:	3718      	adds	r7, #24
 800f78c:	46bd      	mov	sp, r7
 800f78e:	bd80      	pop	{r7, pc}
 800f790:	08011c6c 	.word	0x08011c6c
 800f794:	0800fd39 	.word	0x0800fd39
 800f798:	200006a4 	.word	0x200006a4
 800f79c:	200006a0 	.word	0x200006a0
 800f7a0:	2000068c 	.word	0x2000068c
 800f7a4:	20000684 	.word	0x20000684

0800f7a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f7a8:	b480      	push	{r7}
 800f7aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f7ac:	4b04      	ldr	r3, [pc, #16]	; (800f7c0 <vTaskSuspendAll+0x18>)
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	3301      	adds	r3, #1
 800f7b2:	4a03      	ldr	r2, [pc, #12]	; (800f7c0 <vTaskSuspendAll+0x18>)
 800f7b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f7b6:	bf00      	nop
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7be:	4770      	bx	lr
 800f7c0:	200006a8 	.word	0x200006a8

0800f7c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b084      	sub	sp, #16
 800f7c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f7d2:	4b41      	ldr	r3, [pc, #260]	; (800f8d8 <xTaskResumeAll+0x114>)
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d10a      	bne.n	800f7f0 <xTaskResumeAll+0x2c>
	__asm volatile
 800f7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7de:	f383 8811 	msr	BASEPRI, r3
 800f7e2:	f3bf 8f6f 	isb	sy
 800f7e6:	f3bf 8f4f 	dsb	sy
 800f7ea:	603b      	str	r3, [r7, #0]
}
 800f7ec:	bf00      	nop
 800f7ee:	e7fe      	b.n	800f7ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f7f0:	f000 fdb0 	bl	8010354 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f7f4:	4b38      	ldr	r3, [pc, #224]	; (800f8d8 <xTaskResumeAll+0x114>)
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	3b01      	subs	r3, #1
 800f7fa:	4a37      	ldr	r2, [pc, #220]	; (800f8d8 <xTaskResumeAll+0x114>)
 800f7fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f7fe:	4b36      	ldr	r3, [pc, #216]	; (800f8d8 <xTaskResumeAll+0x114>)
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d161      	bne.n	800f8ca <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f806:	4b35      	ldr	r3, [pc, #212]	; (800f8dc <xTaskResumeAll+0x118>)
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d05d      	beq.n	800f8ca <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f80e:	e02e      	b.n	800f86e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f810:	4b33      	ldr	r3, [pc, #204]	; (800f8e0 <xTaskResumeAll+0x11c>)
 800f812:	68db      	ldr	r3, [r3, #12]
 800f814:	68db      	ldr	r3, [r3, #12]
 800f816:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	3318      	adds	r3, #24
 800f81c:	4618      	mov	r0, r3
 800f81e:	f7fe fffb 	bl	800e818 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	3304      	adds	r3, #4
 800f826:	4618      	mov	r0, r3
 800f828:	f7fe fff6 	bl	800e818 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f830:	2201      	movs	r2, #1
 800f832:	409a      	lsls	r2, r3
 800f834:	4b2b      	ldr	r3, [pc, #172]	; (800f8e4 <xTaskResumeAll+0x120>)
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	4313      	orrs	r3, r2
 800f83a:	4a2a      	ldr	r2, [pc, #168]	; (800f8e4 <xTaskResumeAll+0x120>)
 800f83c:	6013      	str	r3, [r2, #0]
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f842:	4613      	mov	r3, r2
 800f844:	009b      	lsls	r3, r3, #2
 800f846:	4413      	add	r3, r2
 800f848:	009b      	lsls	r3, r3, #2
 800f84a:	4a27      	ldr	r2, [pc, #156]	; (800f8e8 <xTaskResumeAll+0x124>)
 800f84c:	441a      	add	r2, r3
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	3304      	adds	r3, #4
 800f852:	4619      	mov	r1, r3
 800f854:	4610      	mov	r0, r2
 800f856:	f7fe ff82 	bl	800e75e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f85e:	4b23      	ldr	r3, [pc, #140]	; (800f8ec <xTaskResumeAll+0x128>)
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f864:	429a      	cmp	r2, r3
 800f866:	d302      	bcc.n	800f86e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800f868:	4b21      	ldr	r3, [pc, #132]	; (800f8f0 <xTaskResumeAll+0x12c>)
 800f86a:	2201      	movs	r2, #1
 800f86c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f86e:	4b1c      	ldr	r3, [pc, #112]	; (800f8e0 <xTaskResumeAll+0x11c>)
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d1cc      	bne.n	800f810 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d001      	beq.n	800f880 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f87c:	f000 fb12 	bl	800fea4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f880:	4b1c      	ldr	r3, [pc, #112]	; (800f8f4 <xTaskResumeAll+0x130>)
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d010      	beq.n	800f8ae <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f88c:	f000 f836 	bl	800f8fc <xTaskIncrementTick>
 800f890:	4603      	mov	r3, r0
 800f892:	2b00      	cmp	r3, #0
 800f894:	d002      	beq.n	800f89c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800f896:	4b16      	ldr	r3, [pc, #88]	; (800f8f0 <xTaskResumeAll+0x12c>)
 800f898:	2201      	movs	r2, #1
 800f89a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	3b01      	subs	r3, #1
 800f8a0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d1f1      	bne.n	800f88c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800f8a8:	4b12      	ldr	r3, [pc, #72]	; (800f8f4 <xTaskResumeAll+0x130>)
 800f8aa:	2200      	movs	r2, #0
 800f8ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f8ae:	4b10      	ldr	r3, [pc, #64]	; (800f8f0 <xTaskResumeAll+0x12c>)
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d009      	beq.n	800f8ca <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f8b6:	2301      	movs	r3, #1
 800f8b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f8ba:	4b0f      	ldr	r3, [pc, #60]	; (800f8f8 <xTaskResumeAll+0x134>)
 800f8bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8c0:	601a      	str	r2, [r3, #0]
 800f8c2:	f3bf 8f4f 	dsb	sy
 800f8c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f8ca:	f000 fd73 	bl	80103b4 <vPortExitCritical>

	return xAlreadyYielded;
 800f8ce:	68bb      	ldr	r3, [r7, #8]
}
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	3710      	adds	r7, #16
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	bd80      	pop	{r7, pc}
 800f8d8:	200006a8 	.word	0x200006a8
 800f8dc:	20000680 	.word	0x20000680
 800f8e0:	20000640 	.word	0x20000640
 800f8e4:	20000688 	.word	0x20000688
 800f8e8:	20000584 	.word	0x20000584
 800f8ec:	20000580 	.word	0x20000580
 800f8f0:	20000694 	.word	0x20000694
 800f8f4:	20000690 	.word	0x20000690
 800f8f8:	e000ed04 	.word	0xe000ed04

0800f8fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b086      	sub	sp, #24
 800f900:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f902:	2300      	movs	r3, #0
 800f904:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f906:	4b4e      	ldr	r3, [pc, #312]	; (800fa40 <xTaskIncrementTick+0x144>)
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	f040 808e 	bne.w	800fa2c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f910:	4b4c      	ldr	r3, [pc, #304]	; (800fa44 <xTaskIncrementTick+0x148>)
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	3301      	adds	r3, #1
 800f916:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f918:	4a4a      	ldr	r2, [pc, #296]	; (800fa44 <xTaskIncrementTick+0x148>)
 800f91a:	693b      	ldr	r3, [r7, #16]
 800f91c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f91e:	693b      	ldr	r3, [r7, #16]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d120      	bne.n	800f966 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f924:	4b48      	ldr	r3, [pc, #288]	; (800fa48 <xTaskIncrementTick+0x14c>)
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d00a      	beq.n	800f944 <xTaskIncrementTick+0x48>
	__asm volatile
 800f92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f932:	f383 8811 	msr	BASEPRI, r3
 800f936:	f3bf 8f6f 	isb	sy
 800f93a:	f3bf 8f4f 	dsb	sy
 800f93e:	603b      	str	r3, [r7, #0]
}
 800f940:	bf00      	nop
 800f942:	e7fe      	b.n	800f942 <xTaskIncrementTick+0x46>
 800f944:	4b40      	ldr	r3, [pc, #256]	; (800fa48 <xTaskIncrementTick+0x14c>)
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	60fb      	str	r3, [r7, #12]
 800f94a:	4b40      	ldr	r3, [pc, #256]	; (800fa4c <xTaskIncrementTick+0x150>)
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	4a3e      	ldr	r2, [pc, #248]	; (800fa48 <xTaskIncrementTick+0x14c>)
 800f950:	6013      	str	r3, [r2, #0]
 800f952:	4a3e      	ldr	r2, [pc, #248]	; (800fa4c <xTaskIncrementTick+0x150>)
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	6013      	str	r3, [r2, #0]
 800f958:	4b3d      	ldr	r3, [pc, #244]	; (800fa50 <xTaskIncrementTick+0x154>)
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	3301      	adds	r3, #1
 800f95e:	4a3c      	ldr	r2, [pc, #240]	; (800fa50 <xTaskIncrementTick+0x154>)
 800f960:	6013      	str	r3, [r2, #0]
 800f962:	f000 fa9f 	bl	800fea4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f966:	4b3b      	ldr	r3, [pc, #236]	; (800fa54 <xTaskIncrementTick+0x158>)
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	693a      	ldr	r2, [r7, #16]
 800f96c:	429a      	cmp	r2, r3
 800f96e:	d348      	bcc.n	800fa02 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f970:	4b35      	ldr	r3, [pc, #212]	; (800fa48 <xTaskIncrementTick+0x14c>)
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d104      	bne.n	800f984 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f97a:	4b36      	ldr	r3, [pc, #216]	; (800fa54 <xTaskIncrementTick+0x158>)
 800f97c:	f04f 32ff 	mov.w	r2, #4294967295
 800f980:	601a      	str	r2, [r3, #0]
					break;
 800f982:	e03e      	b.n	800fa02 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f984:	4b30      	ldr	r3, [pc, #192]	; (800fa48 <xTaskIncrementTick+0x14c>)
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	68db      	ldr	r3, [r3, #12]
 800f98a:	68db      	ldr	r3, [r3, #12]
 800f98c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f98e:	68bb      	ldr	r3, [r7, #8]
 800f990:	685b      	ldr	r3, [r3, #4]
 800f992:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f994:	693a      	ldr	r2, [r7, #16]
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	429a      	cmp	r2, r3
 800f99a:	d203      	bcs.n	800f9a4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f99c:	4a2d      	ldr	r2, [pc, #180]	; (800fa54 <xTaskIncrementTick+0x158>)
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f9a2:	e02e      	b.n	800fa02 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f9a4:	68bb      	ldr	r3, [r7, #8]
 800f9a6:	3304      	adds	r3, #4
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	f7fe ff35 	bl	800e818 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f9ae:	68bb      	ldr	r3, [r7, #8]
 800f9b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d004      	beq.n	800f9c0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f9b6:	68bb      	ldr	r3, [r7, #8]
 800f9b8:	3318      	adds	r3, #24
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	f7fe ff2c 	bl	800e818 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f9c0:	68bb      	ldr	r3, [r7, #8]
 800f9c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9c4:	2201      	movs	r2, #1
 800f9c6:	409a      	lsls	r2, r3
 800f9c8:	4b23      	ldr	r3, [pc, #140]	; (800fa58 <xTaskIncrementTick+0x15c>)
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	4313      	orrs	r3, r2
 800f9ce:	4a22      	ldr	r2, [pc, #136]	; (800fa58 <xTaskIncrementTick+0x15c>)
 800f9d0:	6013      	str	r3, [r2, #0]
 800f9d2:	68bb      	ldr	r3, [r7, #8]
 800f9d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9d6:	4613      	mov	r3, r2
 800f9d8:	009b      	lsls	r3, r3, #2
 800f9da:	4413      	add	r3, r2
 800f9dc:	009b      	lsls	r3, r3, #2
 800f9de:	4a1f      	ldr	r2, [pc, #124]	; (800fa5c <xTaskIncrementTick+0x160>)
 800f9e0:	441a      	add	r2, r3
 800f9e2:	68bb      	ldr	r3, [r7, #8]
 800f9e4:	3304      	adds	r3, #4
 800f9e6:	4619      	mov	r1, r3
 800f9e8:	4610      	mov	r0, r2
 800f9ea:	f7fe feb8 	bl	800e75e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f9ee:	68bb      	ldr	r3, [r7, #8]
 800f9f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9f2:	4b1b      	ldr	r3, [pc, #108]	; (800fa60 <xTaskIncrementTick+0x164>)
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9f8:	429a      	cmp	r2, r3
 800f9fa:	d3b9      	bcc.n	800f970 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f9fc:	2301      	movs	r3, #1
 800f9fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fa00:	e7b6      	b.n	800f970 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fa02:	4b17      	ldr	r3, [pc, #92]	; (800fa60 <xTaskIncrementTick+0x164>)
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa08:	4914      	ldr	r1, [pc, #80]	; (800fa5c <xTaskIncrementTick+0x160>)
 800fa0a:	4613      	mov	r3, r2
 800fa0c:	009b      	lsls	r3, r3, #2
 800fa0e:	4413      	add	r3, r2
 800fa10:	009b      	lsls	r3, r3, #2
 800fa12:	440b      	add	r3, r1
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	2b01      	cmp	r3, #1
 800fa18:	d901      	bls.n	800fa1e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800fa1a:	2301      	movs	r3, #1
 800fa1c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fa1e:	4b11      	ldr	r3, [pc, #68]	; (800fa64 <xTaskIncrementTick+0x168>)
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d007      	beq.n	800fa36 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800fa26:	2301      	movs	r3, #1
 800fa28:	617b      	str	r3, [r7, #20]
 800fa2a:	e004      	b.n	800fa36 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fa2c:	4b0e      	ldr	r3, [pc, #56]	; (800fa68 <xTaskIncrementTick+0x16c>)
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	3301      	adds	r3, #1
 800fa32:	4a0d      	ldr	r2, [pc, #52]	; (800fa68 <xTaskIncrementTick+0x16c>)
 800fa34:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fa36:	697b      	ldr	r3, [r7, #20]
}
 800fa38:	4618      	mov	r0, r3
 800fa3a:	3718      	adds	r7, #24
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	bd80      	pop	{r7, pc}
 800fa40:	200006a8 	.word	0x200006a8
 800fa44:	20000684 	.word	0x20000684
 800fa48:	20000638 	.word	0x20000638
 800fa4c:	2000063c 	.word	0x2000063c
 800fa50:	20000698 	.word	0x20000698
 800fa54:	200006a0 	.word	0x200006a0
 800fa58:	20000688 	.word	0x20000688
 800fa5c:	20000584 	.word	0x20000584
 800fa60:	20000580 	.word	0x20000580
 800fa64:	20000694 	.word	0x20000694
 800fa68:	20000690 	.word	0x20000690

0800fa6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fa6c:	b480      	push	{r7}
 800fa6e:	b087      	sub	sp, #28
 800fa70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fa72:	4b27      	ldr	r3, [pc, #156]	; (800fb10 <vTaskSwitchContext+0xa4>)
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d003      	beq.n	800fa82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fa7a:	4b26      	ldr	r3, [pc, #152]	; (800fb14 <vTaskSwitchContext+0xa8>)
 800fa7c:	2201      	movs	r2, #1
 800fa7e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fa80:	e03f      	b.n	800fb02 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800fa82:	4b24      	ldr	r3, [pc, #144]	; (800fb14 <vTaskSwitchContext+0xa8>)
 800fa84:	2200      	movs	r2, #0
 800fa86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa88:	4b23      	ldr	r3, [pc, #140]	; (800fb18 <vTaskSwitchContext+0xac>)
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	fab3 f383 	clz	r3, r3
 800fa94:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800fa96:	7afb      	ldrb	r3, [r7, #11]
 800fa98:	f1c3 031f 	rsb	r3, r3, #31
 800fa9c:	617b      	str	r3, [r7, #20]
 800fa9e:	491f      	ldr	r1, [pc, #124]	; (800fb1c <vTaskSwitchContext+0xb0>)
 800faa0:	697a      	ldr	r2, [r7, #20]
 800faa2:	4613      	mov	r3, r2
 800faa4:	009b      	lsls	r3, r3, #2
 800faa6:	4413      	add	r3, r2
 800faa8:	009b      	lsls	r3, r3, #2
 800faaa:	440b      	add	r3, r1
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d10a      	bne.n	800fac8 <vTaskSwitchContext+0x5c>
	__asm volatile
 800fab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fab6:	f383 8811 	msr	BASEPRI, r3
 800faba:	f3bf 8f6f 	isb	sy
 800fabe:	f3bf 8f4f 	dsb	sy
 800fac2:	607b      	str	r3, [r7, #4]
}
 800fac4:	bf00      	nop
 800fac6:	e7fe      	b.n	800fac6 <vTaskSwitchContext+0x5a>
 800fac8:	697a      	ldr	r2, [r7, #20]
 800faca:	4613      	mov	r3, r2
 800facc:	009b      	lsls	r3, r3, #2
 800face:	4413      	add	r3, r2
 800fad0:	009b      	lsls	r3, r3, #2
 800fad2:	4a12      	ldr	r2, [pc, #72]	; (800fb1c <vTaskSwitchContext+0xb0>)
 800fad4:	4413      	add	r3, r2
 800fad6:	613b      	str	r3, [r7, #16]
 800fad8:	693b      	ldr	r3, [r7, #16]
 800fada:	685b      	ldr	r3, [r3, #4]
 800fadc:	685a      	ldr	r2, [r3, #4]
 800fade:	693b      	ldr	r3, [r7, #16]
 800fae0:	605a      	str	r2, [r3, #4]
 800fae2:	693b      	ldr	r3, [r7, #16]
 800fae4:	685a      	ldr	r2, [r3, #4]
 800fae6:	693b      	ldr	r3, [r7, #16]
 800fae8:	3308      	adds	r3, #8
 800faea:	429a      	cmp	r2, r3
 800faec:	d104      	bne.n	800faf8 <vTaskSwitchContext+0x8c>
 800faee:	693b      	ldr	r3, [r7, #16]
 800faf0:	685b      	ldr	r3, [r3, #4]
 800faf2:	685a      	ldr	r2, [r3, #4]
 800faf4:	693b      	ldr	r3, [r7, #16]
 800faf6:	605a      	str	r2, [r3, #4]
 800faf8:	693b      	ldr	r3, [r7, #16]
 800fafa:	685b      	ldr	r3, [r3, #4]
 800fafc:	68db      	ldr	r3, [r3, #12]
 800fafe:	4a08      	ldr	r2, [pc, #32]	; (800fb20 <vTaskSwitchContext+0xb4>)
 800fb00:	6013      	str	r3, [r2, #0]
}
 800fb02:	bf00      	nop
 800fb04:	371c      	adds	r7, #28
 800fb06:	46bd      	mov	sp, r7
 800fb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0c:	4770      	bx	lr
 800fb0e:	bf00      	nop
 800fb10:	200006a8 	.word	0x200006a8
 800fb14:	20000694 	.word	0x20000694
 800fb18:	20000688 	.word	0x20000688
 800fb1c:	20000584 	.word	0x20000584
 800fb20:	20000580 	.word	0x20000580

0800fb24 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b084      	sub	sp, #16
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
 800fb2c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d10a      	bne.n	800fb4a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800fb34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb38:	f383 8811 	msr	BASEPRI, r3
 800fb3c:	f3bf 8f6f 	isb	sy
 800fb40:	f3bf 8f4f 	dsb	sy
 800fb44:	60fb      	str	r3, [r7, #12]
}
 800fb46:	bf00      	nop
 800fb48:	e7fe      	b.n	800fb48 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fb4a:	4b07      	ldr	r3, [pc, #28]	; (800fb68 <vTaskPlaceOnEventList+0x44>)
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	3318      	adds	r3, #24
 800fb50:	4619      	mov	r1, r3
 800fb52:	6878      	ldr	r0, [r7, #4]
 800fb54:	f7fe fe27 	bl	800e7a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fb58:	2101      	movs	r1, #1
 800fb5a:	6838      	ldr	r0, [r7, #0]
 800fb5c:	f000 fa66 	bl	801002c <prvAddCurrentTaskToDelayedList>
}
 800fb60:	bf00      	nop
 800fb62:	3710      	adds	r7, #16
 800fb64:	46bd      	mov	sp, r7
 800fb66:	bd80      	pop	{r7, pc}
 800fb68:	20000580 	.word	0x20000580

0800fb6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b086      	sub	sp, #24
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	68db      	ldr	r3, [r3, #12]
 800fb78:	68db      	ldr	r3, [r3, #12]
 800fb7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fb7c:	693b      	ldr	r3, [r7, #16]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d10a      	bne.n	800fb98 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800fb82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb86:	f383 8811 	msr	BASEPRI, r3
 800fb8a:	f3bf 8f6f 	isb	sy
 800fb8e:	f3bf 8f4f 	dsb	sy
 800fb92:	60fb      	str	r3, [r7, #12]
}
 800fb94:	bf00      	nop
 800fb96:	e7fe      	b.n	800fb96 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fb98:	693b      	ldr	r3, [r7, #16]
 800fb9a:	3318      	adds	r3, #24
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	f7fe fe3b 	bl	800e818 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fba2:	4b1d      	ldr	r3, [pc, #116]	; (800fc18 <xTaskRemoveFromEventList+0xac>)
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d11c      	bne.n	800fbe4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fbaa:	693b      	ldr	r3, [r7, #16]
 800fbac:	3304      	adds	r3, #4
 800fbae:	4618      	mov	r0, r3
 800fbb0:	f7fe fe32 	bl	800e818 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fbb4:	693b      	ldr	r3, [r7, #16]
 800fbb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbb8:	2201      	movs	r2, #1
 800fbba:	409a      	lsls	r2, r3
 800fbbc:	4b17      	ldr	r3, [pc, #92]	; (800fc1c <xTaskRemoveFromEventList+0xb0>)
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	4313      	orrs	r3, r2
 800fbc2:	4a16      	ldr	r2, [pc, #88]	; (800fc1c <xTaskRemoveFromEventList+0xb0>)
 800fbc4:	6013      	str	r3, [r2, #0]
 800fbc6:	693b      	ldr	r3, [r7, #16]
 800fbc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbca:	4613      	mov	r3, r2
 800fbcc:	009b      	lsls	r3, r3, #2
 800fbce:	4413      	add	r3, r2
 800fbd0:	009b      	lsls	r3, r3, #2
 800fbd2:	4a13      	ldr	r2, [pc, #76]	; (800fc20 <xTaskRemoveFromEventList+0xb4>)
 800fbd4:	441a      	add	r2, r3
 800fbd6:	693b      	ldr	r3, [r7, #16]
 800fbd8:	3304      	adds	r3, #4
 800fbda:	4619      	mov	r1, r3
 800fbdc:	4610      	mov	r0, r2
 800fbde:	f7fe fdbe 	bl	800e75e <vListInsertEnd>
 800fbe2:	e005      	b.n	800fbf0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fbe4:	693b      	ldr	r3, [r7, #16]
 800fbe6:	3318      	adds	r3, #24
 800fbe8:	4619      	mov	r1, r3
 800fbea:	480e      	ldr	r0, [pc, #56]	; (800fc24 <xTaskRemoveFromEventList+0xb8>)
 800fbec:	f7fe fdb7 	bl	800e75e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fbf0:	693b      	ldr	r3, [r7, #16]
 800fbf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbf4:	4b0c      	ldr	r3, [pc, #48]	; (800fc28 <xTaskRemoveFromEventList+0xbc>)
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbfa:	429a      	cmp	r2, r3
 800fbfc:	d905      	bls.n	800fc0a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fbfe:	2301      	movs	r3, #1
 800fc00:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fc02:	4b0a      	ldr	r3, [pc, #40]	; (800fc2c <xTaskRemoveFromEventList+0xc0>)
 800fc04:	2201      	movs	r2, #1
 800fc06:	601a      	str	r2, [r3, #0]
 800fc08:	e001      	b.n	800fc0e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fc0e:	697b      	ldr	r3, [r7, #20]
}
 800fc10:	4618      	mov	r0, r3
 800fc12:	3718      	adds	r7, #24
 800fc14:	46bd      	mov	sp, r7
 800fc16:	bd80      	pop	{r7, pc}
 800fc18:	200006a8 	.word	0x200006a8
 800fc1c:	20000688 	.word	0x20000688
 800fc20:	20000584 	.word	0x20000584
 800fc24:	20000640 	.word	0x20000640
 800fc28:	20000580 	.word	0x20000580
 800fc2c:	20000694 	.word	0x20000694

0800fc30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fc30:	b480      	push	{r7}
 800fc32:	b083      	sub	sp, #12
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fc38:	4b06      	ldr	r3, [pc, #24]	; (800fc54 <vTaskInternalSetTimeOutState+0x24>)
 800fc3a:	681a      	ldr	r2, [r3, #0]
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fc40:	4b05      	ldr	r3, [pc, #20]	; (800fc58 <vTaskInternalSetTimeOutState+0x28>)
 800fc42:	681a      	ldr	r2, [r3, #0]
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	605a      	str	r2, [r3, #4]
}
 800fc48:	bf00      	nop
 800fc4a:	370c      	adds	r7, #12
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc52:	4770      	bx	lr
 800fc54:	20000698 	.word	0x20000698
 800fc58:	20000684 	.word	0x20000684

0800fc5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b088      	sub	sp, #32
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
 800fc64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d10a      	bne.n	800fc82 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800fc6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc70:	f383 8811 	msr	BASEPRI, r3
 800fc74:	f3bf 8f6f 	isb	sy
 800fc78:	f3bf 8f4f 	dsb	sy
 800fc7c:	613b      	str	r3, [r7, #16]
}
 800fc7e:	bf00      	nop
 800fc80:	e7fe      	b.n	800fc80 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800fc82:	683b      	ldr	r3, [r7, #0]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d10a      	bne.n	800fc9e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800fc88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc8c:	f383 8811 	msr	BASEPRI, r3
 800fc90:	f3bf 8f6f 	isb	sy
 800fc94:	f3bf 8f4f 	dsb	sy
 800fc98:	60fb      	str	r3, [r7, #12]
}
 800fc9a:	bf00      	nop
 800fc9c:	e7fe      	b.n	800fc9c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800fc9e:	f000 fb59 	bl	8010354 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fca2:	4b1d      	ldr	r3, [pc, #116]	; (800fd18 <xTaskCheckForTimeOut+0xbc>)
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	685b      	ldr	r3, [r3, #4]
 800fcac:	69ba      	ldr	r2, [r7, #24]
 800fcae:	1ad3      	subs	r3, r2, r3
 800fcb0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fcb2:	683b      	ldr	r3, [r7, #0]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcba:	d102      	bne.n	800fcc2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	61fb      	str	r3, [r7, #28]
 800fcc0:	e023      	b.n	800fd0a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	681a      	ldr	r2, [r3, #0]
 800fcc6:	4b15      	ldr	r3, [pc, #84]	; (800fd1c <xTaskCheckForTimeOut+0xc0>)
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	429a      	cmp	r2, r3
 800fccc:	d007      	beq.n	800fcde <xTaskCheckForTimeOut+0x82>
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	685b      	ldr	r3, [r3, #4]
 800fcd2:	69ba      	ldr	r2, [r7, #24]
 800fcd4:	429a      	cmp	r2, r3
 800fcd6:	d302      	bcc.n	800fcde <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fcd8:	2301      	movs	r3, #1
 800fcda:	61fb      	str	r3, [r7, #28]
 800fcdc:	e015      	b.n	800fd0a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fcde:	683b      	ldr	r3, [r7, #0]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	697a      	ldr	r2, [r7, #20]
 800fce4:	429a      	cmp	r2, r3
 800fce6:	d20b      	bcs.n	800fd00 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fce8:	683b      	ldr	r3, [r7, #0]
 800fcea:	681a      	ldr	r2, [r3, #0]
 800fcec:	697b      	ldr	r3, [r7, #20]
 800fcee:	1ad2      	subs	r2, r2, r3
 800fcf0:	683b      	ldr	r3, [r7, #0]
 800fcf2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fcf4:	6878      	ldr	r0, [r7, #4]
 800fcf6:	f7ff ff9b 	bl	800fc30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	61fb      	str	r3, [r7, #28]
 800fcfe:	e004      	b.n	800fd0a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800fd00:	683b      	ldr	r3, [r7, #0]
 800fd02:	2200      	movs	r2, #0
 800fd04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fd06:	2301      	movs	r3, #1
 800fd08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fd0a:	f000 fb53 	bl	80103b4 <vPortExitCritical>

	return xReturn;
 800fd0e:	69fb      	ldr	r3, [r7, #28]
}
 800fd10:	4618      	mov	r0, r3
 800fd12:	3720      	adds	r7, #32
 800fd14:	46bd      	mov	sp, r7
 800fd16:	bd80      	pop	{r7, pc}
 800fd18:	20000684 	.word	0x20000684
 800fd1c:	20000698 	.word	0x20000698

0800fd20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fd20:	b480      	push	{r7}
 800fd22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fd24:	4b03      	ldr	r3, [pc, #12]	; (800fd34 <vTaskMissedYield+0x14>)
 800fd26:	2201      	movs	r2, #1
 800fd28:	601a      	str	r2, [r3, #0]
}
 800fd2a:	bf00      	nop
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd32:	4770      	bx	lr
 800fd34:	20000694 	.word	0x20000694

0800fd38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b082      	sub	sp, #8
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fd40:	f000 f852 	bl	800fde8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fd44:	4b06      	ldr	r3, [pc, #24]	; (800fd60 <prvIdleTask+0x28>)
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	2b01      	cmp	r3, #1
 800fd4a:	d9f9      	bls.n	800fd40 <prvIdleTask+0x8>
			{
				taskYIELD();
 800fd4c:	4b05      	ldr	r3, [pc, #20]	; (800fd64 <prvIdleTask+0x2c>)
 800fd4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd52:	601a      	str	r2, [r3, #0]
 800fd54:	f3bf 8f4f 	dsb	sy
 800fd58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fd5c:	e7f0      	b.n	800fd40 <prvIdleTask+0x8>
 800fd5e:	bf00      	nop
 800fd60:	20000584 	.word	0x20000584
 800fd64:	e000ed04 	.word	0xe000ed04

0800fd68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b082      	sub	sp, #8
 800fd6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fd6e:	2300      	movs	r3, #0
 800fd70:	607b      	str	r3, [r7, #4]
 800fd72:	e00c      	b.n	800fd8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fd74:	687a      	ldr	r2, [r7, #4]
 800fd76:	4613      	mov	r3, r2
 800fd78:	009b      	lsls	r3, r3, #2
 800fd7a:	4413      	add	r3, r2
 800fd7c:	009b      	lsls	r3, r3, #2
 800fd7e:	4a12      	ldr	r2, [pc, #72]	; (800fdc8 <prvInitialiseTaskLists+0x60>)
 800fd80:	4413      	add	r3, r2
 800fd82:	4618      	mov	r0, r3
 800fd84:	f7fe fcbe 	bl	800e704 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	3301      	adds	r3, #1
 800fd8c:	607b      	str	r3, [r7, #4]
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	2b06      	cmp	r3, #6
 800fd92:	d9ef      	bls.n	800fd74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fd94:	480d      	ldr	r0, [pc, #52]	; (800fdcc <prvInitialiseTaskLists+0x64>)
 800fd96:	f7fe fcb5 	bl	800e704 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fd9a:	480d      	ldr	r0, [pc, #52]	; (800fdd0 <prvInitialiseTaskLists+0x68>)
 800fd9c:	f7fe fcb2 	bl	800e704 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fda0:	480c      	ldr	r0, [pc, #48]	; (800fdd4 <prvInitialiseTaskLists+0x6c>)
 800fda2:	f7fe fcaf 	bl	800e704 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fda6:	480c      	ldr	r0, [pc, #48]	; (800fdd8 <prvInitialiseTaskLists+0x70>)
 800fda8:	f7fe fcac 	bl	800e704 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fdac:	480b      	ldr	r0, [pc, #44]	; (800fddc <prvInitialiseTaskLists+0x74>)
 800fdae:	f7fe fca9 	bl	800e704 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fdb2:	4b0b      	ldr	r3, [pc, #44]	; (800fde0 <prvInitialiseTaskLists+0x78>)
 800fdb4:	4a05      	ldr	r2, [pc, #20]	; (800fdcc <prvInitialiseTaskLists+0x64>)
 800fdb6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fdb8:	4b0a      	ldr	r3, [pc, #40]	; (800fde4 <prvInitialiseTaskLists+0x7c>)
 800fdba:	4a05      	ldr	r2, [pc, #20]	; (800fdd0 <prvInitialiseTaskLists+0x68>)
 800fdbc:	601a      	str	r2, [r3, #0]
}
 800fdbe:	bf00      	nop
 800fdc0:	3708      	adds	r7, #8
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	bd80      	pop	{r7, pc}
 800fdc6:	bf00      	nop
 800fdc8:	20000584 	.word	0x20000584
 800fdcc:	20000610 	.word	0x20000610
 800fdd0:	20000624 	.word	0x20000624
 800fdd4:	20000640 	.word	0x20000640
 800fdd8:	20000654 	.word	0x20000654
 800fddc:	2000066c 	.word	0x2000066c
 800fde0:	20000638 	.word	0x20000638
 800fde4:	2000063c 	.word	0x2000063c

0800fde8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b082      	sub	sp, #8
 800fdec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fdee:	e019      	b.n	800fe24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fdf0:	f000 fab0 	bl	8010354 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fdf4:	4b10      	ldr	r3, [pc, #64]	; (800fe38 <prvCheckTasksWaitingTermination+0x50>)
 800fdf6:	68db      	ldr	r3, [r3, #12]
 800fdf8:	68db      	ldr	r3, [r3, #12]
 800fdfa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	3304      	adds	r3, #4
 800fe00:	4618      	mov	r0, r3
 800fe02:	f7fe fd09 	bl	800e818 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fe06:	4b0d      	ldr	r3, [pc, #52]	; (800fe3c <prvCheckTasksWaitingTermination+0x54>)
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	3b01      	subs	r3, #1
 800fe0c:	4a0b      	ldr	r2, [pc, #44]	; (800fe3c <prvCheckTasksWaitingTermination+0x54>)
 800fe0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fe10:	4b0b      	ldr	r3, [pc, #44]	; (800fe40 <prvCheckTasksWaitingTermination+0x58>)
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	3b01      	subs	r3, #1
 800fe16:	4a0a      	ldr	r2, [pc, #40]	; (800fe40 <prvCheckTasksWaitingTermination+0x58>)
 800fe18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fe1a:	f000 facb 	bl	80103b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fe1e:	6878      	ldr	r0, [r7, #4]
 800fe20:	f000 f810 	bl	800fe44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fe24:	4b06      	ldr	r3, [pc, #24]	; (800fe40 <prvCheckTasksWaitingTermination+0x58>)
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d1e1      	bne.n	800fdf0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fe2c:	bf00      	nop
 800fe2e:	bf00      	nop
 800fe30:	3708      	adds	r7, #8
 800fe32:	46bd      	mov	sp, r7
 800fe34:	bd80      	pop	{r7, pc}
 800fe36:	bf00      	nop
 800fe38:	20000654 	.word	0x20000654
 800fe3c:	20000680 	.word	0x20000680
 800fe40:	20000668 	.word	0x20000668

0800fe44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fe44:	b580      	push	{r7, lr}
 800fe46:	b084      	sub	sp, #16
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d108      	bne.n	800fe68 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	f000 fc68 	bl	8010730 <vPortFree>
				vPortFree( pxTCB );
 800fe60:	6878      	ldr	r0, [r7, #4]
 800fe62:	f000 fc65 	bl	8010730 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fe66:	e018      	b.n	800fe9a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fe6e:	2b01      	cmp	r3, #1
 800fe70:	d103      	bne.n	800fe7a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800fe72:	6878      	ldr	r0, [r7, #4]
 800fe74:	f000 fc5c 	bl	8010730 <vPortFree>
	}
 800fe78:	e00f      	b.n	800fe9a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fe80:	2b02      	cmp	r3, #2
 800fe82:	d00a      	beq.n	800fe9a <prvDeleteTCB+0x56>
	__asm volatile
 800fe84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe88:	f383 8811 	msr	BASEPRI, r3
 800fe8c:	f3bf 8f6f 	isb	sy
 800fe90:	f3bf 8f4f 	dsb	sy
 800fe94:	60fb      	str	r3, [r7, #12]
}
 800fe96:	bf00      	nop
 800fe98:	e7fe      	b.n	800fe98 <prvDeleteTCB+0x54>
	}
 800fe9a:	bf00      	nop
 800fe9c:	3710      	adds	r7, #16
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	bd80      	pop	{r7, pc}
	...

0800fea4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fea4:	b480      	push	{r7}
 800fea6:	b083      	sub	sp, #12
 800fea8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800feaa:	4b0c      	ldr	r3, [pc, #48]	; (800fedc <prvResetNextTaskUnblockTime+0x38>)
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d104      	bne.n	800febe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800feb4:	4b0a      	ldr	r3, [pc, #40]	; (800fee0 <prvResetNextTaskUnblockTime+0x3c>)
 800feb6:	f04f 32ff 	mov.w	r2, #4294967295
 800feba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800febc:	e008      	b.n	800fed0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800febe:	4b07      	ldr	r3, [pc, #28]	; (800fedc <prvResetNextTaskUnblockTime+0x38>)
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	68db      	ldr	r3, [r3, #12]
 800fec4:	68db      	ldr	r3, [r3, #12]
 800fec6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	685b      	ldr	r3, [r3, #4]
 800fecc:	4a04      	ldr	r2, [pc, #16]	; (800fee0 <prvResetNextTaskUnblockTime+0x3c>)
 800fece:	6013      	str	r3, [r2, #0]
}
 800fed0:	bf00      	nop
 800fed2:	370c      	adds	r7, #12
 800fed4:	46bd      	mov	sp, r7
 800fed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feda:	4770      	bx	lr
 800fedc:	20000638 	.word	0x20000638
 800fee0:	200006a0 	.word	0x200006a0

0800fee4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fee4:	b480      	push	{r7}
 800fee6:	b083      	sub	sp, #12
 800fee8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800feea:	4b0b      	ldr	r3, [pc, #44]	; (800ff18 <xTaskGetSchedulerState+0x34>)
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d102      	bne.n	800fef8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fef2:	2301      	movs	r3, #1
 800fef4:	607b      	str	r3, [r7, #4]
 800fef6:	e008      	b.n	800ff0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fef8:	4b08      	ldr	r3, [pc, #32]	; (800ff1c <xTaskGetSchedulerState+0x38>)
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d102      	bne.n	800ff06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ff00:	2302      	movs	r3, #2
 800ff02:	607b      	str	r3, [r7, #4]
 800ff04:	e001      	b.n	800ff0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ff06:	2300      	movs	r3, #0
 800ff08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ff0a:	687b      	ldr	r3, [r7, #4]
	}
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	370c      	adds	r7, #12
 800ff10:	46bd      	mov	sp, r7
 800ff12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff16:	4770      	bx	lr
 800ff18:	2000068c 	.word	0x2000068c
 800ff1c:	200006a8 	.word	0x200006a8

0800ff20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ff20:	b580      	push	{r7, lr}
 800ff22:	b086      	sub	sp, #24
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ff2c:	2300      	movs	r3, #0
 800ff2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d06e      	beq.n	8010014 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ff36:	4b3a      	ldr	r3, [pc, #232]	; (8010020 <xTaskPriorityDisinherit+0x100>)
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	693a      	ldr	r2, [r7, #16]
 800ff3c:	429a      	cmp	r2, r3
 800ff3e:	d00a      	beq.n	800ff56 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ff40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff44:	f383 8811 	msr	BASEPRI, r3
 800ff48:	f3bf 8f6f 	isb	sy
 800ff4c:	f3bf 8f4f 	dsb	sy
 800ff50:	60fb      	str	r3, [r7, #12]
}
 800ff52:	bf00      	nop
 800ff54:	e7fe      	b.n	800ff54 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ff56:	693b      	ldr	r3, [r7, #16]
 800ff58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d10a      	bne.n	800ff74 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ff5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff62:	f383 8811 	msr	BASEPRI, r3
 800ff66:	f3bf 8f6f 	isb	sy
 800ff6a:	f3bf 8f4f 	dsb	sy
 800ff6e:	60bb      	str	r3, [r7, #8]
}
 800ff70:	bf00      	nop
 800ff72:	e7fe      	b.n	800ff72 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ff74:	693b      	ldr	r3, [r7, #16]
 800ff76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ff78:	1e5a      	subs	r2, r3, #1
 800ff7a:	693b      	ldr	r3, [r7, #16]
 800ff7c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ff7e:	693b      	ldr	r3, [r7, #16]
 800ff80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff82:	693b      	ldr	r3, [r7, #16]
 800ff84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff86:	429a      	cmp	r2, r3
 800ff88:	d044      	beq.n	8010014 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ff8a:	693b      	ldr	r3, [r7, #16]
 800ff8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d140      	bne.n	8010014 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ff92:	693b      	ldr	r3, [r7, #16]
 800ff94:	3304      	adds	r3, #4
 800ff96:	4618      	mov	r0, r3
 800ff98:	f7fe fc3e 	bl	800e818 <uxListRemove>
 800ff9c:	4603      	mov	r3, r0
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d115      	bne.n	800ffce <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ffa2:	693b      	ldr	r3, [r7, #16]
 800ffa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffa6:	491f      	ldr	r1, [pc, #124]	; (8010024 <xTaskPriorityDisinherit+0x104>)
 800ffa8:	4613      	mov	r3, r2
 800ffaa:	009b      	lsls	r3, r3, #2
 800ffac:	4413      	add	r3, r2
 800ffae:	009b      	lsls	r3, r3, #2
 800ffb0:	440b      	add	r3, r1
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d10a      	bne.n	800ffce <xTaskPriorityDisinherit+0xae>
 800ffb8:	693b      	ldr	r3, [r7, #16]
 800ffba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffbc:	2201      	movs	r2, #1
 800ffbe:	fa02 f303 	lsl.w	r3, r2, r3
 800ffc2:	43da      	mvns	r2, r3
 800ffc4:	4b18      	ldr	r3, [pc, #96]	; (8010028 <xTaskPriorityDisinherit+0x108>)
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	4013      	ands	r3, r2
 800ffca:	4a17      	ldr	r2, [pc, #92]	; (8010028 <xTaskPriorityDisinherit+0x108>)
 800ffcc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ffce:	693b      	ldr	r3, [r7, #16]
 800ffd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ffd2:	693b      	ldr	r3, [r7, #16]
 800ffd4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ffd6:	693b      	ldr	r3, [r7, #16]
 800ffd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffda:	f1c3 0207 	rsb	r2, r3, #7
 800ffde:	693b      	ldr	r3, [r7, #16]
 800ffe0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ffe2:	693b      	ldr	r3, [r7, #16]
 800ffe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffe6:	2201      	movs	r2, #1
 800ffe8:	409a      	lsls	r2, r3
 800ffea:	4b0f      	ldr	r3, [pc, #60]	; (8010028 <xTaskPriorityDisinherit+0x108>)
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	4313      	orrs	r3, r2
 800fff0:	4a0d      	ldr	r2, [pc, #52]	; (8010028 <xTaskPriorityDisinherit+0x108>)
 800fff2:	6013      	str	r3, [r2, #0]
 800fff4:	693b      	ldr	r3, [r7, #16]
 800fff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fff8:	4613      	mov	r3, r2
 800fffa:	009b      	lsls	r3, r3, #2
 800fffc:	4413      	add	r3, r2
 800fffe:	009b      	lsls	r3, r3, #2
 8010000:	4a08      	ldr	r2, [pc, #32]	; (8010024 <xTaskPriorityDisinherit+0x104>)
 8010002:	441a      	add	r2, r3
 8010004:	693b      	ldr	r3, [r7, #16]
 8010006:	3304      	adds	r3, #4
 8010008:	4619      	mov	r1, r3
 801000a:	4610      	mov	r0, r2
 801000c:	f7fe fba7 	bl	800e75e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010010:	2301      	movs	r3, #1
 8010012:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010014:	697b      	ldr	r3, [r7, #20]
	}
 8010016:	4618      	mov	r0, r3
 8010018:	3718      	adds	r7, #24
 801001a:	46bd      	mov	sp, r7
 801001c:	bd80      	pop	{r7, pc}
 801001e:	bf00      	nop
 8010020:	20000580 	.word	0x20000580
 8010024:	20000584 	.word	0x20000584
 8010028:	20000688 	.word	0x20000688

0801002c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801002c:	b580      	push	{r7, lr}
 801002e:	b084      	sub	sp, #16
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
 8010034:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010036:	4b29      	ldr	r3, [pc, #164]	; (80100dc <prvAddCurrentTaskToDelayedList+0xb0>)
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801003c:	4b28      	ldr	r3, [pc, #160]	; (80100e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	3304      	adds	r3, #4
 8010042:	4618      	mov	r0, r3
 8010044:	f7fe fbe8 	bl	800e818 <uxListRemove>
 8010048:	4603      	mov	r3, r0
 801004a:	2b00      	cmp	r3, #0
 801004c:	d10b      	bne.n	8010066 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801004e:	4b24      	ldr	r3, [pc, #144]	; (80100e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010054:	2201      	movs	r2, #1
 8010056:	fa02 f303 	lsl.w	r3, r2, r3
 801005a:	43da      	mvns	r2, r3
 801005c:	4b21      	ldr	r3, [pc, #132]	; (80100e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	4013      	ands	r3, r2
 8010062:	4a20      	ldr	r2, [pc, #128]	; (80100e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010064:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	f1b3 3fff 	cmp.w	r3, #4294967295
 801006c:	d10a      	bne.n	8010084 <prvAddCurrentTaskToDelayedList+0x58>
 801006e:	683b      	ldr	r3, [r7, #0]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d007      	beq.n	8010084 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010074:	4b1a      	ldr	r3, [pc, #104]	; (80100e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	3304      	adds	r3, #4
 801007a:	4619      	mov	r1, r3
 801007c:	481a      	ldr	r0, [pc, #104]	; (80100e8 <prvAddCurrentTaskToDelayedList+0xbc>)
 801007e:	f7fe fb6e 	bl	800e75e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010082:	e026      	b.n	80100d2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010084:	68fa      	ldr	r2, [r7, #12]
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	4413      	add	r3, r2
 801008a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801008c:	4b14      	ldr	r3, [pc, #80]	; (80100e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	68ba      	ldr	r2, [r7, #8]
 8010092:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010094:	68ba      	ldr	r2, [r7, #8]
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	429a      	cmp	r2, r3
 801009a:	d209      	bcs.n	80100b0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801009c:	4b13      	ldr	r3, [pc, #76]	; (80100ec <prvAddCurrentTaskToDelayedList+0xc0>)
 801009e:	681a      	ldr	r2, [r3, #0]
 80100a0:	4b0f      	ldr	r3, [pc, #60]	; (80100e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	3304      	adds	r3, #4
 80100a6:	4619      	mov	r1, r3
 80100a8:	4610      	mov	r0, r2
 80100aa:	f7fe fb7c 	bl	800e7a6 <vListInsert>
}
 80100ae:	e010      	b.n	80100d2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80100b0:	4b0f      	ldr	r3, [pc, #60]	; (80100f0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80100b2:	681a      	ldr	r2, [r3, #0]
 80100b4:	4b0a      	ldr	r3, [pc, #40]	; (80100e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	3304      	adds	r3, #4
 80100ba:	4619      	mov	r1, r3
 80100bc:	4610      	mov	r0, r2
 80100be:	f7fe fb72 	bl	800e7a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80100c2:	4b0c      	ldr	r3, [pc, #48]	; (80100f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	68ba      	ldr	r2, [r7, #8]
 80100c8:	429a      	cmp	r2, r3
 80100ca:	d202      	bcs.n	80100d2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80100cc:	4a09      	ldr	r2, [pc, #36]	; (80100f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80100ce:	68bb      	ldr	r3, [r7, #8]
 80100d0:	6013      	str	r3, [r2, #0]
}
 80100d2:	bf00      	nop
 80100d4:	3710      	adds	r7, #16
 80100d6:	46bd      	mov	sp, r7
 80100d8:	bd80      	pop	{r7, pc}
 80100da:	bf00      	nop
 80100dc:	20000684 	.word	0x20000684
 80100e0:	20000580 	.word	0x20000580
 80100e4:	20000688 	.word	0x20000688
 80100e8:	2000066c 	.word	0x2000066c
 80100ec:	2000063c 	.word	0x2000063c
 80100f0:	20000638 	.word	0x20000638
 80100f4:	200006a0 	.word	0x200006a0

080100f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80100f8:	b480      	push	{r7}
 80100fa:	b085      	sub	sp, #20
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	60f8      	str	r0, [r7, #12]
 8010100:	60b9      	str	r1, [r7, #8]
 8010102:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	3b04      	subs	r3, #4
 8010108:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010110:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	3b04      	subs	r3, #4
 8010116:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010118:	68bb      	ldr	r3, [r7, #8]
 801011a:	f023 0201 	bic.w	r2, r3, #1
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	3b04      	subs	r3, #4
 8010126:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010128:	4a0c      	ldr	r2, [pc, #48]	; (801015c <pxPortInitialiseStack+0x64>)
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	3b14      	subs	r3, #20
 8010132:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010134:	687a      	ldr	r2, [r7, #4]
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	3b04      	subs	r3, #4
 801013e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	f06f 0202 	mvn.w	r2, #2
 8010146:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	3b20      	subs	r3, #32
 801014c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801014e:	68fb      	ldr	r3, [r7, #12]
}
 8010150:	4618      	mov	r0, r3
 8010152:	3714      	adds	r7, #20
 8010154:	46bd      	mov	sp, r7
 8010156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801015a:	4770      	bx	lr
 801015c:	08010161 	.word	0x08010161

08010160 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010160:	b480      	push	{r7}
 8010162:	b085      	sub	sp, #20
 8010164:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010166:	2300      	movs	r3, #0
 8010168:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801016a:	4b12      	ldr	r3, [pc, #72]	; (80101b4 <prvTaskExitError+0x54>)
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010172:	d00a      	beq.n	801018a <prvTaskExitError+0x2a>
	__asm volatile
 8010174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010178:	f383 8811 	msr	BASEPRI, r3
 801017c:	f3bf 8f6f 	isb	sy
 8010180:	f3bf 8f4f 	dsb	sy
 8010184:	60fb      	str	r3, [r7, #12]
}
 8010186:	bf00      	nop
 8010188:	e7fe      	b.n	8010188 <prvTaskExitError+0x28>
	__asm volatile
 801018a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801018e:	f383 8811 	msr	BASEPRI, r3
 8010192:	f3bf 8f6f 	isb	sy
 8010196:	f3bf 8f4f 	dsb	sy
 801019a:	60bb      	str	r3, [r7, #8]
}
 801019c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801019e:	bf00      	nop
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d0fc      	beq.n	80101a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80101a6:	bf00      	nop
 80101a8:	bf00      	nop
 80101aa:	3714      	adds	r7, #20
 80101ac:	46bd      	mov	sp, r7
 80101ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b2:	4770      	bx	lr
 80101b4:	200000e8 	.word	0x200000e8
	...

080101c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80101c0:	4b07      	ldr	r3, [pc, #28]	; (80101e0 <pxCurrentTCBConst2>)
 80101c2:	6819      	ldr	r1, [r3, #0]
 80101c4:	6808      	ldr	r0, [r1, #0]
 80101c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101ca:	f380 8809 	msr	PSP, r0
 80101ce:	f3bf 8f6f 	isb	sy
 80101d2:	f04f 0000 	mov.w	r0, #0
 80101d6:	f380 8811 	msr	BASEPRI, r0
 80101da:	4770      	bx	lr
 80101dc:	f3af 8000 	nop.w

080101e0 <pxCurrentTCBConst2>:
 80101e0:	20000580 	.word	0x20000580
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80101e4:	bf00      	nop
 80101e6:	bf00      	nop

080101e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80101e8:	4808      	ldr	r0, [pc, #32]	; (801020c <prvPortStartFirstTask+0x24>)
 80101ea:	6800      	ldr	r0, [r0, #0]
 80101ec:	6800      	ldr	r0, [r0, #0]
 80101ee:	f380 8808 	msr	MSP, r0
 80101f2:	f04f 0000 	mov.w	r0, #0
 80101f6:	f380 8814 	msr	CONTROL, r0
 80101fa:	b662      	cpsie	i
 80101fc:	b661      	cpsie	f
 80101fe:	f3bf 8f4f 	dsb	sy
 8010202:	f3bf 8f6f 	isb	sy
 8010206:	df00      	svc	0
 8010208:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801020a:	bf00      	nop
 801020c:	e000ed08 	.word	0xe000ed08

08010210 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010210:	b580      	push	{r7, lr}
 8010212:	b086      	sub	sp, #24
 8010214:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010216:	4b46      	ldr	r3, [pc, #280]	; (8010330 <xPortStartScheduler+0x120>)
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	4a46      	ldr	r2, [pc, #280]	; (8010334 <xPortStartScheduler+0x124>)
 801021c:	4293      	cmp	r3, r2
 801021e:	d10a      	bne.n	8010236 <xPortStartScheduler+0x26>
	__asm volatile
 8010220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010224:	f383 8811 	msr	BASEPRI, r3
 8010228:	f3bf 8f6f 	isb	sy
 801022c:	f3bf 8f4f 	dsb	sy
 8010230:	613b      	str	r3, [r7, #16]
}
 8010232:	bf00      	nop
 8010234:	e7fe      	b.n	8010234 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010236:	4b3e      	ldr	r3, [pc, #248]	; (8010330 <xPortStartScheduler+0x120>)
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	4a3f      	ldr	r2, [pc, #252]	; (8010338 <xPortStartScheduler+0x128>)
 801023c:	4293      	cmp	r3, r2
 801023e:	d10a      	bne.n	8010256 <xPortStartScheduler+0x46>
	__asm volatile
 8010240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010244:	f383 8811 	msr	BASEPRI, r3
 8010248:	f3bf 8f6f 	isb	sy
 801024c:	f3bf 8f4f 	dsb	sy
 8010250:	60fb      	str	r3, [r7, #12]
}
 8010252:	bf00      	nop
 8010254:	e7fe      	b.n	8010254 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010256:	4b39      	ldr	r3, [pc, #228]	; (801033c <xPortStartScheduler+0x12c>)
 8010258:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801025a:	697b      	ldr	r3, [r7, #20]
 801025c:	781b      	ldrb	r3, [r3, #0]
 801025e:	b2db      	uxtb	r3, r3
 8010260:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010262:	697b      	ldr	r3, [r7, #20]
 8010264:	22ff      	movs	r2, #255	; 0xff
 8010266:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010268:	697b      	ldr	r3, [r7, #20]
 801026a:	781b      	ldrb	r3, [r3, #0]
 801026c:	b2db      	uxtb	r3, r3
 801026e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010270:	78fb      	ldrb	r3, [r7, #3]
 8010272:	b2db      	uxtb	r3, r3
 8010274:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010278:	b2da      	uxtb	r2, r3
 801027a:	4b31      	ldr	r3, [pc, #196]	; (8010340 <xPortStartScheduler+0x130>)
 801027c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801027e:	4b31      	ldr	r3, [pc, #196]	; (8010344 <xPortStartScheduler+0x134>)
 8010280:	2207      	movs	r2, #7
 8010282:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010284:	e009      	b.n	801029a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010286:	4b2f      	ldr	r3, [pc, #188]	; (8010344 <xPortStartScheduler+0x134>)
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	3b01      	subs	r3, #1
 801028c:	4a2d      	ldr	r2, [pc, #180]	; (8010344 <xPortStartScheduler+0x134>)
 801028e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010290:	78fb      	ldrb	r3, [r7, #3]
 8010292:	b2db      	uxtb	r3, r3
 8010294:	005b      	lsls	r3, r3, #1
 8010296:	b2db      	uxtb	r3, r3
 8010298:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801029a:	78fb      	ldrb	r3, [r7, #3]
 801029c:	b2db      	uxtb	r3, r3
 801029e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80102a2:	2b80      	cmp	r3, #128	; 0x80
 80102a4:	d0ef      	beq.n	8010286 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80102a6:	4b27      	ldr	r3, [pc, #156]	; (8010344 <xPortStartScheduler+0x134>)
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	f1c3 0307 	rsb	r3, r3, #7
 80102ae:	2b04      	cmp	r3, #4
 80102b0:	d00a      	beq.n	80102c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80102b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102b6:	f383 8811 	msr	BASEPRI, r3
 80102ba:	f3bf 8f6f 	isb	sy
 80102be:	f3bf 8f4f 	dsb	sy
 80102c2:	60bb      	str	r3, [r7, #8]
}
 80102c4:	bf00      	nop
 80102c6:	e7fe      	b.n	80102c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80102c8:	4b1e      	ldr	r3, [pc, #120]	; (8010344 <xPortStartScheduler+0x134>)
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	021b      	lsls	r3, r3, #8
 80102ce:	4a1d      	ldr	r2, [pc, #116]	; (8010344 <xPortStartScheduler+0x134>)
 80102d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80102d2:	4b1c      	ldr	r3, [pc, #112]	; (8010344 <xPortStartScheduler+0x134>)
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80102da:	4a1a      	ldr	r2, [pc, #104]	; (8010344 <xPortStartScheduler+0x134>)
 80102dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	b2da      	uxtb	r2, r3
 80102e2:	697b      	ldr	r3, [r7, #20]
 80102e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80102e6:	4b18      	ldr	r3, [pc, #96]	; (8010348 <xPortStartScheduler+0x138>)
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	4a17      	ldr	r2, [pc, #92]	; (8010348 <xPortStartScheduler+0x138>)
 80102ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80102f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80102f2:	4b15      	ldr	r3, [pc, #84]	; (8010348 <xPortStartScheduler+0x138>)
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	4a14      	ldr	r2, [pc, #80]	; (8010348 <xPortStartScheduler+0x138>)
 80102f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80102fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80102fe:	f000 f8dd 	bl	80104bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010302:	4b12      	ldr	r3, [pc, #72]	; (801034c <xPortStartScheduler+0x13c>)
 8010304:	2200      	movs	r2, #0
 8010306:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010308:	f000 f8fc 	bl	8010504 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801030c:	4b10      	ldr	r3, [pc, #64]	; (8010350 <xPortStartScheduler+0x140>)
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	4a0f      	ldr	r2, [pc, #60]	; (8010350 <xPortStartScheduler+0x140>)
 8010312:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010316:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010318:	f7ff ff66 	bl	80101e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801031c:	f7ff fba6 	bl	800fa6c <vTaskSwitchContext>
	prvTaskExitError();
 8010320:	f7ff ff1e 	bl	8010160 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010324:	2300      	movs	r3, #0
}
 8010326:	4618      	mov	r0, r3
 8010328:	3718      	adds	r7, #24
 801032a:	46bd      	mov	sp, r7
 801032c:	bd80      	pop	{r7, pc}
 801032e:	bf00      	nop
 8010330:	e000ed00 	.word	0xe000ed00
 8010334:	410fc271 	.word	0x410fc271
 8010338:	410fc270 	.word	0x410fc270
 801033c:	e000e400 	.word	0xe000e400
 8010340:	200006ac 	.word	0x200006ac
 8010344:	200006b0 	.word	0x200006b0
 8010348:	e000ed20 	.word	0xe000ed20
 801034c:	200000e8 	.word	0x200000e8
 8010350:	e000ef34 	.word	0xe000ef34

08010354 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010354:	b480      	push	{r7}
 8010356:	b083      	sub	sp, #12
 8010358:	af00      	add	r7, sp, #0
	__asm volatile
 801035a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801035e:	f383 8811 	msr	BASEPRI, r3
 8010362:	f3bf 8f6f 	isb	sy
 8010366:	f3bf 8f4f 	dsb	sy
 801036a:	607b      	str	r3, [r7, #4]
}
 801036c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801036e:	4b0f      	ldr	r3, [pc, #60]	; (80103ac <vPortEnterCritical+0x58>)
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	3301      	adds	r3, #1
 8010374:	4a0d      	ldr	r2, [pc, #52]	; (80103ac <vPortEnterCritical+0x58>)
 8010376:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010378:	4b0c      	ldr	r3, [pc, #48]	; (80103ac <vPortEnterCritical+0x58>)
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	2b01      	cmp	r3, #1
 801037e:	d10f      	bne.n	80103a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010380:	4b0b      	ldr	r3, [pc, #44]	; (80103b0 <vPortEnterCritical+0x5c>)
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	b2db      	uxtb	r3, r3
 8010386:	2b00      	cmp	r3, #0
 8010388:	d00a      	beq.n	80103a0 <vPortEnterCritical+0x4c>
	__asm volatile
 801038a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801038e:	f383 8811 	msr	BASEPRI, r3
 8010392:	f3bf 8f6f 	isb	sy
 8010396:	f3bf 8f4f 	dsb	sy
 801039a:	603b      	str	r3, [r7, #0]
}
 801039c:	bf00      	nop
 801039e:	e7fe      	b.n	801039e <vPortEnterCritical+0x4a>
	}
}
 80103a0:	bf00      	nop
 80103a2:	370c      	adds	r7, #12
 80103a4:	46bd      	mov	sp, r7
 80103a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103aa:	4770      	bx	lr
 80103ac:	200000e8 	.word	0x200000e8
 80103b0:	e000ed04 	.word	0xe000ed04

080103b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80103b4:	b480      	push	{r7}
 80103b6:	b083      	sub	sp, #12
 80103b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80103ba:	4b12      	ldr	r3, [pc, #72]	; (8010404 <vPortExitCritical+0x50>)
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d10a      	bne.n	80103d8 <vPortExitCritical+0x24>
	__asm volatile
 80103c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103c6:	f383 8811 	msr	BASEPRI, r3
 80103ca:	f3bf 8f6f 	isb	sy
 80103ce:	f3bf 8f4f 	dsb	sy
 80103d2:	607b      	str	r3, [r7, #4]
}
 80103d4:	bf00      	nop
 80103d6:	e7fe      	b.n	80103d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80103d8:	4b0a      	ldr	r3, [pc, #40]	; (8010404 <vPortExitCritical+0x50>)
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	3b01      	subs	r3, #1
 80103de:	4a09      	ldr	r2, [pc, #36]	; (8010404 <vPortExitCritical+0x50>)
 80103e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80103e2:	4b08      	ldr	r3, [pc, #32]	; (8010404 <vPortExitCritical+0x50>)
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d105      	bne.n	80103f6 <vPortExitCritical+0x42>
 80103ea:	2300      	movs	r3, #0
 80103ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80103ee:	683b      	ldr	r3, [r7, #0]
 80103f0:	f383 8811 	msr	BASEPRI, r3
}
 80103f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80103f6:	bf00      	nop
 80103f8:	370c      	adds	r7, #12
 80103fa:	46bd      	mov	sp, r7
 80103fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010400:	4770      	bx	lr
 8010402:	bf00      	nop
 8010404:	200000e8 	.word	0x200000e8
	...

08010410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010410:	f3ef 8009 	mrs	r0, PSP
 8010414:	f3bf 8f6f 	isb	sy
 8010418:	4b15      	ldr	r3, [pc, #84]	; (8010470 <pxCurrentTCBConst>)
 801041a:	681a      	ldr	r2, [r3, #0]
 801041c:	f01e 0f10 	tst.w	lr, #16
 8010420:	bf08      	it	eq
 8010422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801042a:	6010      	str	r0, [r2, #0]
 801042c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010430:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010434:	f380 8811 	msr	BASEPRI, r0
 8010438:	f3bf 8f4f 	dsb	sy
 801043c:	f3bf 8f6f 	isb	sy
 8010440:	f7ff fb14 	bl	800fa6c <vTaskSwitchContext>
 8010444:	f04f 0000 	mov.w	r0, #0
 8010448:	f380 8811 	msr	BASEPRI, r0
 801044c:	bc09      	pop	{r0, r3}
 801044e:	6819      	ldr	r1, [r3, #0]
 8010450:	6808      	ldr	r0, [r1, #0]
 8010452:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010456:	f01e 0f10 	tst.w	lr, #16
 801045a:	bf08      	it	eq
 801045c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010460:	f380 8809 	msr	PSP, r0
 8010464:	f3bf 8f6f 	isb	sy
 8010468:	4770      	bx	lr
 801046a:	bf00      	nop
 801046c:	f3af 8000 	nop.w

08010470 <pxCurrentTCBConst>:
 8010470:	20000580 	.word	0x20000580
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010474:	bf00      	nop
 8010476:	bf00      	nop

08010478 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010478:	b580      	push	{r7, lr}
 801047a:	b082      	sub	sp, #8
 801047c:	af00      	add	r7, sp, #0
	__asm volatile
 801047e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010482:	f383 8811 	msr	BASEPRI, r3
 8010486:	f3bf 8f6f 	isb	sy
 801048a:	f3bf 8f4f 	dsb	sy
 801048e:	607b      	str	r3, [r7, #4]
}
 8010490:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010492:	f7ff fa33 	bl	800f8fc <xTaskIncrementTick>
 8010496:	4603      	mov	r3, r0
 8010498:	2b00      	cmp	r3, #0
 801049a:	d003      	beq.n	80104a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801049c:	4b06      	ldr	r3, [pc, #24]	; (80104b8 <SysTick_Handler+0x40>)
 801049e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104a2:	601a      	str	r2, [r3, #0]
 80104a4:	2300      	movs	r3, #0
 80104a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80104a8:	683b      	ldr	r3, [r7, #0]
 80104aa:	f383 8811 	msr	BASEPRI, r3
}
 80104ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80104b0:	bf00      	nop
 80104b2:	3708      	adds	r7, #8
 80104b4:	46bd      	mov	sp, r7
 80104b6:	bd80      	pop	{r7, pc}
 80104b8:	e000ed04 	.word	0xe000ed04

080104bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80104bc:	b480      	push	{r7}
 80104be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80104c0:	4b0b      	ldr	r3, [pc, #44]	; (80104f0 <vPortSetupTimerInterrupt+0x34>)
 80104c2:	2200      	movs	r2, #0
 80104c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80104c6:	4b0b      	ldr	r3, [pc, #44]	; (80104f4 <vPortSetupTimerInterrupt+0x38>)
 80104c8:	2200      	movs	r2, #0
 80104ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80104cc:	4b0a      	ldr	r3, [pc, #40]	; (80104f8 <vPortSetupTimerInterrupt+0x3c>)
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	4a0a      	ldr	r2, [pc, #40]	; (80104fc <vPortSetupTimerInterrupt+0x40>)
 80104d2:	fba2 2303 	umull	r2, r3, r2, r3
 80104d6:	099b      	lsrs	r3, r3, #6
 80104d8:	4a09      	ldr	r2, [pc, #36]	; (8010500 <vPortSetupTimerInterrupt+0x44>)
 80104da:	3b01      	subs	r3, #1
 80104dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80104de:	4b04      	ldr	r3, [pc, #16]	; (80104f0 <vPortSetupTimerInterrupt+0x34>)
 80104e0:	2207      	movs	r2, #7
 80104e2:	601a      	str	r2, [r3, #0]
}
 80104e4:	bf00      	nop
 80104e6:	46bd      	mov	sp, r7
 80104e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ec:	4770      	bx	lr
 80104ee:	bf00      	nop
 80104f0:	e000e010 	.word	0xe000e010
 80104f4:	e000e018 	.word	0xe000e018
 80104f8:	20000008 	.word	0x20000008
 80104fc:	10624dd3 	.word	0x10624dd3
 8010500:	e000e014 	.word	0xe000e014

08010504 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010504:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010514 <vPortEnableVFP+0x10>
 8010508:	6801      	ldr	r1, [r0, #0]
 801050a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801050e:	6001      	str	r1, [r0, #0]
 8010510:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010512:	bf00      	nop
 8010514:	e000ed88 	.word	0xe000ed88

08010518 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010518:	b480      	push	{r7}
 801051a:	b085      	sub	sp, #20
 801051c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801051e:	f3ef 8305 	mrs	r3, IPSR
 8010522:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	2b0f      	cmp	r3, #15
 8010528:	d914      	bls.n	8010554 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801052a:	4a17      	ldr	r2, [pc, #92]	; (8010588 <vPortValidateInterruptPriority+0x70>)
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	4413      	add	r3, r2
 8010530:	781b      	ldrb	r3, [r3, #0]
 8010532:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010534:	4b15      	ldr	r3, [pc, #84]	; (801058c <vPortValidateInterruptPriority+0x74>)
 8010536:	781b      	ldrb	r3, [r3, #0]
 8010538:	7afa      	ldrb	r2, [r7, #11]
 801053a:	429a      	cmp	r2, r3
 801053c:	d20a      	bcs.n	8010554 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801053e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010542:	f383 8811 	msr	BASEPRI, r3
 8010546:	f3bf 8f6f 	isb	sy
 801054a:	f3bf 8f4f 	dsb	sy
 801054e:	607b      	str	r3, [r7, #4]
}
 8010550:	bf00      	nop
 8010552:	e7fe      	b.n	8010552 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010554:	4b0e      	ldr	r3, [pc, #56]	; (8010590 <vPortValidateInterruptPriority+0x78>)
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801055c:	4b0d      	ldr	r3, [pc, #52]	; (8010594 <vPortValidateInterruptPriority+0x7c>)
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	429a      	cmp	r2, r3
 8010562:	d90a      	bls.n	801057a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010568:	f383 8811 	msr	BASEPRI, r3
 801056c:	f3bf 8f6f 	isb	sy
 8010570:	f3bf 8f4f 	dsb	sy
 8010574:	603b      	str	r3, [r7, #0]
}
 8010576:	bf00      	nop
 8010578:	e7fe      	b.n	8010578 <vPortValidateInterruptPriority+0x60>
	}
 801057a:	bf00      	nop
 801057c:	3714      	adds	r7, #20
 801057e:	46bd      	mov	sp, r7
 8010580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010584:	4770      	bx	lr
 8010586:	bf00      	nop
 8010588:	e000e3f0 	.word	0xe000e3f0
 801058c:	200006ac 	.word	0x200006ac
 8010590:	e000ed0c 	.word	0xe000ed0c
 8010594:	200006b0 	.word	0x200006b0

08010598 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b08a      	sub	sp, #40	; 0x28
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80105a0:	2300      	movs	r3, #0
 80105a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80105a4:	f7ff f900 	bl	800f7a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80105a8:	4b5b      	ldr	r3, [pc, #364]	; (8010718 <pvPortMalloc+0x180>)
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d101      	bne.n	80105b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80105b0:	f000 f920 	bl	80107f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80105b4:	4b59      	ldr	r3, [pc, #356]	; (801071c <pvPortMalloc+0x184>)
 80105b6:	681a      	ldr	r2, [r3, #0]
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	4013      	ands	r3, r2
 80105bc:	2b00      	cmp	r3, #0
 80105be:	f040 8093 	bne.w	80106e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d01d      	beq.n	8010604 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80105c8:	2208      	movs	r2, #8
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	4413      	add	r3, r2
 80105ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	f003 0307 	and.w	r3, r3, #7
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d014      	beq.n	8010604 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	f023 0307 	bic.w	r3, r3, #7
 80105e0:	3308      	adds	r3, #8
 80105e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	f003 0307 	and.w	r3, r3, #7
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d00a      	beq.n	8010604 <pvPortMalloc+0x6c>
	__asm volatile
 80105ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105f2:	f383 8811 	msr	BASEPRI, r3
 80105f6:	f3bf 8f6f 	isb	sy
 80105fa:	f3bf 8f4f 	dsb	sy
 80105fe:	617b      	str	r3, [r7, #20]
}
 8010600:	bf00      	nop
 8010602:	e7fe      	b.n	8010602 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d06e      	beq.n	80106e8 <pvPortMalloc+0x150>
 801060a:	4b45      	ldr	r3, [pc, #276]	; (8010720 <pvPortMalloc+0x188>)
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	687a      	ldr	r2, [r7, #4]
 8010610:	429a      	cmp	r2, r3
 8010612:	d869      	bhi.n	80106e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010614:	4b43      	ldr	r3, [pc, #268]	; (8010724 <pvPortMalloc+0x18c>)
 8010616:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010618:	4b42      	ldr	r3, [pc, #264]	; (8010724 <pvPortMalloc+0x18c>)
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801061e:	e004      	b.n	801062a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010622:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801062a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801062c:	685b      	ldr	r3, [r3, #4]
 801062e:	687a      	ldr	r2, [r7, #4]
 8010630:	429a      	cmp	r2, r3
 8010632:	d903      	bls.n	801063c <pvPortMalloc+0xa4>
 8010634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	2b00      	cmp	r3, #0
 801063a:	d1f1      	bne.n	8010620 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801063c:	4b36      	ldr	r3, [pc, #216]	; (8010718 <pvPortMalloc+0x180>)
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010642:	429a      	cmp	r2, r3
 8010644:	d050      	beq.n	80106e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010646:	6a3b      	ldr	r3, [r7, #32]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	2208      	movs	r2, #8
 801064c:	4413      	add	r3, r2
 801064e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010652:	681a      	ldr	r2, [r3, #0]
 8010654:	6a3b      	ldr	r3, [r7, #32]
 8010656:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801065a:	685a      	ldr	r2, [r3, #4]
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	1ad2      	subs	r2, r2, r3
 8010660:	2308      	movs	r3, #8
 8010662:	005b      	lsls	r3, r3, #1
 8010664:	429a      	cmp	r2, r3
 8010666:	d91f      	bls.n	80106a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	4413      	add	r3, r2
 801066e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010670:	69bb      	ldr	r3, [r7, #24]
 8010672:	f003 0307 	and.w	r3, r3, #7
 8010676:	2b00      	cmp	r3, #0
 8010678:	d00a      	beq.n	8010690 <pvPortMalloc+0xf8>
	__asm volatile
 801067a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801067e:	f383 8811 	msr	BASEPRI, r3
 8010682:	f3bf 8f6f 	isb	sy
 8010686:	f3bf 8f4f 	dsb	sy
 801068a:	613b      	str	r3, [r7, #16]
}
 801068c:	bf00      	nop
 801068e:	e7fe      	b.n	801068e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010692:	685a      	ldr	r2, [r3, #4]
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	1ad2      	subs	r2, r2, r3
 8010698:	69bb      	ldr	r3, [r7, #24]
 801069a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801069c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801069e:	687a      	ldr	r2, [r7, #4]
 80106a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80106a2:	69b8      	ldr	r0, [r7, #24]
 80106a4:	f000 f908 	bl	80108b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80106a8:	4b1d      	ldr	r3, [pc, #116]	; (8010720 <pvPortMalloc+0x188>)
 80106aa:	681a      	ldr	r2, [r3, #0]
 80106ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ae:	685b      	ldr	r3, [r3, #4]
 80106b0:	1ad3      	subs	r3, r2, r3
 80106b2:	4a1b      	ldr	r2, [pc, #108]	; (8010720 <pvPortMalloc+0x188>)
 80106b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80106b6:	4b1a      	ldr	r3, [pc, #104]	; (8010720 <pvPortMalloc+0x188>)
 80106b8:	681a      	ldr	r2, [r3, #0]
 80106ba:	4b1b      	ldr	r3, [pc, #108]	; (8010728 <pvPortMalloc+0x190>)
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	429a      	cmp	r2, r3
 80106c0:	d203      	bcs.n	80106ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80106c2:	4b17      	ldr	r3, [pc, #92]	; (8010720 <pvPortMalloc+0x188>)
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	4a18      	ldr	r2, [pc, #96]	; (8010728 <pvPortMalloc+0x190>)
 80106c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80106ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106cc:	685a      	ldr	r2, [r3, #4]
 80106ce:	4b13      	ldr	r3, [pc, #76]	; (801071c <pvPortMalloc+0x184>)
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	431a      	orrs	r2, r3
 80106d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80106d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106da:	2200      	movs	r2, #0
 80106dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80106de:	4b13      	ldr	r3, [pc, #76]	; (801072c <pvPortMalloc+0x194>)
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	3301      	adds	r3, #1
 80106e4:	4a11      	ldr	r2, [pc, #68]	; (801072c <pvPortMalloc+0x194>)
 80106e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80106e8:	f7ff f86c 	bl	800f7c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80106ec:	69fb      	ldr	r3, [r7, #28]
 80106ee:	f003 0307 	and.w	r3, r3, #7
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d00a      	beq.n	801070c <pvPortMalloc+0x174>
	__asm volatile
 80106f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106fa:	f383 8811 	msr	BASEPRI, r3
 80106fe:	f3bf 8f6f 	isb	sy
 8010702:	f3bf 8f4f 	dsb	sy
 8010706:	60fb      	str	r3, [r7, #12]
}
 8010708:	bf00      	nop
 801070a:	e7fe      	b.n	801070a <pvPortMalloc+0x172>
	return pvReturn;
 801070c:	69fb      	ldr	r3, [r7, #28]
}
 801070e:	4618      	mov	r0, r3
 8010710:	3728      	adds	r7, #40	; 0x28
 8010712:	46bd      	mov	sp, r7
 8010714:	bd80      	pop	{r7, pc}
 8010716:	bf00      	nop
 8010718:	200042bc 	.word	0x200042bc
 801071c:	200042d0 	.word	0x200042d0
 8010720:	200042c0 	.word	0x200042c0
 8010724:	200042b4 	.word	0x200042b4
 8010728:	200042c4 	.word	0x200042c4
 801072c:	200042c8 	.word	0x200042c8

08010730 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b086      	sub	sp, #24
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	2b00      	cmp	r3, #0
 8010740:	d04d      	beq.n	80107de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010742:	2308      	movs	r3, #8
 8010744:	425b      	negs	r3, r3
 8010746:	697a      	ldr	r2, [r7, #20]
 8010748:	4413      	add	r3, r2
 801074a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801074c:	697b      	ldr	r3, [r7, #20]
 801074e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010750:	693b      	ldr	r3, [r7, #16]
 8010752:	685a      	ldr	r2, [r3, #4]
 8010754:	4b24      	ldr	r3, [pc, #144]	; (80107e8 <vPortFree+0xb8>)
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	4013      	ands	r3, r2
 801075a:	2b00      	cmp	r3, #0
 801075c:	d10a      	bne.n	8010774 <vPortFree+0x44>
	__asm volatile
 801075e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010762:	f383 8811 	msr	BASEPRI, r3
 8010766:	f3bf 8f6f 	isb	sy
 801076a:	f3bf 8f4f 	dsb	sy
 801076e:	60fb      	str	r3, [r7, #12]
}
 8010770:	bf00      	nop
 8010772:	e7fe      	b.n	8010772 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010774:	693b      	ldr	r3, [r7, #16]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d00a      	beq.n	8010792 <vPortFree+0x62>
	__asm volatile
 801077c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010780:	f383 8811 	msr	BASEPRI, r3
 8010784:	f3bf 8f6f 	isb	sy
 8010788:	f3bf 8f4f 	dsb	sy
 801078c:	60bb      	str	r3, [r7, #8]
}
 801078e:	bf00      	nop
 8010790:	e7fe      	b.n	8010790 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010792:	693b      	ldr	r3, [r7, #16]
 8010794:	685a      	ldr	r2, [r3, #4]
 8010796:	4b14      	ldr	r3, [pc, #80]	; (80107e8 <vPortFree+0xb8>)
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	4013      	ands	r3, r2
 801079c:	2b00      	cmp	r3, #0
 801079e:	d01e      	beq.n	80107de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80107a0:	693b      	ldr	r3, [r7, #16]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d11a      	bne.n	80107de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80107a8:	693b      	ldr	r3, [r7, #16]
 80107aa:	685a      	ldr	r2, [r3, #4]
 80107ac:	4b0e      	ldr	r3, [pc, #56]	; (80107e8 <vPortFree+0xb8>)
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	43db      	mvns	r3, r3
 80107b2:	401a      	ands	r2, r3
 80107b4:	693b      	ldr	r3, [r7, #16]
 80107b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80107b8:	f7fe fff6 	bl	800f7a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80107bc:	693b      	ldr	r3, [r7, #16]
 80107be:	685a      	ldr	r2, [r3, #4]
 80107c0:	4b0a      	ldr	r3, [pc, #40]	; (80107ec <vPortFree+0xbc>)
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	4413      	add	r3, r2
 80107c6:	4a09      	ldr	r2, [pc, #36]	; (80107ec <vPortFree+0xbc>)
 80107c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80107ca:	6938      	ldr	r0, [r7, #16]
 80107cc:	f000 f874 	bl	80108b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80107d0:	4b07      	ldr	r3, [pc, #28]	; (80107f0 <vPortFree+0xc0>)
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	3301      	adds	r3, #1
 80107d6:	4a06      	ldr	r2, [pc, #24]	; (80107f0 <vPortFree+0xc0>)
 80107d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80107da:	f7fe fff3 	bl	800f7c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80107de:	bf00      	nop
 80107e0:	3718      	adds	r7, #24
 80107e2:	46bd      	mov	sp, r7
 80107e4:	bd80      	pop	{r7, pc}
 80107e6:	bf00      	nop
 80107e8:	200042d0 	.word	0x200042d0
 80107ec:	200042c0 	.word	0x200042c0
 80107f0:	200042cc 	.word	0x200042cc

080107f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80107f4:	b480      	push	{r7}
 80107f6:	b085      	sub	sp, #20
 80107f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80107fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80107fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010800:	4b27      	ldr	r3, [pc, #156]	; (80108a0 <prvHeapInit+0xac>)
 8010802:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	f003 0307 	and.w	r3, r3, #7
 801080a:	2b00      	cmp	r3, #0
 801080c:	d00c      	beq.n	8010828 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	3307      	adds	r3, #7
 8010812:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	f023 0307 	bic.w	r3, r3, #7
 801081a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801081c:	68ba      	ldr	r2, [r7, #8]
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	1ad3      	subs	r3, r2, r3
 8010822:	4a1f      	ldr	r2, [pc, #124]	; (80108a0 <prvHeapInit+0xac>)
 8010824:	4413      	add	r3, r2
 8010826:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801082c:	4a1d      	ldr	r2, [pc, #116]	; (80108a4 <prvHeapInit+0xb0>)
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010832:	4b1c      	ldr	r3, [pc, #112]	; (80108a4 <prvHeapInit+0xb0>)
 8010834:	2200      	movs	r2, #0
 8010836:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	68ba      	ldr	r2, [r7, #8]
 801083c:	4413      	add	r3, r2
 801083e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010840:	2208      	movs	r2, #8
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	1a9b      	subs	r3, r3, r2
 8010846:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	f023 0307 	bic.w	r3, r3, #7
 801084e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	4a15      	ldr	r2, [pc, #84]	; (80108a8 <prvHeapInit+0xb4>)
 8010854:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010856:	4b14      	ldr	r3, [pc, #80]	; (80108a8 <prvHeapInit+0xb4>)
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	2200      	movs	r2, #0
 801085c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801085e:	4b12      	ldr	r3, [pc, #72]	; (80108a8 <prvHeapInit+0xb4>)
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	2200      	movs	r2, #0
 8010864:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801086a:	683b      	ldr	r3, [r7, #0]
 801086c:	68fa      	ldr	r2, [r7, #12]
 801086e:	1ad2      	subs	r2, r2, r3
 8010870:	683b      	ldr	r3, [r7, #0]
 8010872:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010874:	4b0c      	ldr	r3, [pc, #48]	; (80108a8 <prvHeapInit+0xb4>)
 8010876:	681a      	ldr	r2, [r3, #0]
 8010878:	683b      	ldr	r3, [r7, #0]
 801087a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801087c:	683b      	ldr	r3, [r7, #0]
 801087e:	685b      	ldr	r3, [r3, #4]
 8010880:	4a0a      	ldr	r2, [pc, #40]	; (80108ac <prvHeapInit+0xb8>)
 8010882:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010884:	683b      	ldr	r3, [r7, #0]
 8010886:	685b      	ldr	r3, [r3, #4]
 8010888:	4a09      	ldr	r2, [pc, #36]	; (80108b0 <prvHeapInit+0xbc>)
 801088a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801088c:	4b09      	ldr	r3, [pc, #36]	; (80108b4 <prvHeapInit+0xc0>)
 801088e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010892:	601a      	str	r2, [r3, #0]
}
 8010894:	bf00      	nop
 8010896:	3714      	adds	r7, #20
 8010898:	46bd      	mov	sp, r7
 801089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801089e:	4770      	bx	lr
 80108a0:	200006b4 	.word	0x200006b4
 80108a4:	200042b4 	.word	0x200042b4
 80108a8:	200042bc 	.word	0x200042bc
 80108ac:	200042c4 	.word	0x200042c4
 80108b0:	200042c0 	.word	0x200042c0
 80108b4:	200042d0 	.word	0x200042d0

080108b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80108b8:	b480      	push	{r7}
 80108ba:	b085      	sub	sp, #20
 80108bc:	af00      	add	r7, sp, #0
 80108be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80108c0:	4b28      	ldr	r3, [pc, #160]	; (8010964 <prvInsertBlockIntoFreeList+0xac>)
 80108c2:	60fb      	str	r3, [r7, #12]
 80108c4:	e002      	b.n	80108cc <prvInsertBlockIntoFreeList+0x14>
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	60fb      	str	r3, [r7, #12]
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	687a      	ldr	r2, [r7, #4]
 80108d2:	429a      	cmp	r2, r3
 80108d4:	d8f7      	bhi.n	80108c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	685b      	ldr	r3, [r3, #4]
 80108de:	68ba      	ldr	r2, [r7, #8]
 80108e0:	4413      	add	r3, r2
 80108e2:	687a      	ldr	r2, [r7, #4]
 80108e4:	429a      	cmp	r2, r3
 80108e6:	d108      	bne.n	80108fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	685a      	ldr	r2, [r3, #4]
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	685b      	ldr	r3, [r3, #4]
 80108f0:	441a      	add	r2, r3
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	685b      	ldr	r3, [r3, #4]
 8010902:	68ba      	ldr	r2, [r7, #8]
 8010904:	441a      	add	r2, r3
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	429a      	cmp	r2, r3
 801090c:	d118      	bne.n	8010940 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	681a      	ldr	r2, [r3, #0]
 8010912:	4b15      	ldr	r3, [pc, #84]	; (8010968 <prvInsertBlockIntoFreeList+0xb0>)
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	429a      	cmp	r2, r3
 8010918:	d00d      	beq.n	8010936 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	685a      	ldr	r2, [r3, #4]
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	685b      	ldr	r3, [r3, #4]
 8010924:	441a      	add	r2, r3
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	681a      	ldr	r2, [r3, #0]
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	601a      	str	r2, [r3, #0]
 8010934:	e008      	b.n	8010948 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010936:	4b0c      	ldr	r3, [pc, #48]	; (8010968 <prvInsertBlockIntoFreeList+0xb0>)
 8010938:	681a      	ldr	r2, [r3, #0]
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	601a      	str	r2, [r3, #0]
 801093e:	e003      	b.n	8010948 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	681a      	ldr	r2, [r3, #0]
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010948:	68fa      	ldr	r2, [r7, #12]
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	429a      	cmp	r2, r3
 801094e:	d002      	beq.n	8010956 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	687a      	ldr	r2, [r7, #4]
 8010954:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010956:	bf00      	nop
 8010958:	3714      	adds	r7, #20
 801095a:	46bd      	mov	sp, r7
 801095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010960:	4770      	bx	lr
 8010962:	bf00      	nop
 8010964:	200042b4 	.word	0x200042b4
 8010968:	200042bc 	.word	0x200042bc

0801096c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801096c:	b580      	push	{r7, lr}
 801096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8010970:	2201      	movs	r2, #1
 8010972:	490e      	ldr	r1, [pc, #56]	; (80109ac <MX_USB_DEVICE_Init+0x40>)
 8010974:	480e      	ldr	r0, [pc, #56]	; (80109b0 <MX_USB_DEVICE_Init+0x44>)
 8010976:	f7f9 fd2f 	bl	800a3d8 <USBD_Init>
 801097a:	4603      	mov	r3, r0
 801097c:	2b00      	cmp	r3, #0
 801097e:	d001      	beq.n	8010984 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010980:	f7f0 fee6 	bl	8001750 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_HID) != USBD_OK)
 8010984:	490b      	ldr	r1, [pc, #44]	; (80109b4 <MX_USB_DEVICE_Init+0x48>)
 8010986:	480a      	ldr	r0, [pc, #40]	; (80109b0 <MX_USB_DEVICE_Init+0x44>)
 8010988:	f7f9 fd56 	bl	800a438 <USBD_RegisterClass>
 801098c:	4603      	mov	r3, r0
 801098e:	2b00      	cmp	r3, #0
 8010990:	d001      	beq.n	8010996 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010992:	f7f0 fedd 	bl	8001750 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8010996:	4806      	ldr	r0, [pc, #24]	; (80109b0 <MX_USB_DEVICE_Init+0x44>)
 8010998:	f7f9 fd84 	bl	800a4a4 <USBD_Start>
 801099c:	4603      	mov	r3, r0
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d001      	beq.n	80109a6 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80109a2:	f7f0 fed5 	bl	8001750 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80109a6:	bf00      	nop
 80109a8:	bd80      	pop	{r7, pc}
 80109aa:	bf00      	nop
 80109ac:	200000ec 	.word	0x200000ec
 80109b0:	200042d4 	.word	0x200042d4
 80109b4:	20000014 	.word	0x20000014

080109b8 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80109b8:	b480      	push	{r7}
 80109ba:	b083      	sub	sp, #12
 80109bc:	af00      	add	r7, sp, #0
 80109be:	4603      	mov	r3, r0
 80109c0:	6039      	str	r1, [r7, #0]
 80109c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80109c4:	683b      	ldr	r3, [r7, #0]
 80109c6:	2212      	movs	r2, #18
 80109c8:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 80109ca:	4b03      	ldr	r3, [pc, #12]	; (80109d8 <USBD_HS_DeviceDescriptor+0x20>)
}
 80109cc:	4618      	mov	r0, r3
 80109ce:	370c      	adds	r7, #12
 80109d0:	46bd      	mov	sp, r7
 80109d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d6:	4770      	bx	lr
 80109d8:	2000010c 	.word	0x2000010c

080109dc <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80109dc:	b480      	push	{r7}
 80109de:	b083      	sub	sp, #12
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	4603      	mov	r3, r0
 80109e4:	6039      	str	r1, [r7, #0]
 80109e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80109e8:	683b      	ldr	r3, [r7, #0]
 80109ea:	2204      	movs	r2, #4
 80109ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80109ee:	4b03      	ldr	r3, [pc, #12]	; (80109fc <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80109f0:	4618      	mov	r0, r3
 80109f2:	370c      	adds	r7, #12
 80109f4:	46bd      	mov	sp, r7
 80109f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109fa:	4770      	bx	lr
 80109fc:	2000012c 	.word	0x2000012c

08010a00 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a00:	b580      	push	{r7, lr}
 8010a02:	b082      	sub	sp, #8
 8010a04:	af00      	add	r7, sp, #0
 8010a06:	4603      	mov	r3, r0
 8010a08:	6039      	str	r1, [r7, #0]
 8010a0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010a0c:	79fb      	ldrb	r3, [r7, #7]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d105      	bne.n	8010a1e <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8010a12:	683a      	ldr	r2, [r7, #0]
 8010a14:	4907      	ldr	r1, [pc, #28]	; (8010a34 <USBD_HS_ProductStrDescriptor+0x34>)
 8010a16:	4808      	ldr	r0, [pc, #32]	; (8010a38 <USBD_HS_ProductStrDescriptor+0x38>)
 8010a18:	f7fa ff1a 	bl	800b850 <USBD_GetString>
 8010a1c:	e004      	b.n	8010a28 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8010a1e:	683a      	ldr	r2, [r7, #0]
 8010a20:	4904      	ldr	r1, [pc, #16]	; (8010a34 <USBD_HS_ProductStrDescriptor+0x34>)
 8010a22:	4805      	ldr	r0, [pc, #20]	; (8010a38 <USBD_HS_ProductStrDescriptor+0x38>)
 8010a24:	f7fa ff14 	bl	800b850 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010a28:	4b02      	ldr	r3, [pc, #8]	; (8010a34 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8010a2a:	4618      	mov	r0, r3
 8010a2c:	3708      	adds	r7, #8
 8010a2e:	46bd      	mov	sp, r7
 8010a30:	bd80      	pop	{r7, pc}
 8010a32:	bf00      	nop
 8010a34:	200045b0 	.word	0x200045b0
 8010a38:	08011c74 	.word	0x08011c74

08010a3c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b082      	sub	sp, #8
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	4603      	mov	r3, r0
 8010a44:	6039      	str	r1, [r7, #0]
 8010a46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010a48:	683a      	ldr	r2, [r7, #0]
 8010a4a:	4904      	ldr	r1, [pc, #16]	; (8010a5c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8010a4c:	4804      	ldr	r0, [pc, #16]	; (8010a60 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8010a4e:	f7fa feff 	bl	800b850 <USBD_GetString>
  return USBD_StrDesc;
 8010a52:	4b02      	ldr	r3, [pc, #8]	; (8010a5c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8010a54:	4618      	mov	r0, r3
 8010a56:	3708      	adds	r7, #8
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	bd80      	pop	{r7, pc}
 8010a5c:	200045b0 	.word	0x200045b0
 8010a60:	08011c8c 	.word	0x08011c8c

08010a64 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a64:	b580      	push	{r7, lr}
 8010a66:	b082      	sub	sp, #8
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	4603      	mov	r3, r0
 8010a6c:	6039      	str	r1, [r7, #0]
 8010a6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010a70:	683b      	ldr	r3, [r7, #0]
 8010a72:	221a      	movs	r2, #26
 8010a74:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010a76:	f000 f855 	bl	8010b24 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8010a7a:	4b02      	ldr	r3, [pc, #8]	; (8010a84 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	3708      	adds	r7, #8
 8010a80:	46bd      	mov	sp, r7
 8010a82:	bd80      	pop	{r7, pc}
 8010a84:	20000130 	.word	0x20000130

08010a88 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a88:	b580      	push	{r7, lr}
 8010a8a:	b082      	sub	sp, #8
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	4603      	mov	r3, r0
 8010a90:	6039      	str	r1, [r7, #0]
 8010a92:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010a94:	79fb      	ldrb	r3, [r7, #7]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d105      	bne.n	8010aa6 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8010a9a:	683a      	ldr	r2, [r7, #0]
 8010a9c:	4907      	ldr	r1, [pc, #28]	; (8010abc <USBD_HS_ConfigStrDescriptor+0x34>)
 8010a9e:	4808      	ldr	r0, [pc, #32]	; (8010ac0 <USBD_HS_ConfigStrDescriptor+0x38>)
 8010aa0:	f7fa fed6 	bl	800b850 <USBD_GetString>
 8010aa4:	e004      	b.n	8010ab0 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8010aa6:	683a      	ldr	r2, [r7, #0]
 8010aa8:	4904      	ldr	r1, [pc, #16]	; (8010abc <USBD_HS_ConfigStrDescriptor+0x34>)
 8010aaa:	4805      	ldr	r0, [pc, #20]	; (8010ac0 <USBD_HS_ConfigStrDescriptor+0x38>)
 8010aac:	f7fa fed0 	bl	800b850 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010ab0:	4b02      	ldr	r3, [pc, #8]	; (8010abc <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	3708      	adds	r7, #8
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	bd80      	pop	{r7, pc}
 8010aba:	bf00      	nop
 8010abc:	200045b0 	.word	0x200045b0
 8010ac0:	08011ca0 	.word	0x08011ca0

08010ac4 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b082      	sub	sp, #8
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	4603      	mov	r3, r0
 8010acc:	6039      	str	r1, [r7, #0]
 8010ace:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010ad0:	79fb      	ldrb	r3, [r7, #7]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d105      	bne.n	8010ae2 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8010ad6:	683a      	ldr	r2, [r7, #0]
 8010ad8:	4907      	ldr	r1, [pc, #28]	; (8010af8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8010ada:	4808      	ldr	r0, [pc, #32]	; (8010afc <USBD_HS_InterfaceStrDescriptor+0x38>)
 8010adc:	f7fa feb8 	bl	800b850 <USBD_GetString>
 8010ae0:	e004      	b.n	8010aec <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8010ae2:	683a      	ldr	r2, [r7, #0]
 8010ae4:	4904      	ldr	r1, [pc, #16]	; (8010af8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8010ae6:	4805      	ldr	r0, [pc, #20]	; (8010afc <USBD_HS_InterfaceStrDescriptor+0x38>)
 8010ae8:	f7fa feb2 	bl	800b850 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010aec:	4b02      	ldr	r3, [pc, #8]	; (8010af8 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8010aee:	4618      	mov	r0, r3
 8010af0:	3708      	adds	r7, #8
 8010af2:	46bd      	mov	sp, r7
 8010af4:	bd80      	pop	{r7, pc}
 8010af6:	bf00      	nop
 8010af8:	200045b0 	.word	0x200045b0
 8010afc:	08011cac 	.word	0x08011cac

08010b00 <USBD_HS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b00:	b480      	push	{r7}
 8010b02:	b083      	sub	sp, #12
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	4603      	mov	r3, r0
 8010b08:	6039      	str	r1, [r7, #0]
 8010b0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_BOSDesc);
 8010b0c:	683b      	ldr	r3, [r7, #0]
 8010b0e:	220c      	movs	r2, #12
 8010b10:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_HS_BOSDesc;
 8010b12:	4b03      	ldr	r3, [pc, #12]	; (8010b20 <USBD_HS_USR_BOSDescriptor+0x20>)
}
 8010b14:	4618      	mov	r0, r3
 8010b16:	370c      	adds	r7, #12
 8010b18:	46bd      	mov	sp, r7
 8010b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b1e:	4770      	bx	lr
 8010b20:	20000120 	.word	0x20000120

08010b24 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b084      	sub	sp, #16
 8010b28:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010b2a:	4b0f      	ldr	r3, [pc, #60]	; (8010b68 <Get_SerialNum+0x44>)
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010b30:	4b0e      	ldr	r3, [pc, #56]	; (8010b6c <Get_SerialNum+0x48>)
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010b36:	4b0e      	ldr	r3, [pc, #56]	; (8010b70 <Get_SerialNum+0x4c>)
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010b3c:	68fa      	ldr	r2, [r7, #12]
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	4413      	add	r3, r2
 8010b42:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d009      	beq.n	8010b5e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010b4a:	2208      	movs	r2, #8
 8010b4c:	4909      	ldr	r1, [pc, #36]	; (8010b74 <Get_SerialNum+0x50>)
 8010b4e:	68f8      	ldr	r0, [r7, #12]
 8010b50:	f000 f814 	bl	8010b7c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010b54:	2204      	movs	r2, #4
 8010b56:	4908      	ldr	r1, [pc, #32]	; (8010b78 <Get_SerialNum+0x54>)
 8010b58:	68b8      	ldr	r0, [r7, #8]
 8010b5a:	f000 f80f 	bl	8010b7c <IntToUnicode>
  }
}
 8010b5e:	bf00      	nop
 8010b60:	3710      	adds	r7, #16
 8010b62:	46bd      	mov	sp, r7
 8010b64:	bd80      	pop	{r7, pc}
 8010b66:	bf00      	nop
 8010b68:	1fff7a10 	.word	0x1fff7a10
 8010b6c:	1fff7a14 	.word	0x1fff7a14
 8010b70:	1fff7a18 	.word	0x1fff7a18
 8010b74:	20000132 	.word	0x20000132
 8010b78:	20000142 	.word	0x20000142

08010b7c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010b7c:	b480      	push	{r7}
 8010b7e:	b087      	sub	sp, #28
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	60f8      	str	r0, [r7, #12]
 8010b84:	60b9      	str	r1, [r7, #8]
 8010b86:	4613      	mov	r3, r2
 8010b88:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010b8e:	2300      	movs	r3, #0
 8010b90:	75fb      	strb	r3, [r7, #23]
 8010b92:	e027      	b.n	8010be4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	0f1b      	lsrs	r3, r3, #28
 8010b98:	2b09      	cmp	r3, #9
 8010b9a:	d80b      	bhi.n	8010bb4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	0f1b      	lsrs	r3, r3, #28
 8010ba0:	b2da      	uxtb	r2, r3
 8010ba2:	7dfb      	ldrb	r3, [r7, #23]
 8010ba4:	005b      	lsls	r3, r3, #1
 8010ba6:	4619      	mov	r1, r3
 8010ba8:	68bb      	ldr	r3, [r7, #8]
 8010baa:	440b      	add	r3, r1
 8010bac:	3230      	adds	r2, #48	; 0x30
 8010bae:	b2d2      	uxtb	r2, r2
 8010bb0:	701a      	strb	r2, [r3, #0]
 8010bb2:	e00a      	b.n	8010bca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	0f1b      	lsrs	r3, r3, #28
 8010bb8:	b2da      	uxtb	r2, r3
 8010bba:	7dfb      	ldrb	r3, [r7, #23]
 8010bbc:	005b      	lsls	r3, r3, #1
 8010bbe:	4619      	mov	r1, r3
 8010bc0:	68bb      	ldr	r3, [r7, #8]
 8010bc2:	440b      	add	r3, r1
 8010bc4:	3237      	adds	r2, #55	; 0x37
 8010bc6:	b2d2      	uxtb	r2, r2
 8010bc8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	011b      	lsls	r3, r3, #4
 8010bce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010bd0:	7dfb      	ldrb	r3, [r7, #23]
 8010bd2:	005b      	lsls	r3, r3, #1
 8010bd4:	3301      	adds	r3, #1
 8010bd6:	68ba      	ldr	r2, [r7, #8]
 8010bd8:	4413      	add	r3, r2
 8010bda:	2200      	movs	r2, #0
 8010bdc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010bde:	7dfb      	ldrb	r3, [r7, #23]
 8010be0:	3301      	adds	r3, #1
 8010be2:	75fb      	strb	r3, [r7, #23]
 8010be4:	7dfa      	ldrb	r2, [r7, #23]
 8010be6:	79fb      	ldrb	r3, [r7, #7]
 8010be8:	429a      	cmp	r2, r3
 8010bea:	d3d3      	bcc.n	8010b94 <IntToUnicode+0x18>
  }
}
 8010bec:	bf00      	nop
 8010bee:	bf00      	nop
 8010bf0:	371c      	adds	r7, #28
 8010bf2:	46bd      	mov	sp, r7
 8010bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf8:	4770      	bx	lr
	...

08010bfc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	b0a0      	sub	sp, #128	; 0x80
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010c04:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010c08:	2200      	movs	r2, #0
 8010c0a:	601a      	str	r2, [r3, #0]
 8010c0c:	605a      	str	r2, [r3, #4]
 8010c0e:	609a      	str	r2, [r3, #8]
 8010c10:	60da      	str	r2, [r3, #12]
 8010c12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010c14:	f107 0310 	add.w	r3, r7, #16
 8010c18:	225c      	movs	r2, #92	; 0x5c
 8010c1a:	2100      	movs	r1, #0
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	f000 feb5 	bl	801198c <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	4a25      	ldr	r2, [pc, #148]	; (8010cbc <HAL_PCD_MspInit+0xc0>)
 8010c28:	4293      	cmp	r3, r2
 8010c2a:	d143      	bne.n	8010cb4 <HAL_PCD_MspInit+0xb8>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8010c2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010c30:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8010c32:	2300      	movs	r3, #0
 8010c34:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010c36:	f107 0310 	add.w	r3, r7, #16
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	f7f4 fb26 	bl	800528c <HAL_RCCEx_PeriphCLKConfig>
 8010c40:	4603      	mov	r3, r0
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d001      	beq.n	8010c4a <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8010c46:	f7f0 fd83 	bl	8001750 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	60fb      	str	r3, [r7, #12]
 8010c4e:	4b1c      	ldr	r3, [pc, #112]	; (8010cc0 <HAL_PCD_MspInit+0xc4>)
 8010c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c52:	4a1b      	ldr	r2, [pc, #108]	; (8010cc0 <HAL_PCD_MspInit+0xc4>)
 8010c54:	f043 0302 	orr.w	r3, r3, #2
 8010c58:	6313      	str	r3, [r2, #48]	; 0x30
 8010c5a:	4b19      	ldr	r3, [pc, #100]	; (8010cc0 <HAL_PCD_MspInit+0xc4>)
 8010c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c5e:	f003 0302 	and.w	r3, r3, #2
 8010c62:	60fb      	str	r3, [r7, #12]
 8010c64:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8010c66:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8010c6a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010c6c:	2302      	movs	r3, #2
 8010c6e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010c70:	2300      	movs	r3, #0
 8010c72:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010c74:	2303      	movs	r3, #3
 8010c76:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8010c78:	230c      	movs	r3, #12
 8010c7a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010c7c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010c80:	4619      	mov	r1, r3
 8010c82:	4810      	ldr	r0, [pc, #64]	; (8010cc4 <HAL_PCD_MspInit+0xc8>)
 8010c84:	f7f1 f934 	bl	8001ef0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8010c88:	2300      	movs	r3, #0
 8010c8a:	60bb      	str	r3, [r7, #8]
 8010c8c:	4b0c      	ldr	r3, [pc, #48]	; (8010cc0 <HAL_PCD_MspInit+0xc4>)
 8010c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c90:	4a0b      	ldr	r2, [pc, #44]	; (8010cc0 <HAL_PCD_MspInit+0xc4>)
 8010c92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010c96:	6313      	str	r3, [r2, #48]	; 0x30
 8010c98:	4b09      	ldr	r3, [pc, #36]	; (8010cc0 <HAL_PCD_MspInit+0xc4>)
 8010c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010ca0:	60bb      	str	r3, [r7, #8]
 8010ca2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8010ca4:	2200      	movs	r2, #0
 8010ca6:	2105      	movs	r1, #5
 8010ca8:	204d      	movs	r0, #77	; 0x4d
 8010caa:	f7f1 f865 	bl	8001d78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8010cae:	204d      	movs	r0, #77	; 0x4d
 8010cb0:	f7f1 f87e 	bl	8001db0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8010cb4:	bf00      	nop
 8010cb6:	3780      	adds	r7, #128	; 0x80
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	bd80      	pop	{r7, pc}
 8010cbc:	40040000 	.word	0x40040000
 8010cc0:	40023800 	.word	0x40023800
 8010cc4:	40020400 	.word	0x40020400

08010cc8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b082      	sub	sp, #8
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010cdc:	4619      	mov	r1, r3
 8010cde:	4610      	mov	r0, r2
 8010ce0:	f7f9 fc2d 	bl	800a53e <USBD_LL_SetupStage>
}
 8010ce4:	bf00      	nop
 8010ce6:	3708      	adds	r7, #8
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	bd80      	pop	{r7, pc}

08010cec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b082      	sub	sp, #8
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
 8010cf4:	460b      	mov	r3, r1
 8010cf6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010cfe:	78fa      	ldrb	r2, [r7, #3]
 8010d00:	6879      	ldr	r1, [r7, #4]
 8010d02:	4613      	mov	r3, r2
 8010d04:	00db      	lsls	r3, r3, #3
 8010d06:	4413      	add	r3, r2
 8010d08:	009b      	lsls	r3, r3, #2
 8010d0a:	440b      	add	r3, r1
 8010d0c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8010d10:	681a      	ldr	r2, [r3, #0]
 8010d12:	78fb      	ldrb	r3, [r7, #3]
 8010d14:	4619      	mov	r1, r3
 8010d16:	f7f9 fc67 	bl	800a5e8 <USBD_LL_DataOutStage>
}
 8010d1a:	bf00      	nop
 8010d1c:	3708      	adds	r7, #8
 8010d1e:	46bd      	mov	sp, r7
 8010d20:	bd80      	pop	{r7, pc}

08010d22 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d22:	b580      	push	{r7, lr}
 8010d24:	b082      	sub	sp, #8
 8010d26:	af00      	add	r7, sp, #0
 8010d28:	6078      	str	r0, [r7, #4]
 8010d2a:	460b      	mov	r3, r1
 8010d2c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010d34:	78fa      	ldrb	r2, [r7, #3]
 8010d36:	6879      	ldr	r1, [r7, #4]
 8010d38:	4613      	mov	r3, r2
 8010d3a:	00db      	lsls	r3, r3, #3
 8010d3c:	4413      	add	r3, r2
 8010d3e:	009b      	lsls	r3, r3, #2
 8010d40:	440b      	add	r3, r1
 8010d42:	334c      	adds	r3, #76	; 0x4c
 8010d44:	681a      	ldr	r2, [r3, #0]
 8010d46:	78fb      	ldrb	r3, [r7, #3]
 8010d48:	4619      	mov	r1, r3
 8010d4a:	f7f9 fd00 	bl	800a74e <USBD_LL_DataInStage>
}
 8010d4e:	bf00      	nop
 8010d50:	3708      	adds	r7, #8
 8010d52:	46bd      	mov	sp, r7
 8010d54:	bd80      	pop	{r7, pc}

08010d56 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d56:	b580      	push	{r7, lr}
 8010d58:	b082      	sub	sp, #8
 8010d5a:	af00      	add	r7, sp, #0
 8010d5c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010d64:	4618      	mov	r0, r3
 8010d66:	f7f9 fe34 	bl	800a9d2 <USBD_LL_SOF>
}
 8010d6a:	bf00      	nop
 8010d6c:	3708      	adds	r7, #8
 8010d6e:	46bd      	mov	sp, r7
 8010d70:	bd80      	pop	{r7, pc}

08010d72 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d72:	b580      	push	{r7, lr}
 8010d74:	b084      	sub	sp, #16
 8010d76:	af00      	add	r7, sp, #0
 8010d78:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010d7a:	2301      	movs	r3, #1
 8010d7c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	68db      	ldr	r3, [r3, #12]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d102      	bne.n	8010d8c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8010d86:	2300      	movs	r3, #0
 8010d88:	73fb      	strb	r3, [r7, #15]
 8010d8a:	e008      	b.n	8010d9e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	68db      	ldr	r3, [r3, #12]
 8010d90:	2b02      	cmp	r3, #2
 8010d92:	d102      	bne.n	8010d9a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8010d94:	2301      	movs	r3, #1
 8010d96:	73fb      	strb	r3, [r7, #15]
 8010d98:	e001      	b.n	8010d9e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8010d9a:	f7f0 fcd9 	bl	8001750 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010da4:	7bfa      	ldrb	r2, [r7, #15]
 8010da6:	4611      	mov	r1, r2
 8010da8:	4618      	mov	r0, r3
 8010daa:	f7f9 fdd4 	bl	800a956 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010db4:	4618      	mov	r0, r3
 8010db6:	f7f9 fd7c 	bl	800a8b2 <USBD_LL_Reset>
}
 8010dba:	bf00      	nop
 8010dbc:	3710      	adds	r7, #16
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	bd80      	pop	{r7, pc}
	...

08010dc4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b082      	sub	sp, #8
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	f7f9 fdcf 	bl	800a976 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	687a      	ldr	r2, [r7, #4]
 8010de4:	6812      	ldr	r2, [r2, #0]
 8010de6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010dea:	f043 0301 	orr.w	r3, r3, #1
 8010dee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	6a1b      	ldr	r3, [r3, #32]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d005      	beq.n	8010e04 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010df8:	4b04      	ldr	r3, [pc, #16]	; (8010e0c <HAL_PCD_SuspendCallback+0x48>)
 8010dfa:	691b      	ldr	r3, [r3, #16]
 8010dfc:	4a03      	ldr	r2, [pc, #12]	; (8010e0c <HAL_PCD_SuspendCallback+0x48>)
 8010dfe:	f043 0306 	orr.w	r3, r3, #6
 8010e02:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010e04:	bf00      	nop
 8010e06:	3708      	adds	r7, #8
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	bd80      	pop	{r7, pc}
 8010e0c:	e000ed00 	.word	0xe000ed00

08010e10 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e10:	b580      	push	{r7, lr}
 8010e12:	b082      	sub	sp, #8
 8010e14:	af00      	add	r7, sp, #0
 8010e16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010e1e:	4618      	mov	r0, r3
 8010e20:	f7f9 fdbf 	bl	800a9a2 <USBD_LL_Resume>
}
 8010e24:	bf00      	nop
 8010e26:	3708      	adds	r7, #8
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	bd80      	pop	{r7, pc}

08010e2c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e2c:	b580      	push	{r7, lr}
 8010e2e:	b082      	sub	sp, #8
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	6078      	str	r0, [r7, #4]
 8010e34:	460b      	mov	r3, r1
 8010e36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010e3e:	78fa      	ldrb	r2, [r7, #3]
 8010e40:	4611      	mov	r1, r2
 8010e42:	4618      	mov	r0, r3
 8010e44:	f7f9 fe17 	bl	800aa76 <USBD_LL_IsoOUTIncomplete>
}
 8010e48:	bf00      	nop
 8010e4a:	3708      	adds	r7, #8
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	bd80      	pop	{r7, pc}

08010e50 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e50:	b580      	push	{r7, lr}
 8010e52:	b082      	sub	sp, #8
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
 8010e58:	460b      	mov	r3, r1
 8010e5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010e62:	78fa      	ldrb	r2, [r7, #3]
 8010e64:	4611      	mov	r1, r2
 8010e66:	4618      	mov	r0, r3
 8010e68:	f7f9 fdd3 	bl	800aa12 <USBD_LL_IsoINIncomplete>
}
 8010e6c:	bf00      	nop
 8010e6e:	3708      	adds	r7, #8
 8010e70:	46bd      	mov	sp, r7
 8010e72:	bd80      	pop	{r7, pc}

08010e74 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e74:	b580      	push	{r7, lr}
 8010e76:	b082      	sub	sp, #8
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010e82:	4618      	mov	r0, r3
 8010e84:	f7f9 fe29 	bl	800aada <USBD_LL_DevConnected>
}
 8010e88:	bf00      	nop
 8010e8a:	3708      	adds	r7, #8
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	bd80      	pop	{r7, pc}

08010e90 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b082      	sub	sp, #8
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	f7f9 fe26 	bl	800aaf0 <USBD_LL_DevDisconnected>
}
 8010ea4:	bf00      	nop
 8010ea6:	3708      	adds	r7, #8
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	bd80      	pop	{r7, pc}

08010eac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010eac:	b580      	push	{r7, lr}
 8010eae:	b082      	sub	sp, #8
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	781b      	ldrb	r3, [r3, #0]
 8010eb8:	2b01      	cmp	r3, #1
 8010eba:	d140      	bne.n	8010f3e <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8010ebc:	4a22      	ldr	r2, [pc, #136]	; (8010f48 <USBD_LL_Init+0x9c>)
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	4a20      	ldr	r2, [pc, #128]	; (8010f48 <USBD_LL_Init+0x9c>)
 8010ec8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8010ecc:	4b1e      	ldr	r3, [pc, #120]	; (8010f48 <USBD_LL_Init+0x9c>)
 8010ece:	4a1f      	ldr	r2, [pc, #124]	; (8010f4c <USBD_LL_Init+0xa0>)
 8010ed0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 8;
 8010ed2:	4b1d      	ldr	r3, [pc, #116]	; (8010f48 <USBD_LL_Init+0x9c>)
 8010ed4:	2208      	movs	r2, #8
 8010ed6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8010ed8:	4b1b      	ldr	r3, [pc, #108]	; (8010f48 <USBD_LL_Init+0x9c>)
 8010eda:	2202      	movs	r2, #2
 8010edc:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8010ede:	4b1a      	ldr	r3, [pc, #104]	; (8010f48 <USBD_LL_Init+0x9c>)
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8010ee4:	4b18      	ldr	r3, [pc, #96]	; (8010f48 <USBD_LL_Init+0x9c>)
 8010ee6:	2202      	movs	r2, #2
 8010ee8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8010eea:	4b17      	ldr	r3, [pc, #92]	; (8010f48 <USBD_LL_Init+0x9c>)
 8010eec:	2200      	movs	r2, #0
 8010eee:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8010ef0:	4b15      	ldr	r3, [pc, #84]	; (8010f48 <USBD_LL_Init+0x9c>)
 8010ef2:	2200      	movs	r2, #0
 8010ef4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8010ef6:	4b14      	ldr	r3, [pc, #80]	; (8010f48 <USBD_LL_Init+0x9c>)
 8010ef8:	2200      	movs	r2, #0
 8010efa:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8010efc:	4b12      	ldr	r3, [pc, #72]	; (8010f48 <USBD_LL_Init+0x9c>)
 8010efe:	2200      	movs	r2, #0
 8010f00:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8010f02:	4b11      	ldr	r3, [pc, #68]	; (8010f48 <USBD_LL_Init+0x9c>)
 8010f04:	2200      	movs	r2, #0
 8010f06:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8010f08:	4b0f      	ldr	r3, [pc, #60]	; (8010f48 <USBD_LL_Init+0x9c>)
 8010f0a:	2200      	movs	r2, #0
 8010f0c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8010f0e:	480e      	ldr	r0, [pc, #56]	; (8010f48 <USBD_LL_Init+0x9c>)
 8010f10:	f7f2 fdbe 	bl	8003a90 <HAL_PCD_Init>
 8010f14:	4603      	mov	r3, r0
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d001      	beq.n	8010f1e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8010f1a:	f7f0 fc19 	bl	8001750 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8010f1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010f22:	4809      	ldr	r0, [pc, #36]	; (8010f48 <USBD_LL_Init+0x9c>)
 8010f24:	f7f4 f831 	bl	8004f8a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8010f28:	2280      	movs	r2, #128	; 0x80
 8010f2a:	2100      	movs	r1, #0
 8010f2c:	4806      	ldr	r0, [pc, #24]	; (8010f48 <USBD_LL_Init+0x9c>)
 8010f2e:	f7f3 ffe5 	bl	8004efc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8010f32:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8010f36:	2101      	movs	r1, #1
 8010f38:	4803      	ldr	r0, [pc, #12]	; (8010f48 <USBD_LL_Init+0x9c>)
 8010f3a:	f7f3 ffdf 	bl	8004efc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010f3e:	2300      	movs	r3, #0
}
 8010f40:	4618      	mov	r0, r3
 8010f42:	3708      	adds	r7, #8
 8010f44:	46bd      	mov	sp, r7
 8010f46:	bd80      	pop	{r7, pc}
 8010f48:	200047b0 	.word	0x200047b0
 8010f4c:	40040000 	.word	0x40040000

08010f50 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010f50:	b580      	push	{r7, lr}
 8010f52:	b084      	sub	sp, #16
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f58:	2300      	movs	r3, #0
 8010f5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010f66:	4618      	mov	r0, r3
 8010f68:	f7f2 feb6 	bl	8003cd8 <HAL_PCD_Start>
 8010f6c:	4603      	mov	r3, r0
 8010f6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010f70:	7bfb      	ldrb	r3, [r7, #15]
 8010f72:	4618      	mov	r0, r3
 8010f74:	f000 f97e 	bl	8011274 <USBD_Get_USB_Status>
 8010f78:	4603      	mov	r3, r0
 8010f7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010f7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8010f7e:	4618      	mov	r0, r3
 8010f80:	3710      	adds	r7, #16
 8010f82:	46bd      	mov	sp, r7
 8010f84:	bd80      	pop	{r7, pc}

08010f86 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010f86:	b580      	push	{r7, lr}
 8010f88:	b084      	sub	sp, #16
 8010f8a:	af00      	add	r7, sp, #0
 8010f8c:	6078      	str	r0, [r7, #4]
 8010f8e:	4608      	mov	r0, r1
 8010f90:	4611      	mov	r1, r2
 8010f92:	461a      	mov	r2, r3
 8010f94:	4603      	mov	r3, r0
 8010f96:	70fb      	strb	r3, [r7, #3]
 8010f98:	460b      	mov	r3, r1
 8010f9a:	70bb      	strb	r3, [r7, #2]
 8010f9c:	4613      	mov	r3, r2
 8010f9e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010fa0:	2300      	movs	r3, #0
 8010fa2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010fae:	78bb      	ldrb	r3, [r7, #2]
 8010fb0:	883a      	ldrh	r2, [r7, #0]
 8010fb2:	78f9      	ldrb	r1, [r7, #3]
 8010fb4:	f7f3 fbb4 	bl	8004720 <HAL_PCD_EP_Open>
 8010fb8:	4603      	mov	r3, r0
 8010fba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010fbc:	7bfb      	ldrb	r3, [r7, #15]
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	f000 f958 	bl	8011274 <USBD_Get_USB_Status>
 8010fc4:	4603      	mov	r3, r0
 8010fc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010fc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8010fca:	4618      	mov	r0, r3
 8010fcc:	3710      	adds	r7, #16
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	bd80      	pop	{r7, pc}

08010fd2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010fd2:	b580      	push	{r7, lr}
 8010fd4:	b084      	sub	sp, #16
 8010fd6:	af00      	add	r7, sp, #0
 8010fd8:	6078      	str	r0, [r7, #4]
 8010fda:	460b      	mov	r3, r1
 8010fdc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010fde:	2300      	movs	r3, #0
 8010fe0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010fec:	78fa      	ldrb	r2, [r7, #3]
 8010fee:	4611      	mov	r1, r2
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	f7f3 fbfd 	bl	80047f0 <HAL_PCD_EP_Close>
 8010ff6:	4603      	mov	r3, r0
 8010ff8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ffa:	7bfb      	ldrb	r3, [r7, #15]
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	f000 f939 	bl	8011274 <USBD_Get_USB_Status>
 8011002:	4603      	mov	r3, r0
 8011004:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011006:	7bbb      	ldrb	r3, [r7, #14]
}
 8011008:	4618      	mov	r0, r3
 801100a:	3710      	adds	r7, #16
 801100c:	46bd      	mov	sp, r7
 801100e:	bd80      	pop	{r7, pc}

08011010 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011010:	b580      	push	{r7, lr}
 8011012:	b084      	sub	sp, #16
 8011014:	af00      	add	r7, sp, #0
 8011016:	6078      	str	r0, [r7, #4]
 8011018:	460b      	mov	r3, r1
 801101a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801101c:	2300      	movs	r3, #0
 801101e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011020:	2300      	movs	r3, #0
 8011022:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801102a:	78fa      	ldrb	r2, [r7, #3]
 801102c:	4611      	mov	r1, r2
 801102e:	4618      	mov	r0, r3
 8011030:	f7f3 fcbd 	bl	80049ae <HAL_PCD_EP_SetStall>
 8011034:	4603      	mov	r3, r0
 8011036:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011038:	7bfb      	ldrb	r3, [r7, #15]
 801103a:	4618      	mov	r0, r3
 801103c:	f000 f91a 	bl	8011274 <USBD_Get_USB_Status>
 8011040:	4603      	mov	r3, r0
 8011042:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011044:	7bbb      	ldrb	r3, [r7, #14]
}
 8011046:	4618      	mov	r0, r3
 8011048:	3710      	adds	r7, #16
 801104a:	46bd      	mov	sp, r7
 801104c:	bd80      	pop	{r7, pc}

0801104e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801104e:	b580      	push	{r7, lr}
 8011050:	b084      	sub	sp, #16
 8011052:	af00      	add	r7, sp, #0
 8011054:	6078      	str	r0, [r7, #4]
 8011056:	460b      	mov	r3, r1
 8011058:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801105a:	2300      	movs	r3, #0
 801105c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801105e:	2300      	movs	r3, #0
 8011060:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011068:	78fa      	ldrb	r2, [r7, #3]
 801106a:	4611      	mov	r1, r2
 801106c:	4618      	mov	r0, r3
 801106e:	f7f3 fd02 	bl	8004a76 <HAL_PCD_EP_ClrStall>
 8011072:	4603      	mov	r3, r0
 8011074:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011076:	7bfb      	ldrb	r3, [r7, #15]
 8011078:	4618      	mov	r0, r3
 801107a:	f000 f8fb 	bl	8011274 <USBD_Get_USB_Status>
 801107e:	4603      	mov	r3, r0
 8011080:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011082:	7bbb      	ldrb	r3, [r7, #14]
}
 8011084:	4618      	mov	r0, r3
 8011086:	3710      	adds	r7, #16
 8011088:	46bd      	mov	sp, r7
 801108a:	bd80      	pop	{r7, pc}

0801108c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801108c:	b480      	push	{r7}
 801108e:	b085      	sub	sp, #20
 8011090:	af00      	add	r7, sp, #0
 8011092:	6078      	str	r0, [r7, #4]
 8011094:	460b      	mov	r3, r1
 8011096:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801109e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80110a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	da0b      	bge.n	80110c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80110a8:	78fb      	ldrb	r3, [r7, #3]
 80110aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80110ae:	68f9      	ldr	r1, [r7, #12]
 80110b0:	4613      	mov	r3, r2
 80110b2:	00db      	lsls	r3, r3, #3
 80110b4:	4413      	add	r3, r2
 80110b6:	009b      	lsls	r3, r3, #2
 80110b8:	440b      	add	r3, r1
 80110ba:	333e      	adds	r3, #62	; 0x3e
 80110bc:	781b      	ldrb	r3, [r3, #0]
 80110be:	e00b      	b.n	80110d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80110c0:	78fb      	ldrb	r3, [r7, #3]
 80110c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80110c6:	68f9      	ldr	r1, [r7, #12]
 80110c8:	4613      	mov	r3, r2
 80110ca:	00db      	lsls	r3, r3, #3
 80110cc:	4413      	add	r3, r2
 80110ce:	009b      	lsls	r3, r3, #2
 80110d0:	440b      	add	r3, r1
 80110d2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80110d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80110d8:	4618      	mov	r0, r3
 80110da:	3714      	adds	r7, #20
 80110dc:	46bd      	mov	sp, r7
 80110de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e2:	4770      	bx	lr

080110e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b084      	sub	sp, #16
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
 80110ec:	460b      	mov	r3, r1
 80110ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80110f0:	2300      	movs	r3, #0
 80110f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80110f4:	2300      	movs	r3, #0
 80110f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80110fe:	78fa      	ldrb	r2, [r7, #3]
 8011100:	4611      	mov	r1, r2
 8011102:	4618      	mov	r0, r3
 8011104:	f7f3 fae7 	bl	80046d6 <HAL_PCD_SetAddress>
 8011108:	4603      	mov	r3, r0
 801110a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801110c:	7bfb      	ldrb	r3, [r7, #15]
 801110e:	4618      	mov	r0, r3
 8011110:	f000 f8b0 	bl	8011274 <USBD_Get_USB_Status>
 8011114:	4603      	mov	r3, r0
 8011116:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011118:	7bbb      	ldrb	r3, [r7, #14]
}
 801111a:	4618      	mov	r0, r3
 801111c:	3710      	adds	r7, #16
 801111e:	46bd      	mov	sp, r7
 8011120:	bd80      	pop	{r7, pc}

08011122 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011122:	b580      	push	{r7, lr}
 8011124:	b086      	sub	sp, #24
 8011126:	af00      	add	r7, sp, #0
 8011128:	60f8      	str	r0, [r7, #12]
 801112a:	607a      	str	r2, [r7, #4]
 801112c:	603b      	str	r3, [r7, #0]
 801112e:	460b      	mov	r3, r1
 8011130:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011132:	2300      	movs	r3, #0
 8011134:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011136:	2300      	movs	r3, #0
 8011138:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011140:	7af9      	ldrb	r1, [r7, #11]
 8011142:	683b      	ldr	r3, [r7, #0]
 8011144:	687a      	ldr	r2, [r7, #4]
 8011146:	f7f3 fbe8 	bl	800491a <HAL_PCD_EP_Transmit>
 801114a:	4603      	mov	r3, r0
 801114c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801114e:	7dfb      	ldrb	r3, [r7, #23]
 8011150:	4618      	mov	r0, r3
 8011152:	f000 f88f 	bl	8011274 <USBD_Get_USB_Status>
 8011156:	4603      	mov	r3, r0
 8011158:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801115a:	7dbb      	ldrb	r3, [r7, #22]
}
 801115c:	4618      	mov	r0, r3
 801115e:	3718      	adds	r7, #24
 8011160:	46bd      	mov	sp, r7
 8011162:	bd80      	pop	{r7, pc}

08011164 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011164:	b580      	push	{r7, lr}
 8011166:	b086      	sub	sp, #24
 8011168:	af00      	add	r7, sp, #0
 801116a:	60f8      	str	r0, [r7, #12]
 801116c:	607a      	str	r2, [r7, #4]
 801116e:	603b      	str	r3, [r7, #0]
 8011170:	460b      	mov	r3, r1
 8011172:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011174:	2300      	movs	r3, #0
 8011176:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011178:	2300      	movs	r3, #0
 801117a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011182:	7af9      	ldrb	r1, [r7, #11]
 8011184:	683b      	ldr	r3, [r7, #0]
 8011186:	687a      	ldr	r2, [r7, #4]
 8011188:	f7f3 fb7c 	bl	8004884 <HAL_PCD_EP_Receive>
 801118c:	4603      	mov	r3, r0
 801118e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011190:	7dfb      	ldrb	r3, [r7, #23]
 8011192:	4618      	mov	r0, r3
 8011194:	f000 f86e 	bl	8011274 <USBD_Get_USB_Status>
 8011198:	4603      	mov	r3, r0
 801119a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801119c:	7dbb      	ldrb	r3, [r7, #22]
}
 801119e:	4618      	mov	r0, r3
 80111a0:	3718      	adds	r7, #24
 80111a2:	46bd      	mov	sp, r7
 80111a4:	bd80      	pop	{r7, pc}
	...

080111a8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80111a8:	b580      	push	{r7, lr}
 80111aa:	b082      	sub	sp, #8
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	6078      	str	r0, [r7, #4]
 80111b0:	460b      	mov	r3, r1
 80111b2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80111b4:	78fb      	ldrb	r3, [r7, #3]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d002      	beq.n	80111c0 <HAL_PCDEx_LPM_Callback+0x18>
 80111ba:	2b01      	cmp	r3, #1
 80111bc:	d01f      	beq.n	80111fe <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80111be:	e03b      	b.n	8011238 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	6a1b      	ldr	r3, [r3, #32]
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d007      	beq.n	80111d8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 80111c8:	f7ef ffd6 	bl	8001178 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80111cc:	4b1c      	ldr	r3, [pc, #112]	; (8011240 <HAL_PCDEx_LPM_Callback+0x98>)
 80111ce:	691b      	ldr	r3, [r3, #16]
 80111d0:	4a1b      	ldr	r2, [pc, #108]	; (8011240 <HAL_PCDEx_LPM_Callback+0x98>)
 80111d2:	f023 0306 	bic.w	r3, r3, #6
 80111d6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	687a      	ldr	r2, [r7, #4]
 80111e4:	6812      	ldr	r2, [r2, #0]
 80111e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80111ea:	f023 0301 	bic.w	r3, r3, #1
 80111ee:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80111f6:	4618      	mov	r0, r3
 80111f8:	f7f9 fbd3 	bl	800a9a2 <USBD_LL_Resume>
    break;
 80111fc:	e01c      	b.n	8011238 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	687a      	ldr	r2, [r7, #4]
 801120a:	6812      	ldr	r2, [r2, #0]
 801120c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011210:	f043 0301 	orr.w	r3, r3, #1
 8011214:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801121c:	4618      	mov	r0, r3
 801121e:	f7f9 fbaa 	bl	800a976 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	6a1b      	ldr	r3, [r3, #32]
 8011226:	2b00      	cmp	r3, #0
 8011228:	d005      	beq.n	8011236 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801122a:	4b05      	ldr	r3, [pc, #20]	; (8011240 <HAL_PCDEx_LPM_Callback+0x98>)
 801122c:	691b      	ldr	r3, [r3, #16]
 801122e:	4a04      	ldr	r2, [pc, #16]	; (8011240 <HAL_PCDEx_LPM_Callback+0x98>)
 8011230:	f043 0306 	orr.w	r3, r3, #6
 8011234:	6113      	str	r3, [r2, #16]
    break;
 8011236:	bf00      	nop
}
 8011238:	bf00      	nop
 801123a:	3708      	adds	r7, #8
 801123c:	46bd      	mov	sp, r7
 801123e:	bd80      	pop	{r7, pc}
 8011240:	e000ed00 	.word	0xe000ed00

08011244 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011244:	b480      	push	{r7}
 8011246:	b083      	sub	sp, #12
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801124c:	4b03      	ldr	r3, [pc, #12]	; (801125c <USBD_static_malloc+0x18>)
}
 801124e:	4618      	mov	r0, r3
 8011250:	370c      	adds	r7, #12
 8011252:	46bd      	mov	sp, r7
 8011254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011258:	4770      	bx	lr
 801125a:	bf00      	nop
 801125c:	20004cbc 	.word	0x20004cbc

08011260 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011260:	b480      	push	{r7}
 8011262:	b083      	sub	sp, #12
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]

}
 8011268:	bf00      	nop
 801126a:	370c      	adds	r7, #12
 801126c:	46bd      	mov	sp, r7
 801126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011272:	4770      	bx	lr

08011274 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011274:	b480      	push	{r7}
 8011276:	b085      	sub	sp, #20
 8011278:	af00      	add	r7, sp, #0
 801127a:	4603      	mov	r3, r0
 801127c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801127e:	2300      	movs	r3, #0
 8011280:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011282:	79fb      	ldrb	r3, [r7, #7]
 8011284:	2b03      	cmp	r3, #3
 8011286:	d817      	bhi.n	80112b8 <USBD_Get_USB_Status+0x44>
 8011288:	a201      	add	r2, pc, #4	; (adr r2, 8011290 <USBD_Get_USB_Status+0x1c>)
 801128a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801128e:	bf00      	nop
 8011290:	080112a1 	.word	0x080112a1
 8011294:	080112a7 	.word	0x080112a7
 8011298:	080112ad 	.word	0x080112ad
 801129c:	080112b3 	.word	0x080112b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80112a0:	2300      	movs	r3, #0
 80112a2:	73fb      	strb	r3, [r7, #15]
    break;
 80112a4:	e00b      	b.n	80112be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80112a6:	2303      	movs	r3, #3
 80112a8:	73fb      	strb	r3, [r7, #15]
    break;
 80112aa:	e008      	b.n	80112be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80112ac:	2301      	movs	r3, #1
 80112ae:	73fb      	strb	r3, [r7, #15]
    break;
 80112b0:	e005      	b.n	80112be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80112b2:	2303      	movs	r3, #3
 80112b4:	73fb      	strb	r3, [r7, #15]
    break;
 80112b6:	e002      	b.n	80112be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80112b8:	2303      	movs	r3, #3
 80112ba:	73fb      	strb	r3, [r7, #15]
    break;
 80112bc:	bf00      	nop
  }
  return usb_status;
 80112be:	7bfb      	ldrb	r3, [r7, #15]
}
 80112c0:	4618      	mov	r0, r3
 80112c2:	3714      	adds	r7, #20
 80112c4:	46bd      	mov	sp, r7
 80112c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ca:	4770      	bx	lr

080112cc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80112d0:	2201      	movs	r2, #1
 80112d2:	490e      	ldr	r1, [pc, #56]	; (801130c <MX_USB_HOST_Init+0x40>)
 80112d4:	480e      	ldr	r0, [pc, #56]	; (8011310 <MX_USB_HOST_Init+0x44>)
 80112d6:	f7fb fa47 	bl	800c768 <USBH_Init>
 80112da:	4603      	mov	r3, r0
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d001      	beq.n	80112e4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80112e0:	f7f0 fa36 	bl	8001750 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 80112e4:	490b      	ldr	r1, [pc, #44]	; (8011314 <MX_USB_HOST_Init+0x48>)
 80112e6:	480a      	ldr	r0, [pc, #40]	; (8011310 <MX_USB_HOST_Init+0x44>)
 80112e8:	f7fb faf4 	bl	800c8d4 <USBH_RegisterClass>
 80112ec:	4603      	mov	r3, r0
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d001      	beq.n	80112f6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80112f2:	f7f0 fa2d 	bl	8001750 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80112f6:	4806      	ldr	r0, [pc, #24]	; (8011310 <MX_USB_HOST_Init+0x44>)
 80112f8:	f7fb fb78 	bl	800c9ec <USBH_Start>
 80112fc:	4603      	mov	r3, r0
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d001      	beq.n	8011306 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8011302:	f7f0 fa25 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8011306:	bf00      	nop
 8011308:	bd80      	pop	{r7, pc}
 801130a:	bf00      	nop
 801130c:	08011319 	.word	0x08011319
 8011310:	20004cd0 	.word	0x20004cd0
 8011314:	200000c8 	.word	0x200000c8

08011318 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8011318:	b480      	push	{r7}
 801131a:	b083      	sub	sp, #12
 801131c:	af00      	add	r7, sp, #0
 801131e:	6078      	str	r0, [r7, #4]
 8011320:	460b      	mov	r3, r1
 8011322:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8011324:	78fb      	ldrb	r3, [r7, #3]
 8011326:	3b01      	subs	r3, #1
 8011328:	2b04      	cmp	r3, #4
 801132a:	d819      	bhi.n	8011360 <USBH_UserProcess+0x48>
 801132c:	a201      	add	r2, pc, #4	; (adr r2, 8011334 <USBH_UserProcess+0x1c>)
 801132e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011332:	bf00      	nop
 8011334:	08011361 	.word	0x08011361
 8011338:	08011351 	.word	0x08011351
 801133c:	08011361 	.word	0x08011361
 8011340:	08011359 	.word	0x08011359
 8011344:	08011349 	.word	0x08011349
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8011348:	4b09      	ldr	r3, [pc, #36]	; (8011370 <USBH_UserProcess+0x58>)
 801134a:	2203      	movs	r2, #3
 801134c:	701a      	strb	r2, [r3, #0]
  break;
 801134e:	e008      	b.n	8011362 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8011350:	4b07      	ldr	r3, [pc, #28]	; (8011370 <USBH_UserProcess+0x58>)
 8011352:	2202      	movs	r2, #2
 8011354:	701a      	strb	r2, [r3, #0]
  break;
 8011356:	e004      	b.n	8011362 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8011358:	4b05      	ldr	r3, [pc, #20]	; (8011370 <USBH_UserProcess+0x58>)
 801135a:	2201      	movs	r2, #1
 801135c:	701a      	strb	r2, [r3, #0]
  break;
 801135e:	e000      	b.n	8011362 <USBH_UserProcess+0x4a>

  default:
  break;
 8011360:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8011362:	bf00      	nop
 8011364:	370c      	adds	r7, #12
 8011366:	46bd      	mov	sp, r7
 8011368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801136c:	4770      	bx	lr
 801136e:	bf00      	nop
 8011370:	200050b4 	.word	0x200050b4

08011374 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8011374:	b580      	push	{r7, lr}
 8011376:	b0a0      	sub	sp, #128	; 0x80
 8011378:	af00      	add	r7, sp, #0
 801137a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801137c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011380:	2200      	movs	r2, #0
 8011382:	601a      	str	r2, [r3, #0]
 8011384:	605a      	str	r2, [r3, #4]
 8011386:	609a      	str	r2, [r3, #8]
 8011388:	60da      	str	r2, [r3, #12]
 801138a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801138c:	f107 0310 	add.w	r3, r7, #16
 8011390:	225c      	movs	r2, #92	; 0x5c
 8011392:	2100      	movs	r1, #0
 8011394:	4618      	mov	r0, r3
 8011396:	f000 faf9 	bl	801198c <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80113a2:	d156      	bne.n	8011452 <HAL_HCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80113a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80113a8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80113aa:	2300      	movs	r3, #0
 80113ac:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80113ae:	f107 0310 	add.w	r3, r7, #16
 80113b2:	4618      	mov	r0, r3
 80113b4:	f7f3 ff6a 	bl	800528c <HAL_RCCEx_PeriphCLKConfig>
 80113b8:	4603      	mov	r3, r0
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d001      	beq.n	80113c2 <HAL_HCD_MspInit+0x4e>
    {
      Error_Handler();
 80113be:	f7f0 f9c7 	bl	8001750 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80113c2:	2300      	movs	r3, #0
 80113c4:	60fb      	str	r3, [r7, #12]
 80113c6:	4b25      	ldr	r3, [pc, #148]	; (801145c <HAL_HCD_MspInit+0xe8>)
 80113c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113ca:	4a24      	ldr	r2, [pc, #144]	; (801145c <HAL_HCD_MspInit+0xe8>)
 80113cc:	f043 0301 	orr.w	r3, r3, #1
 80113d0:	6313      	str	r3, [r2, #48]	; 0x30
 80113d2:	4b22      	ldr	r3, [pc, #136]	; (801145c <HAL_HCD_MspInit+0xe8>)
 80113d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113d6:	f003 0301 	and.w	r3, r3, #1
 80113da:	60fb      	str	r3, [r7, #12]
 80113dc:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80113de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80113e2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80113e4:	2300      	movs	r3, #0
 80113e6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80113e8:	2300      	movs	r3, #0
 80113ea:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80113ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80113f0:	4619      	mov	r1, r3
 80113f2:	481b      	ldr	r0, [pc, #108]	; (8011460 <HAL_HCD_MspInit+0xec>)
 80113f4:	f7f0 fd7c 	bl	8001ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80113f8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80113fc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80113fe:	2302      	movs	r3, #2
 8011400:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011402:	2300      	movs	r3, #0
 8011404:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011406:	2303      	movs	r3, #3
 8011408:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801140a:	230a      	movs	r3, #10
 801140c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801140e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011412:	4619      	mov	r1, r3
 8011414:	4812      	ldr	r0, [pc, #72]	; (8011460 <HAL_HCD_MspInit+0xec>)
 8011416:	f7f0 fd6b 	bl	8001ef0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801141a:	4b10      	ldr	r3, [pc, #64]	; (801145c <HAL_HCD_MspInit+0xe8>)
 801141c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801141e:	4a0f      	ldr	r2, [pc, #60]	; (801145c <HAL_HCD_MspInit+0xe8>)
 8011420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011424:	6353      	str	r3, [r2, #52]	; 0x34
 8011426:	2300      	movs	r3, #0
 8011428:	60bb      	str	r3, [r7, #8]
 801142a:	4b0c      	ldr	r3, [pc, #48]	; (801145c <HAL_HCD_MspInit+0xe8>)
 801142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801142e:	4a0b      	ldr	r2, [pc, #44]	; (801145c <HAL_HCD_MspInit+0xe8>)
 8011430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011434:	6453      	str	r3, [r2, #68]	; 0x44
 8011436:	4b09      	ldr	r3, [pc, #36]	; (801145c <HAL_HCD_MspInit+0xe8>)
 8011438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801143a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801143e:	60bb      	str	r3, [r7, #8]
 8011440:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8011442:	2200      	movs	r2, #0
 8011444:	2105      	movs	r1, #5
 8011446:	2043      	movs	r0, #67	; 0x43
 8011448:	f7f0 fc96 	bl	8001d78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801144c:	2043      	movs	r0, #67	; 0x43
 801144e:	f7f0 fcaf 	bl	8001db0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011452:	bf00      	nop
 8011454:	3780      	adds	r7, #128	; 0x80
 8011456:	46bd      	mov	sp, r7
 8011458:	bd80      	pop	{r7, pc}
 801145a:	bf00      	nop
 801145c:	40023800 	.word	0x40023800
 8011460:	40020000 	.word	0x40020000

08011464 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8011464:	b580      	push	{r7, lr}
 8011466:	b082      	sub	sp, #8
 8011468:	af00      	add	r7, sp, #0
 801146a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011472:	4618      	mov	r0, r3
 8011474:	f7fb ff71 	bl	800d35a <USBH_LL_IncTimer>
}
 8011478:	bf00      	nop
 801147a:	3708      	adds	r7, #8
 801147c:	46bd      	mov	sp, r7
 801147e:	bd80      	pop	{r7, pc}

08011480 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011480:	b580      	push	{r7, lr}
 8011482:	b082      	sub	sp, #8
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801148e:	4618      	mov	r0, r3
 8011490:	f7fb ffb5 	bl	800d3fe <USBH_LL_Connect>
}
 8011494:	bf00      	nop
 8011496:	3708      	adds	r7, #8
 8011498:	46bd      	mov	sp, r7
 801149a:	bd80      	pop	{r7, pc}

0801149c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801149c:	b580      	push	{r7, lr}
 801149e:	b082      	sub	sp, #8
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80114aa:	4618      	mov	r0, r3
 80114ac:	f7fb ffca 	bl	800d444 <USBH_LL_Disconnect>
}
 80114b0:	bf00      	nop
 80114b2:	3708      	adds	r7, #8
 80114b4:	46bd      	mov	sp, r7
 80114b6:	bd80      	pop	{r7, pc}

080114b8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b082      	sub	sp, #8
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
 80114c0:	460b      	mov	r3, r1
 80114c2:	70fb      	strb	r3, [r7, #3]
 80114c4:	4613      	mov	r3, r2
 80114c6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80114ce:	4618      	mov	r0, r3
 80114d0:	f7fb ffff 	bl	800d4d2 <USBH_LL_NotifyURBChange>
#endif
}
 80114d4:	bf00      	nop
 80114d6:	3708      	adds	r7, #8
 80114d8:	46bd      	mov	sp, r7
 80114da:	bd80      	pop	{r7, pc}

080114dc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80114dc:	b580      	push	{r7, lr}
 80114de:	b082      	sub	sp, #8
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80114ea:	4618      	mov	r0, r3
 80114ec:	f7fb ff5f 	bl	800d3ae <USBH_LL_PortEnabled>
}
 80114f0:	bf00      	nop
 80114f2:	3708      	adds	r7, #8
 80114f4:	46bd      	mov	sp, r7
 80114f6:	bd80      	pop	{r7, pc}

080114f8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80114f8:	b580      	push	{r7, lr}
 80114fa:	b082      	sub	sp, #8
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011506:	4618      	mov	r0, r3
 8011508:	f7fb ff6b 	bl	800d3e2 <USBH_LL_PortDisabled>
}
 801150c:	bf00      	nop
 801150e:	3708      	adds	r7, #8
 8011510:	46bd      	mov	sp, r7
 8011512:	bd80      	pop	{r7, pc}

08011514 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8011514:	b580      	push	{r7, lr}
 8011516:	b082      	sub	sp, #8
 8011518:	af00      	add	r7, sp, #0
 801151a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8011522:	2b01      	cmp	r3, #1
 8011524:	d12a      	bne.n	801157c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8011526:	4a18      	ldr	r2, [pc, #96]	; (8011588 <USBH_LL_Init+0x74>)
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	4a15      	ldr	r2, [pc, #84]	; (8011588 <USBH_LL_Init+0x74>)
 8011532:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011536:	4b14      	ldr	r3, [pc, #80]	; (8011588 <USBH_LL_Init+0x74>)
 8011538:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801153c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 801153e:	4b12      	ldr	r3, [pc, #72]	; (8011588 <USBH_LL_Init+0x74>)
 8011540:	220c      	movs	r2, #12
 8011542:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8011544:	4b10      	ldr	r3, [pc, #64]	; (8011588 <USBH_LL_Init+0x74>)
 8011546:	2201      	movs	r2, #1
 8011548:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801154a:	4b0f      	ldr	r3, [pc, #60]	; (8011588 <USBH_LL_Init+0x74>)
 801154c:	2200      	movs	r2, #0
 801154e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8011550:	4b0d      	ldr	r3, [pc, #52]	; (8011588 <USBH_LL_Init+0x74>)
 8011552:	2202      	movs	r2, #2
 8011554:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011556:	4b0c      	ldr	r3, [pc, #48]	; (8011588 <USBH_LL_Init+0x74>)
 8011558:	2200      	movs	r2, #0
 801155a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801155c:	480a      	ldr	r0, [pc, #40]	; (8011588 <USBH_LL_Init+0x74>)
 801155e:	f7f0 fe8d 	bl	800227c <HAL_HCD_Init>
 8011562:	4603      	mov	r3, r0
 8011564:	2b00      	cmp	r3, #0
 8011566:	d001      	beq.n	801156c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8011568:	f7f0 f8f2 	bl	8001750 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801156c:	4806      	ldr	r0, [pc, #24]	; (8011588 <USBH_LL_Init+0x74>)
 801156e:	f7f1 fa70 	bl	8002a52 <HAL_HCD_GetCurrentFrame>
 8011572:	4603      	mov	r3, r0
 8011574:	4619      	mov	r1, r3
 8011576:	6878      	ldr	r0, [r7, #4]
 8011578:	f7fb fee0 	bl	800d33c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 801157c:	2300      	movs	r3, #0
}
 801157e:	4618      	mov	r0, r3
 8011580:	3708      	adds	r7, #8
 8011582:	46bd      	mov	sp, r7
 8011584:	bd80      	pop	{r7, pc}
 8011586:	bf00      	nop
 8011588:	200050b8 	.word	0x200050b8

0801158c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 801158c:	b580      	push	{r7, lr}
 801158e:	b084      	sub	sp, #16
 8011590:	af00      	add	r7, sp, #0
 8011592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011594:	2300      	movs	r3, #0
 8011596:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011598:	2300      	movs	r3, #0
 801159a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80115a2:	4618      	mov	r0, r3
 80115a4:	f7f1 f9df 	bl	8002966 <HAL_HCD_Start>
 80115a8:	4603      	mov	r3, r0
 80115aa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80115ac:	7bfb      	ldrb	r3, [r7, #15]
 80115ae:	4618      	mov	r0, r3
 80115b0:	f000 f95c 	bl	801186c <USBH_Get_USB_Status>
 80115b4:	4603      	mov	r3, r0
 80115b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80115b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80115ba:	4618      	mov	r0, r3
 80115bc:	3710      	adds	r7, #16
 80115be:	46bd      	mov	sp, r7
 80115c0:	bd80      	pop	{r7, pc}

080115c2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80115c2:	b580      	push	{r7, lr}
 80115c4:	b084      	sub	sp, #16
 80115c6:	af00      	add	r7, sp, #0
 80115c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80115ca:	2300      	movs	r3, #0
 80115cc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80115ce:	2300      	movs	r3, #0
 80115d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80115d8:	4618      	mov	r0, r3
 80115da:	f7f1 f9e7 	bl	80029ac <HAL_HCD_Stop>
 80115de:	4603      	mov	r3, r0
 80115e0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80115e2:	7bfb      	ldrb	r3, [r7, #15]
 80115e4:	4618      	mov	r0, r3
 80115e6:	f000 f941 	bl	801186c <USBH_Get_USB_Status>
 80115ea:	4603      	mov	r3, r0
 80115ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80115ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80115f0:	4618      	mov	r0, r3
 80115f2:	3710      	adds	r7, #16
 80115f4:	46bd      	mov	sp, r7
 80115f6:	bd80      	pop	{r7, pc}

080115f8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b084      	sub	sp, #16
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8011600:	2301      	movs	r3, #1
 8011602:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801160a:	4618      	mov	r0, r3
 801160c:	f7f1 fa2f 	bl	8002a6e <HAL_HCD_GetCurrentSpeed>
 8011610:	4603      	mov	r3, r0
 8011612:	2b02      	cmp	r3, #2
 8011614:	d00c      	beq.n	8011630 <USBH_LL_GetSpeed+0x38>
 8011616:	2b02      	cmp	r3, #2
 8011618:	d80d      	bhi.n	8011636 <USBH_LL_GetSpeed+0x3e>
 801161a:	2b00      	cmp	r3, #0
 801161c:	d002      	beq.n	8011624 <USBH_LL_GetSpeed+0x2c>
 801161e:	2b01      	cmp	r3, #1
 8011620:	d003      	beq.n	801162a <USBH_LL_GetSpeed+0x32>
 8011622:	e008      	b.n	8011636 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8011624:	2300      	movs	r3, #0
 8011626:	73fb      	strb	r3, [r7, #15]
    break;
 8011628:	e008      	b.n	801163c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801162a:	2301      	movs	r3, #1
 801162c:	73fb      	strb	r3, [r7, #15]
    break;
 801162e:	e005      	b.n	801163c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8011630:	2302      	movs	r3, #2
 8011632:	73fb      	strb	r3, [r7, #15]
    break;
 8011634:	e002      	b.n	801163c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8011636:	2301      	movs	r3, #1
 8011638:	73fb      	strb	r3, [r7, #15]
    break;
 801163a:	bf00      	nop
  }
  return  speed;
 801163c:	7bfb      	ldrb	r3, [r7, #15]
}
 801163e:	4618      	mov	r0, r3
 8011640:	3710      	adds	r7, #16
 8011642:	46bd      	mov	sp, r7
 8011644:	bd80      	pop	{r7, pc}

08011646 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8011646:	b580      	push	{r7, lr}
 8011648:	b084      	sub	sp, #16
 801164a:	af00      	add	r7, sp, #0
 801164c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801164e:	2300      	movs	r3, #0
 8011650:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011652:	2300      	movs	r3, #0
 8011654:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801165c:	4618      	mov	r0, r3
 801165e:	f7f1 f9c2 	bl	80029e6 <HAL_HCD_ResetPort>
 8011662:	4603      	mov	r3, r0
 8011664:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011666:	7bfb      	ldrb	r3, [r7, #15]
 8011668:	4618      	mov	r0, r3
 801166a:	f000 f8ff 	bl	801186c <USBH_Get_USB_Status>
 801166e:	4603      	mov	r3, r0
 8011670:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011672:	7bbb      	ldrb	r3, [r7, #14]
}
 8011674:	4618      	mov	r0, r3
 8011676:	3710      	adds	r7, #16
 8011678:	46bd      	mov	sp, r7
 801167a:	bd80      	pop	{r7, pc}

0801167c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801167c:	b580      	push	{r7, lr}
 801167e:	b082      	sub	sp, #8
 8011680:	af00      	add	r7, sp, #0
 8011682:	6078      	str	r0, [r7, #4]
 8011684:	460b      	mov	r3, r1
 8011686:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801168e:	78fa      	ldrb	r2, [r7, #3]
 8011690:	4611      	mov	r1, r2
 8011692:	4618      	mov	r0, r3
 8011694:	f7f1 f9c9 	bl	8002a2a <HAL_HCD_HC_GetXferCount>
 8011698:	4603      	mov	r3, r0
}
 801169a:	4618      	mov	r0, r3
 801169c:	3708      	adds	r7, #8
 801169e:	46bd      	mov	sp, r7
 80116a0:	bd80      	pop	{r7, pc}

080116a2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80116a2:	b590      	push	{r4, r7, lr}
 80116a4:	b089      	sub	sp, #36	; 0x24
 80116a6:	af04      	add	r7, sp, #16
 80116a8:	6078      	str	r0, [r7, #4]
 80116aa:	4608      	mov	r0, r1
 80116ac:	4611      	mov	r1, r2
 80116ae:	461a      	mov	r2, r3
 80116b0:	4603      	mov	r3, r0
 80116b2:	70fb      	strb	r3, [r7, #3]
 80116b4:	460b      	mov	r3, r1
 80116b6:	70bb      	strb	r3, [r7, #2]
 80116b8:	4613      	mov	r3, r2
 80116ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80116bc:	2300      	movs	r3, #0
 80116be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80116c0:	2300      	movs	r3, #0
 80116c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80116ca:	787c      	ldrb	r4, [r7, #1]
 80116cc:	78ba      	ldrb	r2, [r7, #2]
 80116ce:	78f9      	ldrb	r1, [r7, #3]
 80116d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80116d2:	9302      	str	r3, [sp, #8]
 80116d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80116d8:	9301      	str	r3, [sp, #4]
 80116da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80116de:	9300      	str	r3, [sp, #0]
 80116e0:	4623      	mov	r3, r4
 80116e2:	f7f0 fe2d 	bl	8002340 <HAL_HCD_HC_Init>
 80116e6:	4603      	mov	r3, r0
 80116e8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80116ea:	7bfb      	ldrb	r3, [r7, #15]
 80116ec:	4618      	mov	r0, r3
 80116ee:	f000 f8bd 	bl	801186c <USBH_Get_USB_Status>
 80116f2:	4603      	mov	r3, r0
 80116f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80116f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80116f8:	4618      	mov	r0, r3
 80116fa:	3714      	adds	r7, #20
 80116fc:	46bd      	mov	sp, r7
 80116fe:	bd90      	pop	{r4, r7, pc}

08011700 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011700:	b580      	push	{r7, lr}
 8011702:	b084      	sub	sp, #16
 8011704:	af00      	add	r7, sp, #0
 8011706:	6078      	str	r0, [r7, #4]
 8011708:	460b      	mov	r3, r1
 801170a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801170c:	2300      	movs	r3, #0
 801170e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011710:	2300      	movs	r3, #0
 8011712:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801171a:	78fa      	ldrb	r2, [r7, #3]
 801171c:	4611      	mov	r1, r2
 801171e:	4618      	mov	r0, r3
 8011720:	f7f0 fe9d 	bl	800245e <HAL_HCD_HC_Halt>
 8011724:	4603      	mov	r3, r0
 8011726:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011728:	7bfb      	ldrb	r3, [r7, #15]
 801172a:	4618      	mov	r0, r3
 801172c:	f000 f89e 	bl	801186c <USBH_Get_USB_Status>
 8011730:	4603      	mov	r3, r0
 8011732:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011734:	7bbb      	ldrb	r3, [r7, #14]
}
 8011736:	4618      	mov	r0, r3
 8011738:	3710      	adds	r7, #16
 801173a:	46bd      	mov	sp, r7
 801173c:	bd80      	pop	{r7, pc}

0801173e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801173e:	b590      	push	{r4, r7, lr}
 8011740:	b089      	sub	sp, #36	; 0x24
 8011742:	af04      	add	r7, sp, #16
 8011744:	6078      	str	r0, [r7, #4]
 8011746:	4608      	mov	r0, r1
 8011748:	4611      	mov	r1, r2
 801174a:	461a      	mov	r2, r3
 801174c:	4603      	mov	r3, r0
 801174e:	70fb      	strb	r3, [r7, #3]
 8011750:	460b      	mov	r3, r1
 8011752:	70bb      	strb	r3, [r7, #2]
 8011754:	4613      	mov	r3, r2
 8011756:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011758:	2300      	movs	r3, #0
 801175a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801175c:	2300      	movs	r3, #0
 801175e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8011766:	787c      	ldrb	r4, [r7, #1]
 8011768:	78ba      	ldrb	r2, [r7, #2]
 801176a:	78f9      	ldrb	r1, [r7, #3]
 801176c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011770:	9303      	str	r3, [sp, #12]
 8011772:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011774:	9302      	str	r3, [sp, #8]
 8011776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011778:	9301      	str	r3, [sp, #4]
 801177a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801177e:	9300      	str	r3, [sp, #0]
 8011780:	4623      	mov	r3, r4
 8011782:	f7f0 fe8f 	bl	80024a4 <HAL_HCD_HC_SubmitRequest>
 8011786:	4603      	mov	r3, r0
 8011788:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801178a:	7bfb      	ldrb	r3, [r7, #15]
 801178c:	4618      	mov	r0, r3
 801178e:	f000 f86d 	bl	801186c <USBH_Get_USB_Status>
 8011792:	4603      	mov	r3, r0
 8011794:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011796:	7bbb      	ldrb	r3, [r7, #14]
}
 8011798:	4618      	mov	r0, r3
 801179a:	3714      	adds	r7, #20
 801179c:	46bd      	mov	sp, r7
 801179e:	bd90      	pop	{r4, r7, pc}

080117a0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b082      	sub	sp, #8
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	6078      	str	r0, [r7, #4]
 80117a8:	460b      	mov	r3, r1
 80117aa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80117b2:	78fa      	ldrb	r2, [r7, #3]
 80117b4:	4611      	mov	r1, r2
 80117b6:	4618      	mov	r0, r3
 80117b8:	f7f1 f923 	bl	8002a02 <HAL_HCD_HC_GetURBState>
 80117bc:	4603      	mov	r3, r0
}
 80117be:	4618      	mov	r0, r3
 80117c0:	3708      	adds	r7, #8
 80117c2:	46bd      	mov	sp, r7
 80117c4:	bd80      	pop	{r7, pc}

080117c6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80117c6:	b580      	push	{r7, lr}
 80117c8:	b082      	sub	sp, #8
 80117ca:	af00      	add	r7, sp, #0
 80117cc:	6078      	str	r0, [r7, #4]
 80117ce:	460b      	mov	r3, r1
 80117d0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80117d8:	2b01      	cmp	r3, #1
 80117da:	d103      	bne.n	80117e4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80117dc:	78fb      	ldrb	r3, [r7, #3]
 80117de:	4618      	mov	r0, r3
 80117e0:	f000 f870 	bl	80118c4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80117e4:	20c8      	movs	r0, #200	; 0xc8
 80117e6:	f7f0 f9eb 	bl	8001bc0 <HAL_Delay>
  return USBH_OK;
 80117ea:	2300      	movs	r3, #0
}
 80117ec:	4618      	mov	r0, r3
 80117ee:	3708      	adds	r7, #8
 80117f0:	46bd      	mov	sp, r7
 80117f2:	bd80      	pop	{r7, pc}

080117f4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80117f4:	b480      	push	{r7}
 80117f6:	b085      	sub	sp, #20
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	6078      	str	r0, [r7, #4]
 80117fc:	460b      	mov	r3, r1
 80117fe:	70fb      	strb	r3, [r7, #3]
 8011800:	4613      	mov	r3, r2
 8011802:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801180a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801180c:	78fb      	ldrb	r3, [r7, #3]
 801180e:	68fa      	ldr	r2, [r7, #12]
 8011810:	212c      	movs	r1, #44	; 0x2c
 8011812:	fb01 f303 	mul.w	r3, r1, r3
 8011816:	4413      	add	r3, r2
 8011818:	333b      	adds	r3, #59	; 0x3b
 801181a:	781b      	ldrb	r3, [r3, #0]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d009      	beq.n	8011834 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8011820:	78fb      	ldrb	r3, [r7, #3]
 8011822:	68fa      	ldr	r2, [r7, #12]
 8011824:	212c      	movs	r1, #44	; 0x2c
 8011826:	fb01 f303 	mul.w	r3, r1, r3
 801182a:	4413      	add	r3, r2
 801182c:	3354      	adds	r3, #84	; 0x54
 801182e:	78ba      	ldrb	r2, [r7, #2]
 8011830:	701a      	strb	r2, [r3, #0]
 8011832:	e008      	b.n	8011846 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8011834:	78fb      	ldrb	r3, [r7, #3]
 8011836:	68fa      	ldr	r2, [r7, #12]
 8011838:	212c      	movs	r1, #44	; 0x2c
 801183a:	fb01 f303 	mul.w	r3, r1, r3
 801183e:	4413      	add	r3, r2
 8011840:	3355      	adds	r3, #85	; 0x55
 8011842:	78ba      	ldrb	r2, [r7, #2]
 8011844:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8011846:	2300      	movs	r3, #0
}
 8011848:	4618      	mov	r0, r3
 801184a:	3714      	adds	r7, #20
 801184c:	46bd      	mov	sp, r7
 801184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011852:	4770      	bx	lr

08011854 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8011854:	b580      	push	{r7, lr}
 8011856:	b082      	sub	sp, #8
 8011858:	af00      	add	r7, sp, #0
 801185a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801185c:	6878      	ldr	r0, [r7, #4]
 801185e:	f7f0 f9af 	bl	8001bc0 <HAL_Delay>
}
 8011862:	bf00      	nop
 8011864:	3708      	adds	r7, #8
 8011866:	46bd      	mov	sp, r7
 8011868:	bd80      	pop	{r7, pc}
	...

0801186c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801186c:	b480      	push	{r7}
 801186e:	b085      	sub	sp, #20
 8011870:	af00      	add	r7, sp, #0
 8011872:	4603      	mov	r3, r0
 8011874:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011876:	2300      	movs	r3, #0
 8011878:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801187a:	79fb      	ldrb	r3, [r7, #7]
 801187c:	2b03      	cmp	r3, #3
 801187e:	d817      	bhi.n	80118b0 <USBH_Get_USB_Status+0x44>
 8011880:	a201      	add	r2, pc, #4	; (adr r2, 8011888 <USBH_Get_USB_Status+0x1c>)
 8011882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011886:	bf00      	nop
 8011888:	08011899 	.word	0x08011899
 801188c:	0801189f 	.word	0x0801189f
 8011890:	080118a5 	.word	0x080118a5
 8011894:	080118ab 	.word	0x080118ab
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8011898:	2300      	movs	r3, #0
 801189a:	73fb      	strb	r3, [r7, #15]
    break;
 801189c:	e00b      	b.n	80118b6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801189e:	2302      	movs	r3, #2
 80118a0:	73fb      	strb	r3, [r7, #15]
    break;
 80118a2:	e008      	b.n	80118b6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80118a4:	2301      	movs	r3, #1
 80118a6:	73fb      	strb	r3, [r7, #15]
    break;
 80118a8:	e005      	b.n	80118b6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80118aa:	2302      	movs	r3, #2
 80118ac:	73fb      	strb	r3, [r7, #15]
    break;
 80118ae:	e002      	b.n	80118b6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80118b0:	2302      	movs	r3, #2
 80118b2:	73fb      	strb	r3, [r7, #15]
    break;
 80118b4:	bf00      	nop
  }
  return usb_status;
 80118b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80118b8:	4618      	mov	r0, r3
 80118ba:	3714      	adds	r7, #20
 80118bc:	46bd      	mov	sp, r7
 80118be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c2:	4770      	bx	lr

080118c4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80118c4:	b580      	push	{r7, lr}
 80118c6:	b084      	sub	sp, #16
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	4603      	mov	r3, r0
 80118cc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80118ce:	79fb      	ldrb	r3, [r7, #7]
 80118d0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80118d2:	79fb      	ldrb	r3, [r7, #7]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d102      	bne.n	80118de <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80118d8:	2300      	movs	r3, #0
 80118da:	73fb      	strb	r3, [r7, #15]
 80118dc:	e001      	b.n	80118e2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80118de:	2301      	movs	r3, #1
 80118e0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_6,(GPIO_PinState)data);
 80118e2:	7bfb      	ldrb	r3, [r7, #15]
 80118e4:	461a      	mov	r2, r3
 80118e6:	2140      	movs	r1, #64	; 0x40
 80118e8:	4803      	ldr	r0, [pc, #12]	; (80118f8 <MX_DriverVbusFS+0x34>)
 80118ea:	f7f0 fc95 	bl	8002218 <HAL_GPIO_WritePin>
}
 80118ee:	bf00      	nop
 80118f0:	3710      	adds	r7, #16
 80118f2:	46bd      	mov	sp, r7
 80118f4:	bd80      	pop	{r7, pc}
 80118f6:	bf00      	nop
 80118f8:	40021800 	.word	0x40021800

080118fc <__errno>:
 80118fc:	4b01      	ldr	r3, [pc, #4]	; (8011904 <__errno+0x8>)
 80118fe:	6818      	ldr	r0, [r3, #0]
 8011900:	4770      	bx	lr
 8011902:	bf00      	nop
 8011904:	2000014c 	.word	0x2000014c

08011908 <__libc_init_array>:
 8011908:	b570      	push	{r4, r5, r6, lr}
 801190a:	4d0d      	ldr	r5, [pc, #52]	; (8011940 <__libc_init_array+0x38>)
 801190c:	4c0d      	ldr	r4, [pc, #52]	; (8011944 <__libc_init_array+0x3c>)
 801190e:	1b64      	subs	r4, r4, r5
 8011910:	10a4      	asrs	r4, r4, #2
 8011912:	2600      	movs	r6, #0
 8011914:	42a6      	cmp	r6, r4
 8011916:	d109      	bne.n	801192c <__libc_init_array+0x24>
 8011918:	4d0b      	ldr	r5, [pc, #44]	; (8011948 <__libc_init_array+0x40>)
 801191a:	4c0c      	ldr	r4, [pc, #48]	; (801194c <__libc_init_array+0x44>)
 801191c:	f000 f93c 	bl	8011b98 <_init>
 8011920:	1b64      	subs	r4, r4, r5
 8011922:	10a4      	asrs	r4, r4, #2
 8011924:	2600      	movs	r6, #0
 8011926:	42a6      	cmp	r6, r4
 8011928:	d105      	bne.n	8011936 <__libc_init_array+0x2e>
 801192a:	bd70      	pop	{r4, r5, r6, pc}
 801192c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011930:	4798      	blx	r3
 8011932:	3601      	adds	r6, #1
 8011934:	e7ee      	b.n	8011914 <__libc_init_array+0xc>
 8011936:	f855 3b04 	ldr.w	r3, [r5], #4
 801193a:	4798      	blx	r3
 801193c:	3601      	adds	r6, #1
 801193e:	e7f2      	b.n	8011926 <__libc_init_array+0x1e>
 8011940:	080127cc 	.word	0x080127cc
 8011944:	080127cc 	.word	0x080127cc
 8011948:	080127cc 	.word	0x080127cc
 801194c:	080127d0 	.word	0x080127d0

08011950 <malloc>:
 8011950:	4b02      	ldr	r3, [pc, #8]	; (801195c <malloc+0xc>)
 8011952:	4601      	mov	r1, r0
 8011954:	6818      	ldr	r0, [r3, #0]
 8011956:	f000 b88d 	b.w	8011a74 <_malloc_r>
 801195a:	bf00      	nop
 801195c:	2000014c 	.word	0x2000014c

08011960 <free>:
 8011960:	4b02      	ldr	r3, [pc, #8]	; (801196c <free+0xc>)
 8011962:	4601      	mov	r1, r0
 8011964:	6818      	ldr	r0, [r3, #0]
 8011966:	f000 b819 	b.w	801199c <_free_r>
 801196a:	bf00      	nop
 801196c:	2000014c 	.word	0x2000014c

08011970 <memcpy>:
 8011970:	440a      	add	r2, r1
 8011972:	4291      	cmp	r1, r2
 8011974:	f100 33ff 	add.w	r3, r0, #4294967295
 8011978:	d100      	bne.n	801197c <memcpy+0xc>
 801197a:	4770      	bx	lr
 801197c:	b510      	push	{r4, lr}
 801197e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011982:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011986:	4291      	cmp	r1, r2
 8011988:	d1f9      	bne.n	801197e <memcpy+0xe>
 801198a:	bd10      	pop	{r4, pc}

0801198c <memset>:
 801198c:	4402      	add	r2, r0
 801198e:	4603      	mov	r3, r0
 8011990:	4293      	cmp	r3, r2
 8011992:	d100      	bne.n	8011996 <memset+0xa>
 8011994:	4770      	bx	lr
 8011996:	f803 1b01 	strb.w	r1, [r3], #1
 801199a:	e7f9      	b.n	8011990 <memset+0x4>

0801199c <_free_r>:
 801199c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801199e:	2900      	cmp	r1, #0
 80119a0:	d044      	beq.n	8011a2c <_free_r+0x90>
 80119a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80119a6:	9001      	str	r0, [sp, #4]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	f1a1 0404 	sub.w	r4, r1, #4
 80119ae:	bfb8      	it	lt
 80119b0:	18e4      	addlt	r4, r4, r3
 80119b2:	f000 f8e3 	bl	8011b7c <__malloc_lock>
 80119b6:	4a1e      	ldr	r2, [pc, #120]	; (8011a30 <_free_r+0x94>)
 80119b8:	9801      	ldr	r0, [sp, #4]
 80119ba:	6813      	ldr	r3, [r2, #0]
 80119bc:	b933      	cbnz	r3, 80119cc <_free_r+0x30>
 80119be:	6063      	str	r3, [r4, #4]
 80119c0:	6014      	str	r4, [r2, #0]
 80119c2:	b003      	add	sp, #12
 80119c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80119c8:	f000 b8de 	b.w	8011b88 <__malloc_unlock>
 80119cc:	42a3      	cmp	r3, r4
 80119ce:	d908      	bls.n	80119e2 <_free_r+0x46>
 80119d0:	6825      	ldr	r5, [r4, #0]
 80119d2:	1961      	adds	r1, r4, r5
 80119d4:	428b      	cmp	r3, r1
 80119d6:	bf01      	itttt	eq
 80119d8:	6819      	ldreq	r1, [r3, #0]
 80119da:	685b      	ldreq	r3, [r3, #4]
 80119dc:	1949      	addeq	r1, r1, r5
 80119de:	6021      	streq	r1, [r4, #0]
 80119e0:	e7ed      	b.n	80119be <_free_r+0x22>
 80119e2:	461a      	mov	r2, r3
 80119e4:	685b      	ldr	r3, [r3, #4]
 80119e6:	b10b      	cbz	r3, 80119ec <_free_r+0x50>
 80119e8:	42a3      	cmp	r3, r4
 80119ea:	d9fa      	bls.n	80119e2 <_free_r+0x46>
 80119ec:	6811      	ldr	r1, [r2, #0]
 80119ee:	1855      	adds	r5, r2, r1
 80119f0:	42a5      	cmp	r5, r4
 80119f2:	d10b      	bne.n	8011a0c <_free_r+0x70>
 80119f4:	6824      	ldr	r4, [r4, #0]
 80119f6:	4421      	add	r1, r4
 80119f8:	1854      	adds	r4, r2, r1
 80119fa:	42a3      	cmp	r3, r4
 80119fc:	6011      	str	r1, [r2, #0]
 80119fe:	d1e0      	bne.n	80119c2 <_free_r+0x26>
 8011a00:	681c      	ldr	r4, [r3, #0]
 8011a02:	685b      	ldr	r3, [r3, #4]
 8011a04:	6053      	str	r3, [r2, #4]
 8011a06:	4421      	add	r1, r4
 8011a08:	6011      	str	r1, [r2, #0]
 8011a0a:	e7da      	b.n	80119c2 <_free_r+0x26>
 8011a0c:	d902      	bls.n	8011a14 <_free_r+0x78>
 8011a0e:	230c      	movs	r3, #12
 8011a10:	6003      	str	r3, [r0, #0]
 8011a12:	e7d6      	b.n	80119c2 <_free_r+0x26>
 8011a14:	6825      	ldr	r5, [r4, #0]
 8011a16:	1961      	adds	r1, r4, r5
 8011a18:	428b      	cmp	r3, r1
 8011a1a:	bf04      	itt	eq
 8011a1c:	6819      	ldreq	r1, [r3, #0]
 8011a1e:	685b      	ldreq	r3, [r3, #4]
 8011a20:	6063      	str	r3, [r4, #4]
 8011a22:	bf04      	itt	eq
 8011a24:	1949      	addeq	r1, r1, r5
 8011a26:	6021      	streq	r1, [r4, #0]
 8011a28:	6054      	str	r4, [r2, #4]
 8011a2a:	e7ca      	b.n	80119c2 <_free_r+0x26>
 8011a2c:	b003      	add	sp, #12
 8011a2e:	bd30      	pop	{r4, r5, pc}
 8011a30:	200053bc 	.word	0x200053bc

08011a34 <sbrk_aligned>:
 8011a34:	b570      	push	{r4, r5, r6, lr}
 8011a36:	4e0e      	ldr	r6, [pc, #56]	; (8011a70 <sbrk_aligned+0x3c>)
 8011a38:	460c      	mov	r4, r1
 8011a3a:	6831      	ldr	r1, [r6, #0]
 8011a3c:	4605      	mov	r5, r0
 8011a3e:	b911      	cbnz	r1, 8011a46 <sbrk_aligned+0x12>
 8011a40:	f000 f88c 	bl	8011b5c <_sbrk_r>
 8011a44:	6030      	str	r0, [r6, #0]
 8011a46:	4621      	mov	r1, r4
 8011a48:	4628      	mov	r0, r5
 8011a4a:	f000 f887 	bl	8011b5c <_sbrk_r>
 8011a4e:	1c43      	adds	r3, r0, #1
 8011a50:	d00a      	beq.n	8011a68 <sbrk_aligned+0x34>
 8011a52:	1cc4      	adds	r4, r0, #3
 8011a54:	f024 0403 	bic.w	r4, r4, #3
 8011a58:	42a0      	cmp	r0, r4
 8011a5a:	d007      	beq.n	8011a6c <sbrk_aligned+0x38>
 8011a5c:	1a21      	subs	r1, r4, r0
 8011a5e:	4628      	mov	r0, r5
 8011a60:	f000 f87c 	bl	8011b5c <_sbrk_r>
 8011a64:	3001      	adds	r0, #1
 8011a66:	d101      	bne.n	8011a6c <sbrk_aligned+0x38>
 8011a68:	f04f 34ff 	mov.w	r4, #4294967295
 8011a6c:	4620      	mov	r0, r4
 8011a6e:	bd70      	pop	{r4, r5, r6, pc}
 8011a70:	200053c0 	.word	0x200053c0

08011a74 <_malloc_r>:
 8011a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a78:	1ccd      	adds	r5, r1, #3
 8011a7a:	f025 0503 	bic.w	r5, r5, #3
 8011a7e:	3508      	adds	r5, #8
 8011a80:	2d0c      	cmp	r5, #12
 8011a82:	bf38      	it	cc
 8011a84:	250c      	movcc	r5, #12
 8011a86:	2d00      	cmp	r5, #0
 8011a88:	4607      	mov	r7, r0
 8011a8a:	db01      	blt.n	8011a90 <_malloc_r+0x1c>
 8011a8c:	42a9      	cmp	r1, r5
 8011a8e:	d905      	bls.n	8011a9c <_malloc_r+0x28>
 8011a90:	230c      	movs	r3, #12
 8011a92:	603b      	str	r3, [r7, #0]
 8011a94:	2600      	movs	r6, #0
 8011a96:	4630      	mov	r0, r6
 8011a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a9c:	4e2e      	ldr	r6, [pc, #184]	; (8011b58 <_malloc_r+0xe4>)
 8011a9e:	f000 f86d 	bl	8011b7c <__malloc_lock>
 8011aa2:	6833      	ldr	r3, [r6, #0]
 8011aa4:	461c      	mov	r4, r3
 8011aa6:	bb34      	cbnz	r4, 8011af6 <_malloc_r+0x82>
 8011aa8:	4629      	mov	r1, r5
 8011aaa:	4638      	mov	r0, r7
 8011aac:	f7ff ffc2 	bl	8011a34 <sbrk_aligned>
 8011ab0:	1c43      	adds	r3, r0, #1
 8011ab2:	4604      	mov	r4, r0
 8011ab4:	d14d      	bne.n	8011b52 <_malloc_r+0xde>
 8011ab6:	6834      	ldr	r4, [r6, #0]
 8011ab8:	4626      	mov	r6, r4
 8011aba:	2e00      	cmp	r6, #0
 8011abc:	d140      	bne.n	8011b40 <_malloc_r+0xcc>
 8011abe:	6823      	ldr	r3, [r4, #0]
 8011ac0:	4631      	mov	r1, r6
 8011ac2:	4638      	mov	r0, r7
 8011ac4:	eb04 0803 	add.w	r8, r4, r3
 8011ac8:	f000 f848 	bl	8011b5c <_sbrk_r>
 8011acc:	4580      	cmp	r8, r0
 8011ace:	d13a      	bne.n	8011b46 <_malloc_r+0xd2>
 8011ad0:	6821      	ldr	r1, [r4, #0]
 8011ad2:	3503      	adds	r5, #3
 8011ad4:	1a6d      	subs	r5, r5, r1
 8011ad6:	f025 0503 	bic.w	r5, r5, #3
 8011ada:	3508      	adds	r5, #8
 8011adc:	2d0c      	cmp	r5, #12
 8011ade:	bf38      	it	cc
 8011ae0:	250c      	movcc	r5, #12
 8011ae2:	4629      	mov	r1, r5
 8011ae4:	4638      	mov	r0, r7
 8011ae6:	f7ff ffa5 	bl	8011a34 <sbrk_aligned>
 8011aea:	3001      	adds	r0, #1
 8011aec:	d02b      	beq.n	8011b46 <_malloc_r+0xd2>
 8011aee:	6823      	ldr	r3, [r4, #0]
 8011af0:	442b      	add	r3, r5
 8011af2:	6023      	str	r3, [r4, #0]
 8011af4:	e00e      	b.n	8011b14 <_malloc_r+0xa0>
 8011af6:	6822      	ldr	r2, [r4, #0]
 8011af8:	1b52      	subs	r2, r2, r5
 8011afa:	d41e      	bmi.n	8011b3a <_malloc_r+0xc6>
 8011afc:	2a0b      	cmp	r2, #11
 8011afe:	d916      	bls.n	8011b2e <_malloc_r+0xba>
 8011b00:	1961      	adds	r1, r4, r5
 8011b02:	42a3      	cmp	r3, r4
 8011b04:	6025      	str	r5, [r4, #0]
 8011b06:	bf18      	it	ne
 8011b08:	6059      	strne	r1, [r3, #4]
 8011b0a:	6863      	ldr	r3, [r4, #4]
 8011b0c:	bf08      	it	eq
 8011b0e:	6031      	streq	r1, [r6, #0]
 8011b10:	5162      	str	r2, [r4, r5]
 8011b12:	604b      	str	r3, [r1, #4]
 8011b14:	4638      	mov	r0, r7
 8011b16:	f104 060b 	add.w	r6, r4, #11
 8011b1a:	f000 f835 	bl	8011b88 <__malloc_unlock>
 8011b1e:	f026 0607 	bic.w	r6, r6, #7
 8011b22:	1d23      	adds	r3, r4, #4
 8011b24:	1af2      	subs	r2, r6, r3
 8011b26:	d0b6      	beq.n	8011a96 <_malloc_r+0x22>
 8011b28:	1b9b      	subs	r3, r3, r6
 8011b2a:	50a3      	str	r3, [r4, r2]
 8011b2c:	e7b3      	b.n	8011a96 <_malloc_r+0x22>
 8011b2e:	6862      	ldr	r2, [r4, #4]
 8011b30:	42a3      	cmp	r3, r4
 8011b32:	bf0c      	ite	eq
 8011b34:	6032      	streq	r2, [r6, #0]
 8011b36:	605a      	strne	r2, [r3, #4]
 8011b38:	e7ec      	b.n	8011b14 <_malloc_r+0xa0>
 8011b3a:	4623      	mov	r3, r4
 8011b3c:	6864      	ldr	r4, [r4, #4]
 8011b3e:	e7b2      	b.n	8011aa6 <_malloc_r+0x32>
 8011b40:	4634      	mov	r4, r6
 8011b42:	6876      	ldr	r6, [r6, #4]
 8011b44:	e7b9      	b.n	8011aba <_malloc_r+0x46>
 8011b46:	230c      	movs	r3, #12
 8011b48:	603b      	str	r3, [r7, #0]
 8011b4a:	4638      	mov	r0, r7
 8011b4c:	f000 f81c 	bl	8011b88 <__malloc_unlock>
 8011b50:	e7a1      	b.n	8011a96 <_malloc_r+0x22>
 8011b52:	6025      	str	r5, [r4, #0]
 8011b54:	e7de      	b.n	8011b14 <_malloc_r+0xa0>
 8011b56:	bf00      	nop
 8011b58:	200053bc 	.word	0x200053bc

08011b5c <_sbrk_r>:
 8011b5c:	b538      	push	{r3, r4, r5, lr}
 8011b5e:	4d06      	ldr	r5, [pc, #24]	; (8011b78 <_sbrk_r+0x1c>)
 8011b60:	2300      	movs	r3, #0
 8011b62:	4604      	mov	r4, r0
 8011b64:	4608      	mov	r0, r1
 8011b66:	602b      	str	r3, [r5, #0]
 8011b68:	f7ef ff76 	bl	8001a58 <_sbrk>
 8011b6c:	1c43      	adds	r3, r0, #1
 8011b6e:	d102      	bne.n	8011b76 <_sbrk_r+0x1a>
 8011b70:	682b      	ldr	r3, [r5, #0]
 8011b72:	b103      	cbz	r3, 8011b76 <_sbrk_r+0x1a>
 8011b74:	6023      	str	r3, [r4, #0]
 8011b76:	bd38      	pop	{r3, r4, r5, pc}
 8011b78:	200053c4 	.word	0x200053c4

08011b7c <__malloc_lock>:
 8011b7c:	4801      	ldr	r0, [pc, #4]	; (8011b84 <__malloc_lock+0x8>)
 8011b7e:	f000 b809 	b.w	8011b94 <__retarget_lock_acquire_recursive>
 8011b82:	bf00      	nop
 8011b84:	200053c8 	.word	0x200053c8

08011b88 <__malloc_unlock>:
 8011b88:	4801      	ldr	r0, [pc, #4]	; (8011b90 <__malloc_unlock+0x8>)
 8011b8a:	f000 b804 	b.w	8011b96 <__retarget_lock_release_recursive>
 8011b8e:	bf00      	nop
 8011b90:	200053c8 	.word	0x200053c8

08011b94 <__retarget_lock_acquire_recursive>:
 8011b94:	4770      	bx	lr

08011b96 <__retarget_lock_release_recursive>:
 8011b96:	4770      	bx	lr

08011b98 <_init>:
 8011b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b9a:	bf00      	nop
 8011b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b9e:	bc08      	pop	{r3}
 8011ba0:	469e      	mov	lr, r3
 8011ba2:	4770      	bx	lr

08011ba4 <_fini>:
 8011ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ba6:	bf00      	nop
 8011ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011baa:	bc08      	pop	{r3}
 8011bac:	469e      	mov	lr, r3
 8011bae:	4770      	bx	lr
