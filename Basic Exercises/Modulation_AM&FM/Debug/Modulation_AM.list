
Modulation_AM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002360  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080024e8  080024e8  000124e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024f8  080024f8  00020810  2**0
                  CONTENTS
  4 .ARM          00000008  080024f8  080024f8  000124f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002500  08002500  00020810  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002500  08002500  00012500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002504  08002504  00012504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000810  20000000  08002508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020810  2**0
                  CONTENTS
 10 .bss          000000ec  20000810  20000810  00020810  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008fc  200008fc  00020810  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020810  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ed3c  00000000  00000000  00020840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002259  00000000  00000000  0002f57c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    000085e2  00000000  00000000  000317d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000958  00000000  00000000  00039db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000d38  00000000  00000000  0003a710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021643  00000000  00000000  0003b448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000edc9  00000000  00000000  0005ca8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d2b28  00000000  00000000  0006b854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0013e37c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00001d1c  00000000  00000000  0013e3cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000810 	.word	0x20000810
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080024d0 	.word	0x080024d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000814 	.word	0x20000814
 80001c4:	080024d0 	.word	0x080024d0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b974 	b.w	8000d04 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	468e      	mov	lr, r1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d14d      	bne.n	8000ade <__udivmoddi4+0xaa>
 8000a42:	428a      	cmp	r2, r1
 8000a44:	4694      	mov	ip, r2
 8000a46:	d969      	bls.n	8000b1c <__udivmoddi4+0xe8>
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	b152      	cbz	r2, 8000a64 <__udivmoddi4+0x30>
 8000a4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a52:	f1c2 0120 	rsb	r1, r2, #32
 8000a56:	fa20 f101 	lsr.w	r1, r0, r1
 8000a5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a62:	4094      	lsls	r4, r2
 8000a64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a68:	0c21      	lsrs	r1, r4, #16
 8000a6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a6e:	fa1f f78c 	uxth.w	r7, ip
 8000a72:	fb08 e316 	mls	r3, r8, r6, lr
 8000a76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a7a:	fb06 f107 	mul.w	r1, r6, r7
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	d90a      	bls.n	8000a98 <__udivmoddi4+0x64>
 8000a82:	eb1c 0303 	adds.w	r3, ip, r3
 8000a86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a8a:	f080 811f 	bcs.w	8000ccc <__udivmoddi4+0x298>
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	f240 811c 	bls.w	8000ccc <__udivmoddi4+0x298>
 8000a94:	3e02      	subs	r6, #2
 8000a96:	4463      	add	r3, ip
 8000a98:	1a5b      	subs	r3, r3, r1
 8000a9a:	b2a4      	uxth	r4, r4
 8000a9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aa0:	fb08 3310 	mls	r3, r8, r0, r3
 8000aa4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa8:	fb00 f707 	mul.w	r7, r0, r7
 8000aac:	42a7      	cmp	r7, r4
 8000aae:	d90a      	bls.n	8000ac6 <__udivmoddi4+0x92>
 8000ab0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ab4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab8:	f080 810a 	bcs.w	8000cd0 <__udivmoddi4+0x29c>
 8000abc:	42a7      	cmp	r7, r4
 8000abe:	f240 8107 	bls.w	8000cd0 <__udivmoddi4+0x29c>
 8000ac2:	4464      	add	r4, ip
 8000ac4:	3802      	subs	r0, #2
 8000ac6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aca:	1be4      	subs	r4, r4, r7
 8000acc:	2600      	movs	r6, #0
 8000ace:	b11d      	cbz	r5, 8000ad8 <__udivmoddi4+0xa4>
 8000ad0:	40d4      	lsrs	r4, r2
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ad8:	4631      	mov	r1, r6
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d909      	bls.n	8000af6 <__udivmoddi4+0xc2>
 8000ae2:	2d00      	cmp	r5, #0
 8000ae4:	f000 80ef 	beq.w	8000cc6 <__udivmoddi4+0x292>
 8000ae8:	2600      	movs	r6, #0
 8000aea:	e9c5 0100 	strd	r0, r1, [r5]
 8000aee:	4630      	mov	r0, r6
 8000af0:	4631      	mov	r1, r6
 8000af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af6:	fab3 f683 	clz	r6, r3
 8000afa:	2e00      	cmp	r6, #0
 8000afc:	d14a      	bne.n	8000b94 <__udivmoddi4+0x160>
 8000afe:	428b      	cmp	r3, r1
 8000b00:	d302      	bcc.n	8000b08 <__udivmoddi4+0xd4>
 8000b02:	4282      	cmp	r2, r0
 8000b04:	f200 80f9 	bhi.w	8000cfa <__udivmoddi4+0x2c6>
 8000b08:	1a84      	subs	r4, r0, r2
 8000b0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b0e:	2001      	movs	r0, #1
 8000b10:	469e      	mov	lr, r3
 8000b12:	2d00      	cmp	r5, #0
 8000b14:	d0e0      	beq.n	8000ad8 <__udivmoddi4+0xa4>
 8000b16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b1a:	e7dd      	b.n	8000ad8 <__udivmoddi4+0xa4>
 8000b1c:	b902      	cbnz	r2, 8000b20 <__udivmoddi4+0xec>
 8000b1e:	deff      	udf	#255	; 0xff
 8000b20:	fab2 f282 	clz	r2, r2
 8000b24:	2a00      	cmp	r2, #0
 8000b26:	f040 8092 	bne.w	8000c4e <__udivmoddi4+0x21a>
 8000b2a:	eba1 010c 	sub.w	r1, r1, ip
 8000b2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b32:	fa1f fe8c 	uxth.w	lr, ip
 8000b36:	2601      	movs	r6, #1
 8000b38:	0c20      	lsrs	r0, r4, #16
 8000b3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b46:	fb0e f003 	mul.w	r0, lr, r3
 8000b4a:	4288      	cmp	r0, r1
 8000b4c:	d908      	bls.n	8000b60 <__udivmoddi4+0x12c>
 8000b4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b56:	d202      	bcs.n	8000b5e <__udivmoddi4+0x12a>
 8000b58:	4288      	cmp	r0, r1
 8000b5a:	f200 80cb 	bhi.w	8000cf4 <__udivmoddi4+0x2c0>
 8000b5e:	4643      	mov	r3, r8
 8000b60:	1a09      	subs	r1, r1, r0
 8000b62:	b2a4      	uxth	r4, r4
 8000b64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b68:	fb07 1110 	mls	r1, r7, r0, r1
 8000b6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b70:	fb0e fe00 	mul.w	lr, lr, r0
 8000b74:	45a6      	cmp	lr, r4
 8000b76:	d908      	bls.n	8000b8a <__udivmoddi4+0x156>
 8000b78:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b80:	d202      	bcs.n	8000b88 <__udivmoddi4+0x154>
 8000b82:	45a6      	cmp	lr, r4
 8000b84:	f200 80bb 	bhi.w	8000cfe <__udivmoddi4+0x2ca>
 8000b88:	4608      	mov	r0, r1
 8000b8a:	eba4 040e 	sub.w	r4, r4, lr
 8000b8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b92:	e79c      	b.n	8000ace <__udivmoddi4+0x9a>
 8000b94:	f1c6 0720 	rsb	r7, r6, #32
 8000b98:	40b3      	lsls	r3, r6
 8000b9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ba2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ba6:	fa01 f306 	lsl.w	r3, r1, r6
 8000baa:	431c      	orrs	r4, r3
 8000bac:	40f9      	lsrs	r1, r7
 8000bae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bba:	0c20      	lsrs	r0, r4, #16
 8000bbc:	fa1f fe8c 	uxth.w	lr, ip
 8000bc0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bc8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bcc:	4288      	cmp	r0, r1
 8000bce:	fa02 f206 	lsl.w	r2, r2, r6
 8000bd2:	d90b      	bls.n	8000bec <__udivmoddi4+0x1b8>
 8000bd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bdc:	f080 8088 	bcs.w	8000cf0 <__udivmoddi4+0x2bc>
 8000be0:	4288      	cmp	r0, r1
 8000be2:	f240 8085 	bls.w	8000cf0 <__udivmoddi4+0x2bc>
 8000be6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bea:	4461      	add	r1, ip
 8000bec:	1a09      	subs	r1, r1, r0
 8000bee:	b2a4      	uxth	r4, r4
 8000bf0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bf4:	fb09 1110 	mls	r1, r9, r0, r1
 8000bf8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bfc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c00:	458e      	cmp	lr, r1
 8000c02:	d908      	bls.n	8000c16 <__udivmoddi4+0x1e2>
 8000c04:	eb1c 0101 	adds.w	r1, ip, r1
 8000c08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c0c:	d26c      	bcs.n	8000ce8 <__udivmoddi4+0x2b4>
 8000c0e:	458e      	cmp	lr, r1
 8000c10:	d96a      	bls.n	8000ce8 <__udivmoddi4+0x2b4>
 8000c12:	3802      	subs	r0, #2
 8000c14:	4461      	add	r1, ip
 8000c16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c1e:	eba1 010e 	sub.w	r1, r1, lr
 8000c22:	42a1      	cmp	r1, r4
 8000c24:	46c8      	mov	r8, r9
 8000c26:	46a6      	mov	lr, r4
 8000c28:	d356      	bcc.n	8000cd8 <__udivmoddi4+0x2a4>
 8000c2a:	d053      	beq.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c2c:	b15d      	cbz	r5, 8000c46 <__udivmoddi4+0x212>
 8000c2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c32:	eb61 010e 	sbc.w	r1, r1, lr
 8000c36:	fa01 f707 	lsl.w	r7, r1, r7
 8000c3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c3e:	40f1      	lsrs	r1, r6
 8000c40:	431f      	orrs	r7, r3
 8000c42:	e9c5 7100 	strd	r7, r1, [r5]
 8000c46:	2600      	movs	r6, #0
 8000c48:	4631      	mov	r1, r6
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	f1c2 0320 	rsb	r3, r2, #32
 8000c52:	40d8      	lsrs	r0, r3
 8000c54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c58:	fa21 f303 	lsr.w	r3, r1, r3
 8000c5c:	4091      	lsls	r1, r2
 8000c5e:	4301      	orrs	r1, r0
 8000c60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c64:	fa1f fe8c 	uxth.w	lr, ip
 8000c68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c70:	0c0b      	lsrs	r3, r1, #16
 8000c72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c76:	fb00 f60e 	mul.w	r6, r0, lr
 8000c7a:	429e      	cmp	r6, r3
 8000c7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x260>
 8000c82:	eb1c 0303 	adds.w	r3, ip, r3
 8000c86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c8a:	d22f      	bcs.n	8000cec <__udivmoddi4+0x2b8>
 8000c8c:	429e      	cmp	r6, r3
 8000c8e:	d92d      	bls.n	8000cec <__udivmoddi4+0x2b8>
 8000c90:	3802      	subs	r0, #2
 8000c92:	4463      	add	r3, ip
 8000c94:	1b9b      	subs	r3, r3, r6
 8000c96:	b289      	uxth	r1, r1
 8000c98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x28a>
 8000cac:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cb4:	d216      	bcs.n	8000ce4 <__udivmoddi4+0x2b0>
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d914      	bls.n	8000ce4 <__udivmoddi4+0x2b0>
 8000cba:	3e02      	subs	r6, #2
 8000cbc:	4461      	add	r1, ip
 8000cbe:	1ac9      	subs	r1, r1, r3
 8000cc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cc4:	e738      	b.n	8000b38 <__udivmoddi4+0x104>
 8000cc6:	462e      	mov	r6, r5
 8000cc8:	4628      	mov	r0, r5
 8000cca:	e705      	b.n	8000ad8 <__udivmoddi4+0xa4>
 8000ccc:	4606      	mov	r6, r0
 8000cce:	e6e3      	b.n	8000a98 <__udivmoddi4+0x64>
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	e6f8      	b.n	8000ac6 <__udivmoddi4+0x92>
 8000cd4:	454b      	cmp	r3, r9
 8000cd6:	d2a9      	bcs.n	8000c2c <__udivmoddi4+0x1f8>
 8000cd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ce0:	3801      	subs	r0, #1
 8000ce2:	e7a3      	b.n	8000c2c <__udivmoddi4+0x1f8>
 8000ce4:	4646      	mov	r6, r8
 8000ce6:	e7ea      	b.n	8000cbe <__udivmoddi4+0x28a>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	e794      	b.n	8000c16 <__udivmoddi4+0x1e2>
 8000cec:	4640      	mov	r0, r8
 8000cee:	e7d1      	b.n	8000c94 <__udivmoddi4+0x260>
 8000cf0:	46d0      	mov	r8, sl
 8000cf2:	e77b      	b.n	8000bec <__udivmoddi4+0x1b8>
 8000cf4:	3b02      	subs	r3, #2
 8000cf6:	4461      	add	r1, ip
 8000cf8:	e732      	b.n	8000b60 <__udivmoddi4+0x12c>
 8000cfa:	4630      	mov	r0, r6
 8000cfc:	e709      	b.n	8000b12 <__udivmoddi4+0xde>
 8000cfe:	4464      	add	r4, ip
 8000d00:	3802      	subs	r0, #2
 8000d02:	e742      	b.n	8000b8a <__udivmoddi4+0x156>

08000d04 <__aeabi_idiv0>:
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <DDSControl>:

	static uint16_t phaseAccumultor;

	float phaseStep = SAMPLES/Sample_freq*frequency;
	//phaseStep +=phaseshift; // For FM MODULATION
	phaseAccumultor +=phaseStep;
 8000d08:	4a10      	ldr	r2, [pc, #64]	; (8000d4c <DDSControl+0x44>)
 8000d0a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000d50 <DDSControl+0x48>
 8000d0e:	8813      	ldrh	r3, [r2, #0]
	}
	if (DACValue <0){
		DACValue =0;
	}

	HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_2, DAC_ALIGN_12B_L, DACValue);
 8000d10:	4810      	ldr	r0, [pc, #64]	; (8000d54 <DDSControl+0x4c>)
	phaseAccumultor +=phaseStep;
 8000d12:	ee07 3a90 	vmov	s15, r3
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <DDSControl+0x50>)
 8000d18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d1c:	edd3 6a00 	vldr	s13, [r3]
 8000d20:	eee6 7a87 	vfma.f32	s15, s13, s14
	HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_2, DAC_ALIGN_12B_L, DACValue);
 8000d24:	2110      	movs	r1, #16
	phaseAccumultor +=phaseStep;
 8000d26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d2a:	ee17 3a90 	vmov	r3, s15
 8000d2e:	b29b      	uxth	r3, r3
	if (phaseAccumultor >=SAMPLES){
 8000d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		phaseAccumultor -=SAMPLES;
 8000d34:	bf28      	it	cs
 8000d36:	f5a3 6380 	subcs.w	r3, r3, #1024	; 0x400
 8000d3a:	8013      	strh	r3, [r2, #0]
	float DACValue = (sine_value[phaseAccumultor]);
 8000d3c:	8812      	ldrh	r2, [r2, #0]
	HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_2, DAC_ALIGN_12B_L, DACValue);
 8000d3e:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <DDSControl+0x54>)
 8000d40:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000d44:	2204      	movs	r2, #4
 8000d46:	f000 bdba 	b.w	80018be <HAL_DAC_SetValue>
 8000d4a:	bf00      	nop
 8000d4c:	200008d4 	.word	0x200008d4
 8000d50:	3c27c5ac 	.word	0x3c27c5ac
 8000d54:	20000878 	.word	0x20000878
 8000d58:	20000000 	.word	0x20000000
 8000d5c:	20000004 	.word	0x20000004

08000d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d60:	b510      	push	{r4, lr}
 8000d62:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d64:	2210      	movs	r2, #16
 8000d66:	2100      	movs	r1, #0
 8000d68:	a80a      	add	r0, sp, #40	; 0x28
 8000d6a:	f001 fba9 	bl	80024c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d6e:	2214      	movs	r2, #20
 8000d70:	2100      	movs	r1, #0
 8000d72:	a803      	add	r0, sp, #12
 8000d74:	f001 fba4 	bl	80024c0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d78:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <SystemClock_Config+0x98>)
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	9101      	str	r1, [sp, #4]
 8000d7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d80:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d84:	641a      	str	r2, [r3, #64]	; 0x40
 8000d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8c:	9301      	str	r3, [sp, #4]
 8000d8e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d90:	4b1a      	ldr	r3, [pc, #104]	; (8000dfc <SystemClock_Config+0x9c>)
 8000d92:	9102      	str	r1, [sp, #8]
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000da2:	9302      	str	r3, [sp, #8]
 8000da4:	9b02      	ldr	r3, [sp, #8]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000da6:	2101      	movs	r1, #1
 8000da8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dac:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dae:	e9cd 1308 	strd	r1, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000db2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000db6:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000dba:	22a8      	movs	r2, #168	; 0xa8
 8000dbc:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dbe:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000dc0:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000dc4:	e9cd 4312 	strd	r4, r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc8:	f000 fe88 	bl	8001adc <HAL_RCC_OscConfig>
 8000dcc:	b108      	cbz	r0, 8000dd2 <SystemClock_Config+0x72>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dce:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <SystemClock_Config+0x70>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd2:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dd4:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd8:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dda:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8000dde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000de2:	2105      	movs	r1, #5
 8000de4:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000de6:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000dea:	f001 f855 	bl	8001e98 <HAL_RCC_ClockConfig>
 8000dee:	b108      	cbz	r0, 8000df4 <SystemClock_Config+0x94>
 8000df0:	b672      	cpsid	i
  while (1)
 8000df2:	e7fe      	b.n	8000df2 <SystemClock_Config+0x92>
}
 8000df4:	b014      	add	sp, #80	; 0x50
 8000df6:	bd10      	pop	{r4, pc}
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40007000 	.word	0x40007000

08000e00 <main>:
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b088      	sub	sp, #32
  HAL_Init();
 8000e04:	f000 fa34 	bl	8001270 <HAL_Init>
  SystemClock_Config();
 8000e08:	f7ff ffaa 	bl	8000d60 <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e0c:	4b4b      	ldr	r3, [pc, #300]	; (8000f3c <main+0x13c>)
  hdac.Instance = DAC;
 8000e0e:	4f4c      	ldr	r7, [pc, #304]	; (8000f40 <main+0x140>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e10:	2200      	movs	r2, #0
 8000e12:	9200      	str	r2, [sp, #0]
 8000e14:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e16:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8000e1a:	6319      	str	r1, [r3, #48]	; 0x30
 8000e1c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e1e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8000e22:	9100      	str	r1, [sp, #0]
 8000e24:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e26:	9201      	str	r2, [sp, #4]
 8000e28:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e2a:	f041 0101 	orr.w	r1, r1, #1
 8000e2e:	6319      	str	r1, [r3, #48]	; 0x30
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	9301      	str	r3, [sp, #4]
 8000e38:	9b01      	ldr	r3, [sp, #4]
  hdac.Instance = DAC;
 8000e3a:	4b42      	ldr	r3, [pc, #264]	; (8000f44 <main+0x144>)
 8000e3c:	603b      	str	r3, [r7, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000e3e:	4638      	mov	r0, r7
  DAC_ChannelConfTypeDef sConfig = {0};
 8000e40:	e9cd 2204 	strd	r2, r2, [sp, #16]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000e44:	f000 fcfe 	bl	8001844 <HAL_DAC_Init>
 8000e48:	b108      	cbz	r0, 8000e4e <main+0x4e>
 8000e4a:	b672      	cpsid	i
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <main+0x4c>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000e4e:	2210      	movs	r2, #16
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e50:	e9cd 0004 	strd	r0, r0, [sp, #16]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000e54:	eb0d 0102 	add.w	r1, sp, r2
 8000e58:	4638      	mov	r0, r7
 8000e5a:	f000 fd42 	bl	80018e2 <HAL_DAC_ConfigChannel>
 8000e5e:	4604      	mov	r4, r0
 8000e60:	b108      	cbz	r0, 8000e66 <main+0x66>
 8000e62:	b672      	cpsid	i
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <main+0x64>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e66:	2210      	movs	r2, #16
  htim2.Instance = TIM2;
 8000e68:	4d37      	ldr	r5, [pc, #220]	; (8000f48 <main+0x148>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e6a:	4601      	mov	r1, r0
 8000e6c:	eb0d 0002 	add.w	r0, sp, r2
 8000e70:	f001 fb26 	bl	80024c0 <memset>
  htim2.Init.Prescaler = 83;
 8000e74:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e78:	2353      	movs	r3, #83	; 0x53
 8000e7a:	e9c5 0300 	strd	r0, r3, [r5]
  htim2.Init.Period = 9;
 8000e7e:	2309      	movs	r3, #9
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e80:	e9c5 3403 	strd	r3, r4, [r5, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e84:	4628      	mov	r0, r5
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e86:	2380      	movs	r3, #128	; 0x80
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e88:	e9cd 4402 	strd	r4, r4, [sp, #8]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8c:	60ac      	str	r4, [r5, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e8e:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e90:	f001 f9e0 	bl	8002254 <HAL_TIM_Base_Init>
 8000e94:	b108      	cbz	r0, 8000e9a <main+0x9a>
 8000e96:	b672      	cpsid	i
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <main+0x98>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e9e:	a904      	add	r1, sp, #16
 8000ea0:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ea2:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ea4:	f001 fa0c 	bl	80022c0 <HAL_TIM_ConfigClockSource>
 8000ea8:	b108      	cbz	r0, 8000eae <main+0xae>
 8000eaa:	b672      	cpsid	i
  while (1)
 8000eac:	e7fe      	b.n	8000eac <main+0xac>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000eae:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb0:	e9cd 3002 	strd	r3, r0, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eb4:	a902      	add	r1, sp, #8
 8000eb6:	4628      	mov	r0, r5
 8000eb8:	f001 fa9e 	bl	80023f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ebc:	4606      	mov	r6, r0
 8000ebe:	b108      	cbz	r0, 8000ec4 <main+0xc4>
 8000ec0:	b672      	cpsid	i
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <main+0xc2>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ec4:	2210      	movs	r2, #16
 8000ec6:	4601      	mov	r1, r0
 8000ec8:	eb0d 0002 	add.w	r0, sp, r2
 8000ecc:	f001 faf8 	bl	80024c0 <memset>
  hadc1.Instance = ADC1;
 8000ed0:	4c1e      	ldr	r4, [pc, #120]	; (8000f4c <main+0x14c>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ed2:	4a1f      	ldr	r2, [pc, #124]	; (8000f50 <main+0x150>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ed4:	60a6      	str	r6, [r4, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ed6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  hadc1.Init.NbrOfConversion = 1;
 8000eda:	f04f 0801 	mov.w	r8, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ede:	e9c4 2300 	strd	r2, r3, [r4]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000ee2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8000ee6:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eea:	4620      	mov	r0, r4
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000eec:	e9c4 310a 	strd	r3, r1, [r4, #40]	; 0x28
  hadc1.Init.ScanConvMode = DISABLE;
 8000ef0:	6126      	str	r6, [r4, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ef2:	7626      	strb	r6, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ef4:	f884 6020 	strb.w	r6, [r4, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ef8:	60e6      	str	r6, [r4, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000efa:	f8c4 801c 	str.w	r8, [r4, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000efe:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f02:	f8c4 8014 	str.w	r8, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f06:	f000 f9df 	bl	80012c8 <HAL_ADC_Init>
 8000f0a:	b108      	cbz	r0, 8000f10 <main+0x110>
 8000f0c:	b672      	cpsid	i
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <main+0x10e>
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f10:	9006      	str	r0, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f12:	a904      	add	r1, sp, #16
 8000f14:	4620      	mov	r0, r4
  sConfig.Rank = 1;
 8000f16:	e9cd 8804 	strd	r8, r8, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f1a:	f000 fb99 	bl	8001650 <HAL_ADC_ConfigChannel>
 8000f1e:	b108      	cbz	r0, 8000f24 <main+0x124>
 8000f20:	b672      	cpsid	i
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <main+0x122>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8000f24:	2110      	movs	r1, #16
 8000f26:	4638      	mov	r0, r7
 8000f28:	f000 fc9f 	bl	800186a <HAL_DAC_Start>
  HAL_ADC_Start_IT(&hadc1 ) ;
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	f000 fa71 	bl	8001414 <HAL_ADC_Start_IT>
  HAL_TIM_Base_Start(&htim2) ;
 8000f32:	4628      	mov	r0, r5
 8000f34:	f001 f84c 	bl	8001fd0 <HAL_TIM_Base_Start>
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <main+0x138>
 8000f3a:	bf00      	nop
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	20000878 	.word	0x20000878
 8000f44:	40007400 	.word	0x40007400
 8000f48:	2000088c 	.word	0x2000088c
 8000f4c:	20000830 	.word	0x20000830
 8000f50:	40012000 	.word	0x40012000
 8000f54:	00000000 	.word	0x00000000

08000f58 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000f58:	b510      	push	{r4, lr}
	ADCValue=HAL_ADC_GetValue(&hadc1);
 8000f5a:	482d      	ldr	r0, [pc, #180]	; (8001010 <HAL_ADC_ConvCpltCallback+0xb8>)
       xv[0] = xv[1]; xv[1] = xv[2]; xv[2] = xv[3];
 8000f5c:	4c2d      	ldr	r4, [pc, #180]	; (8001014 <HAL_ADC_ConvCpltCallback+0xbc>)
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000f5e:	ed2d 8b04 	vpush	{d8-d9}
	ADCValue=HAL_ADC_GetValue(&hadc1);
 8000f62:	f000 fae1 	bl	8001528 <HAL_ADC_GetValue>
 8000f66:	4b2c      	ldr	r3, [pc, #176]	; (8001018 <HAL_ADC_ConvCpltCallback+0xc0>)
       xv[0] = xv[1]; xv[1] = xv[2]; xv[2] = xv[3];
 8000f68:	ed94 8a01 	vldr	s16, [r4, #4]
 8000f6c:	ed94 9a03 	vldr	s18, [r4, #12]
 8000f70:	edd4 8a02 	vldr	s17, [r4, #8]
	ADCValue=HAL_ADC_GetValue(&hadc1);
 8000f74:	8018      	strh	r0, [r3, #0]
        xv[3] = Input / GAIN;
 8000f76:	b280      	uxth	r0, r0
       xv[0] = xv[1]; xv[1] = xv[2]; xv[2] = xv[3];
 8000f78:	ed84 8a00 	vstr	s16, [r4]
 8000f7c:	edc4 8a01 	vstr	s17, [r4, #4]
 8000f80:	ed84 9a02 	vstr	s18, [r4, #8]
        xv[3] = Input / GAIN;
 8000f84:	f7ff fa72 	bl	800046c <__aeabi_i2d>
 8000f88:	a31f      	add	r3, pc, #124	; (adr r3, 8001008 <HAL_ADC_ConvCpltCallback+0xb0>)
 8000f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8e:	f7ff fc01 	bl	8000794 <__aeabi_ddiv>
 8000f92:	f7ff fce7 	bl	8000964 <__aeabi_d2f>
 8000f96:	ee07 0a90 	vmov	s15, r0
        yv[3] =   (xv[0] + xv[3]) + 3 * (xv[1] + xv[2])
 8000f9a:	ee78 8a89 	vadd.f32	s17, s17, s18
 8000f9e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000fa2:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
        yv[0] = yv[1]; yv[1] = yv[2]; yv[2] = yv[3];
 8000fa6:	4b1d      	ldr	r3, [pc, #116]	; (800101c <HAL_ADC_ConvCpltCallback+0xc4>)
	vout=filterloop(ADCValue);
 8000fa8:	4a1d      	ldr	r2, [pc, #116]	; (8001020 <HAL_ADC_ConvCpltCallback+0xc8>)
        yv[0] = yv[1]; yv[1] = yv[2]; yv[2] = yv[3];
 8000faa:	ed93 6a01 	vldr	s12, [r3, #4]
 8000fae:	edd3 6a02 	vldr	s13, [r3, #8]
 8000fb2:	ed83 6a00 	vstr	s12, [r3]
        yv[3] =   (xv[0] + xv[3]) + 3 * (xv[1] + xv[2])
 8000fb6:	eee8 7aa5 	vfma.f32	s15, s17, s11
}
 8000fba:	ecbd 8b04 	vpop	{d8-d9}
                     + (  0.8067320684f * yv[0]) + ( -2.5964900213f * yv[1])
 8000fbe:	eddf 5a19 	vldr	s11, [pc, #100]	; 8001024 <HAL_ADC_ConvCpltCallback+0xcc>
        yv[0] = yv[1]; yv[1] = yv[2]; yv[2] = yv[3];
 8000fc2:	ed93 7a03 	vldr	s14, [r3, #12]
 8000fc6:	edc3 6a01 	vstr	s13, [r3, #4]
                     + (  0.8067320684f * yv[0]) + ( -2.5964900213f * yv[1])
 8000fca:	eee6 7a25 	vfma.f32	s15, s12, s11
        xv[3] = Input / GAIN;
 8000fce:	60e0      	str	r0, [r4, #12]
	HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, vout);
 8000fd0:	2110      	movs	r1, #16
                     + (  0.8067320684f * yv[0]) + ( -2.5964900213f * yv[1])
 8000fd2:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8001028 <HAL_ADC_ConvCpltCallback+0xd0>
        yv[0] = yv[1]; yv[1] = yv[2]; yv[2] = yv[3];
 8000fd6:	ed83 7a02 	vstr	s14, [r3, #8]
                     + (  0.8067320684f * yv[0]) + ( -2.5964900213f * yv[1])
 8000fda:	eee6 7a86 	vfma.f32	s15, s13, s12
}
 8000fde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                     + (  2.7891392093f * yv[2]);
 8000fe2:	eddf 6a12 	vldr	s13, [pc, #72]	; 800102c <HAL_ADC_ConvCpltCallback+0xd4>
	HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, vout);
 8000fe6:	4812      	ldr	r0, [pc, #72]	; (8001030 <HAL_ADC_ConvCpltCallback+0xd8>)
                     + (  2.7891392093f * yv[2]);
 8000fe8:	eee7 7a26 	vfma.f32	s15, s14, s13
        yv[3] =   (xv[0] + xv[3]) + 3 * (xv[1] + xv[2])
 8000fec:	edc3 7a03 	vstr	s15, [r3, #12]
        uint16_t Output = yv[3];
 8000ff0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ff4:	ee17 3a90 	vmov	r3, s15
 8000ff8:	b29b      	uxth	r3, r3
	vout=filterloop(ADCValue);
 8000ffa:	8013      	strh	r3, [r2, #0]
	HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, vout);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f000 bc5e 	b.w	80018be <HAL_DAC_SetValue>
 8001002:	bf00      	nop
 8001004:	f3af 8000 	nop.w
 8001008:	c3760bf6 	.word	0xc3760bf6
 800100c:	40c940b6 	.word	0x40c940b6
 8001010:	20000830 	.word	0x20000830
 8001014:	200008d8 	.word	0x200008d8
 8001018:	2000082c 	.word	0x2000082c
 800101c:	200008e8 	.word	0x200008e8
 8001020:	200008d6 	.word	0x200008d6
 8001024:	3f4e85fe 	.word	0x3f4e85fe
 8001028:	c0262ce4 	.word	0xc0262ce4
 800102c:	40328142 	.word	0x40328142
 8001030:	20000878 	.word	0x20000878

08001034 <HAL_TIM_PeriodElapsedCallback>:
  if(htim == &htim2){
 8001034:	4b02      	ldr	r3, [pc, #8]	; (8001040 <HAL_TIM_PeriodElapsedCallback+0xc>)
 8001036:	4283      	cmp	r3, r0
 8001038:	d101      	bne.n	800103e <HAL_TIM_PeriodElapsedCallback+0xa>
	  DDSControl();
 800103a:	f7ff be65 	b.w	8000d08 <DDSControl>
}
 800103e:	4770      	bx	lr
 8001040:	2000088c 	.word	0x2000088c

08001044 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001044:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001046:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <HAL_MspInit+0x34>)
 8001048:	2100      	movs	r1, #0
 800104a:	9100      	str	r1, [sp, #0]
 800104c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800104e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001052:	645a      	str	r2, [r3, #68]	; 0x44
 8001054:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001056:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800105a:	9200      	str	r2, [sp, #0]
 800105c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800105e:	9101      	str	r1, [sp, #4]
 8001060:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001062:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001066:	641a      	str	r2, [r3, #64]	; 0x40
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106e:	9301      	str	r3, [sp, #4]
 8001070:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001072:	b002      	add	sp, #8
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	40023800 	.word	0x40023800

0800107c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800107c:	b510      	push	{r4, lr}
 800107e:	4604      	mov	r4, r0
 8001080:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001082:	2214      	movs	r2, #20
 8001084:	2100      	movs	r1, #0
 8001086:	a803      	add	r0, sp, #12
 8001088:	f001 fa1a 	bl	80024c0 <memset>
  if(hadc->Instance==ADC1)
 800108c:	6822      	ldr	r2, [r4, #0]
 800108e:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <HAL_ADC_MspInit+0x6c>)
 8001090:	429a      	cmp	r2, r3
 8001092:	d126      	bne.n	80010e2 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001094:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8001098:	2400      	movs	r4, #0
 800109a:	9401      	str	r4, [sp, #4]
 800109c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109e:	4813      	ldr	r0, [pc, #76]	; (80010ec <HAL_ADC_MspInit+0x70>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010a4:	645a      	str	r2, [r3, #68]	; 0x44
 80010a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010a8:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80010ac:	9201      	str	r2, [sp, #4]
 80010ae:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b0:	9402      	str	r4, [sp, #8]
 80010b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010b4:	f042 0201 	orr.w	r2, r2, #1
 80010b8:	631a      	str	r2, [r3, #48]	; 0x30
 80010ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010bc:	f003 0301 	and.w	r3, r3, #1
 80010c0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010c2:	2202      	movs	r2, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c4:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010c8:	2303      	movs	r3, #3
 80010ca:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ce:	f000 fc2b 	bl	8001928 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80010d2:	2012      	movs	r0, #18
 80010d4:	4622      	mov	r2, r4
 80010d6:	4621      	mov	r1, r4
 80010d8:	f000 fb60 	bl	800179c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80010dc:	2012      	movs	r0, #18
 80010de:	f000 fb8f 	bl	8001800 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010e2:	b008      	add	sp, #32
 80010e4:	bd10      	pop	{r4, pc}
 80010e6:	bf00      	nop
 80010e8:	40012000 	.word	0x40012000
 80010ec:	40020000 	.word	0x40020000

080010f0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80010f0:	b510      	push	{r4, lr}
 80010f2:	4604      	mov	r4, r0
 80010f4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f6:	2214      	movs	r2, #20
 80010f8:	2100      	movs	r1, #0
 80010fa:	a803      	add	r0, sp, #12
 80010fc:	f001 f9e0 	bl	80024c0 <memset>
  if(hdac->Instance==DAC)
 8001100:	6822      	ldr	r2, [r4, #0]
 8001102:	4b12      	ldr	r3, [pc, #72]	; (800114c <HAL_DAC_MspInit+0x5c>)
 8001104:	429a      	cmp	r2, r3
 8001106:	d11e      	bne.n	8001146 <HAL_DAC_MspInit+0x56>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001108:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 800110c:	2100      	movs	r1, #0
 800110e:	9101      	str	r1, [sp, #4]
 8001110:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001112:	480f      	ldr	r0, [pc, #60]	; (8001150 <HAL_DAC_MspInit+0x60>)
    __HAL_RCC_DAC_CLK_ENABLE();
 8001114:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001118:	641a      	str	r2, [r3, #64]	; 0x40
 800111a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800111c:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8001120:	9201      	str	r2, [sp, #4]
 8001122:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001124:	9102      	str	r1, [sp, #8]
 8001126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001128:	f042 0201 	orr.w	r2, r2, #1
 800112c:	631a      	str	r2, [r3, #48]	; 0x30
 800112e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	9302      	str	r3, [sp, #8]
 8001136:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001138:	2220      	movs	r2, #32
 800113a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800113e:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	f000 fbf1 	bl	8001928 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001146:	b008      	add	sp, #32
 8001148:	bd10      	pop	{r4, pc}
 800114a:	bf00      	nop
 800114c:	40007400 	.word	0x40007400
 8001150:	40020000 	.word	0x40020000

08001154 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8001154:	6803      	ldr	r3, [r0, #0]
 8001156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 800115a:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 800115c:	d116      	bne.n	800118c <HAL_TIM_Base_MspInit+0x38>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800115e:	2200      	movs	r2, #0
 8001160:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8001164:	9201      	str	r2, [sp, #4]
 8001166:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001168:	f041 0101 	orr.w	r1, r1, #1
 800116c:	6419      	str	r1, [r3, #64]	; 0x40
 800116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	9301      	str	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001176:	4611      	mov	r1, r2
 8001178:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 800117a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800117c:	f000 fb0e 	bl	800179c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001180:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001182:	b003      	add	sp, #12
 8001184:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001188:	f000 bb3a 	b.w	8001800 <HAL_NVIC_EnableIRQ>
}
 800118c:	b003      	add	sp, #12
 800118e:	f85d fb04 	ldr.w	pc, [sp], #4

08001192 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001192:	e7fe      	b.n	8001192 <NMI_Handler>

08001194 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001194:	e7fe      	b.n	8001194 <HardFault_Handler>

08001196 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001196:	e7fe      	b.n	8001196 <MemManage_Handler>

08001198 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001198:	e7fe      	b.n	8001198 <BusFault_Handler>

0800119a <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800119a:	e7fe      	b.n	800119a <UsageFault_Handler>

0800119c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800119c:	4770      	bx	lr

0800119e <DebugMon_Handler>:
 800119e:	4770      	bx	lr

080011a0 <PendSV_Handler>:
 80011a0:	4770      	bx	lr

080011a2 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a2:	f000 b87f 	b.w	80012a4 <HAL_IncTick>
	...

080011a8 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80011a8:	4801      	ldr	r0, [pc, #4]	; (80011b0 <ADC_IRQHandler+0x8>)
 80011aa:	f000 b9c2 	b.w	8001532 <HAL_ADC_IRQHandler>
 80011ae:	bf00      	nop
 80011b0:	20000830 	.word	0x20000830

080011b4 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011b4:	4801      	ldr	r0, [pc, #4]	; (80011bc <TIM2_IRQHandler+0x8>)
 80011b6:	f000 bf45 	b.w	8002044 <HAL_TIM_IRQHandler>
 80011ba:	bf00      	nop
 80011bc:	2000088c 	.word	0x2000088c

080011c0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011c0:	4a03      	ldr	r2, [pc, #12]	; (80011d0 <SystemInit+0x10>)
 80011c2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80011c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011ca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011ce:	4770      	bx	lr
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800120c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011d8:	480d      	ldr	r0, [pc, #52]	; (8001210 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011da:	490e      	ldr	r1, [pc, #56]	; (8001214 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011dc:	4a0e      	ldr	r2, [pc, #56]	; (8001218 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e0:	e002      	b.n	80011e8 <LoopCopyDataInit>

080011e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e6:	3304      	adds	r3, #4

080011e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ec:	d3f9      	bcc.n	80011e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ee:	4a0b      	ldr	r2, [pc, #44]	; (800121c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011f0:	4c0b      	ldr	r4, [pc, #44]	; (8001220 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f4:	e001      	b.n	80011fa <LoopFillZerobss>

080011f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f8:	3204      	adds	r2, #4

080011fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011fc:	d3fb      	bcc.n	80011f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011fe:	f7ff ffdf 	bl	80011c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001202:	f001 f939 	bl	8002478 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001206:	f7ff fdfb 	bl	8000e00 <main>
  bx  lr    
 800120a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800120c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001214:	20000810 	.word	0x20000810
  ldr r2, =_sidata
 8001218:	08002508 	.word	0x08002508
  ldr r2, =_sbss
 800121c:	20000810 	.word	0x20000810
  ldr r4, =_ebss
 8001220:	200008fc 	.word	0x200008fc

08001224 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001224:	e7fe      	b.n	8001224 <CAN1_RX0_IRQHandler>
	...

08001228 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001228:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800122a:	4a0e      	ldr	r2, [pc, #56]	; (8001264 <HAL_InitTick+0x3c>)
 800122c:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <HAL_InitTick+0x40>)
{
 800122e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001230:	7818      	ldrb	r0, [r3, #0]
 8001232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001236:	fbb3 f3f0 	udiv	r3, r3, r0
 800123a:	6810      	ldr	r0, [r2, #0]
 800123c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001240:	f000 faec 	bl	800181c <HAL_SYSTICK_Config>
 8001244:	4604      	mov	r4, r0
 8001246:	b958      	cbnz	r0, 8001260 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001248:	2d0f      	cmp	r5, #15
 800124a:	d809      	bhi.n	8001260 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800124c:	4602      	mov	r2, r0
 800124e:	4629      	mov	r1, r5
 8001250:	f04f 30ff 	mov.w	r0, #4294967295
 8001254:	f000 faa2 	bl	800179c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001258:	4b04      	ldr	r3, [pc, #16]	; (800126c <HAL_InitTick+0x44>)
 800125a:	4620      	mov	r0, r4
 800125c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800125e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001260:	2001      	movs	r0, #1
 8001262:	e7fc      	b.n	800125e <HAL_InitTick+0x36>
 8001264:	20000804 	.word	0x20000804
 8001268:	20000808 	.word	0x20000808
 800126c:	2000080c 	.word	0x2000080c

08001270 <HAL_Init>:
{
 8001270:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001272:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <HAL_Init+0x30>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800127a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001282:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800128a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800128c:	2003      	movs	r0, #3
 800128e:	f000 fa73 	bl	8001778 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001292:	200f      	movs	r0, #15
 8001294:	f7ff ffc8 	bl	8001228 <HAL_InitTick>
  HAL_MspInit();
 8001298:	f7ff fed4 	bl	8001044 <HAL_MspInit>
}
 800129c:	2000      	movs	r0, #0
 800129e:	bd08      	pop	{r3, pc}
 80012a0:	40023c00 	.word	0x40023c00

080012a4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80012a4:	4a03      	ldr	r2, [pc, #12]	; (80012b4 <HAL_IncTick+0x10>)
 80012a6:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <HAL_IncTick+0x14>)
 80012a8:	6811      	ldr	r1, [r2, #0]
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	440b      	add	r3, r1
 80012ae:	6013      	str	r3, [r2, #0]
}
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	200008f8 	.word	0x200008f8
 80012b8:	20000808 	.word	0x20000808

080012bc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80012bc:	4b01      	ldr	r3, [pc, #4]	; (80012c4 <HAL_GetTick+0x8>)
 80012be:	6818      	ldr	r0, [r3, #0]
}
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	200008f8 	.word	0x200008f8

080012c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012c8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012ca:	4604      	mov	r4, r0
 80012cc:	2800      	cmp	r0, #0
 80012ce:	f000 809b 	beq.w	8001408 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80012d2:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80012d4:	b925      	cbnz	r5, 80012e0 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012d6:	f7ff fed1 	bl	800107c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012da:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012dc:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012e2:	06db      	lsls	r3, r3, #27
 80012e4:	f100 808e 	bmi.w	8001404 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012ee:	f023 0302 	bic.w	r3, r3, #2
 80012f2:	f043 0302 	orr.w	r3, r3, #2
 80012f6:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80012f8:	4b44      	ldr	r3, [pc, #272]	; (800140c <HAL_ADC_Init+0x144>)
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001300:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001302:	685a      	ldr	r2, [r3, #4]
 8001304:	6861      	ldr	r1, [r4, #4]
 8001306:	430a      	orrs	r2, r1
 8001308:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800130a:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800130c:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800130e:	685a      	ldr	r2, [r3, #4]
 8001310:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001314:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800131c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800131e:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001320:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001322:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001326:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001328:	685a      	ldr	r2, [r3, #4]
 800132a:	430a      	orrs	r2, r1
 800132c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800132e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001330:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001332:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001336:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001338:	689a      	ldr	r2, [r3, #8]
 800133a:	430a      	orrs	r2, r1
 800133c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800133e:	4934      	ldr	r1, [pc, #208]	; (8001410 <HAL_ADC_Init+0x148>)
 8001340:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001342:	428a      	cmp	r2, r1
 8001344:	d052      	beq.n	80013ec <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001346:	6899      	ldr	r1, [r3, #8]
 8001348:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 800134c:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800134e:	6899      	ldr	r1, [r3, #8]
 8001350:	430a      	orrs	r2, r1
 8001352:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001354:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001356:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001358:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800135c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001362:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001364:	689a      	ldr	r2, [r3, #8]
 8001366:	f022 0202 	bic.w	r2, r2, #2
 800136a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800136c:	689a      	ldr	r2, [r3, #8]
 800136e:	7e21      	ldrb	r1, [r4, #24]
 8001370:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8001374:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001376:	f894 2020 	ldrb.w	r2, [r4, #32]
 800137a:	2a00      	cmp	r2, #0
 800137c:	d03e      	beq.n	80013fc <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800137e:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001380:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001382:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001386:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001388:	685a      	ldr	r2, [r3, #4]
 800138a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800138e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001390:	685a      	ldr	r2, [r3, #4]
 8001392:	3901      	subs	r1, #1
 8001394:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001398:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800139a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800139c:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800139e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80013a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80013a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013a6:	3901      	subs	r1, #1
 80013a8:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80013ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80013b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80013b6:	689a      	ldr	r2, [r3, #8]
 80013b8:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 80013bc:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 80013c0:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80013c2:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80013c4:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80013c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80013cc:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80013ce:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80013d0:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80013d4:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80013d6:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80013d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013da:	f023 0303 	bic.w	r3, r3, #3
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80013e4:	2300      	movs	r3, #0
 80013e6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80013ea:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013ec:	689a      	ldr	r2, [r3, #8]
 80013ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013f4:	689a      	ldr	r2, [r3, #8]
 80013f6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013fa:	e7b2      	b.n	8001362 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001402:	e7c9      	b.n	8001398 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8001404:	2001      	movs	r0, #1
 8001406:	e7ed      	b.n	80013e4 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8001408:	2001      	movs	r0, #1
 800140a:	e7ee      	b.n	80013ea <HAL_ADC_Init+0x122>
 800140c:	40012300 	.word	0x40012300
 8001410:	0f000001 	.word	0x0f000001

08001414 <HAL_ADC_Start_IT>:
{
 8001414:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t counter = 0U;
 8001416:	2300      	movs	r3, #0
 8001418:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800141a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800141e:	2b01      	cmp	r3, #1
 8001420:	d072      	beq.n	8001508 <HAL_ADC_Start_IT+0xf4>
 8001422:	2301      	movs	r3, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001424:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hadc);
 8001426:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800142a:	6893      	ldr	r3, [r2, #8]
 800142c:	07d9      	lsls	r1, r3, #31
 800142e:	d50c      	bpl.n	800144a <HAL_ADC_Start_IT+0x36>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001430:	6893      	ldr	r3, [r2, #8]
 8001432:	f013 0301 	ands.w	r3, r3, #1
 8001436:	d11a      	bne.n	800146e <HAL_ADC_Start_IT+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001438:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800143a:	f042 0210 	orr.w	r2, r2, #16
 800143e:	6402      	str	r2, [r0, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001440:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001442:	f042 0201 	orr.w	r2, r2, #1
 8001446:	6442      	str	r2, [r0, #68]	; 0x44
 8001448:	e05c      	b.n	8001504 <HAL_ADC_Start_IT+0xf0>
    __HAL_ADC_ENABLE(hadc);
 800144a:	6893      	ldr	r3, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800144c:	4930      	ldr	r1, [pc, #192]	; (8001510 <HAL_ADC_Start_IT+0xfc>)
    __HAL_ADC_ENABLE(hadc);
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	6093      	str	r3, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001454:	4b2f      	ldr	r3, [pc, #188]	; (8001514 <HAL_ADC_Start_IT+0x100>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	fbb3 f3f1 	udiv	r3, r3, r1
 800145c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      counter--;
 8001460:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 8001462:	9b01      	ldr	r3, [sp, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d0e3      	beq.n	8001430 <HAL_ADC_Start_IT+0x1c>
      counter--;
 8001468:	9b01      	ldr	r3, [sp, #4]
 800146a:	3b01      	subs	r3, #1
 800146c:	e7f8      	b.n	8001460 <HAL_ADC_Start_IT+0x4c>
    ADC_STATE_CLR_SET(hadc->State,
 800146e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001470:	4c29      	ldr	r4, [pc, #164]	; (8001518 <HAL_ADC_Start_IT+0x104>)
 8001472:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001476:	f023 0301 	bic.w	r3, r3, #1
 800147a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800147e:	6403      	str	r3, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001480:	6853      	ldr	r3, [r2, #4]
 8001482:	055b      	lsls	r3, r3, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001484:	bf41      	itttt	mi
 8001486:	6c03      	ldrmi	r3, [r0, #64]	; 0x40
 8001488:	f423 5340 	bicmi.w	r3, r3, #12288	; 0x3000
 800148c:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
 8001490:	6403      	strmi	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001492:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001494:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001498:	bf1c      	itt	ne
 800149a:	6c43      	ldrne	r3, [r0, #68]	; 0x44
 800149c:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80014a0:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80014a2:	f06f 0122 	mvn.w	r1, #34	; 0x22
    __HAL_UNLOCK(hadc);
 80014a6:	2300      	movs	r3, #0
 80014a8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80014ac:	6011      	str	r1, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80014ae:	6851      	ldr	r1, [r2, #4]
 80014b0:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 80014b4:	f041 0120 	orr.w	r1, r1, #32
 80014b8:	6051      	str	r1, [r2, #4]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80014ba:	4918      	ldr	r1, [pc, #96]	; (800151c <HAL_ADC_Start_IT+0x108>)
 80014bc:	6848      	ldr	r0, [r1, #4]
 80014be:	f010 001f 	ands.w	r0, r0, #31
 80014c2:	d119      	bne.n	80014f8 <HAL_ADC_Start_IT+0xe4>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80014c4:	42a2      	cmp	r2, r4
 80014c6:	d006      	beq.n	80014d6 <HAL_ADC_Start_IT+0xc2>
 80014c8:	4b15      	ldr	r3, [pc, #84]	; (8001520 <HAL_ADC_Start_IT+0x10c>)
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d10d      	bne.n	80014ea <HAL_ADC_Start_IT+0xd6>
 80014ce:	684b      	ldr	r3, [r1, #4]
 80014d0:	f013 0f1f 	tst.w	r3, #31
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80014d4:	d107      	bne.n	80014e6 <HAL_ADC_Start_IT+0xd2>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80014d6:	6890      	ldr	r0, [r2, #8]
 80014d8:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80014dc:	d116      	bne.n	800150c <HAL_ADC_Start_IT+0xf8>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014de:	6893      	ldr	r3, [r2, #8]
 80014e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80014e4:	6093      	str	r3, [r2, #8]
}
 80014e6:	b002      	add	sp, #8
 80014e8:	bd10      	pop	{r4, pc}
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80014ea:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <HAL_ADC_Start_IT+0x110>)
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d1fa      	bne.n	80014e6 <HAL_ADC_Start_IT+0xd2>
 80014f0:	684b      	ldr	r3, [r1, #4]
 80014f2:	f013 0f10 	tst.w	r3, #16
 80014f6:	e7ed      	b.n	80014d4 <HAL_ADC_Start_IT+0xc0>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80014f8:	42a2      	cmp	r2, r4
 80014fa:	d107      	bne.n	800150c <HAL_ADC_Start_IT+0xf8>
 80014fc:	6890      	ldr	r0, [r2, #8]
 80014fe:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8001502:	d0ec      	beq.n	80014de <HAL_ADC_Start_IT+0xca>
  return HAL_OK;
 8001504:	4618      	mov	r0, r3
 8001506:	e7ee      	b.n	80014e6 <HAL_ADC_Start_IT+0xd2>
  __HAL_LOCK(hadc);
 8001508:	2002      	movs	r0, #2
 800150a:	e7ec      	b.n	80014e6 <HAL_ADC_Start_IT+0xd2>
  return HAL_OK;
 800150c:	2000      	movs	r0, #0
 800150e:	e7ea      	b.n	80014e6 <HAL_ADC_Start_IT+0xd2>
 8001510:	000f4240 	.word	0x000f4240
 8001514:	20000804 	.word	0x20000804
 8001518:	40012000 	.word	0x40012000
 800151c:	40012300 	.word	0x40012300
 8001520:	40012100 	.word	0x40012100
 8001524:	40012200 	.word	0x40012200

08001528 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8001528:	6803      	ldr	r3, [r0, #0]
 800152a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 800152c:	4770      	bx	lr

0800152e <HAL_ADC_LevelOutOfWindowCallback>:
 800152e:	4770      	bx	lr

08001530 <HAL_ADC_ErrorCallback>:
 8001530:	4770      	bx	lr

08001532 <HAL_ADC_IRQHandler>:
  uint32_t tmp_sr = hadc->Instance->SR;
 8001532:	6803      	ldr	r3, [r0, #0]
{
 8001534:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_sr = hadc->Instance->SR;
 8001536:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001538:	685d      	ldr	r5, [r3, #4]
  if(tmp1 && tmp2)
 800153a:	07b2      	lsls	r2, r6, #30
{
 800153c:	4604      	mov	r4, r0
  if(tmp1 && tmp2)
 800153e:	d52b      	bpl.n	8001598 <HAL_ADC_IRQHandler+0x66>
 8001540:	06a8      	lsls	r0, r5, #26
 8001542:	d529      	bpl.n	8001598 <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001544:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001546:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001548:	bf5e      	ittt	pl
 800154a:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 800154c:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8001550:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001558:	d117      	bne.n	800158a <HAL_ADC_IRQHandler+0x58>
 800155a:	7e22      	ldrb	r2, [r4, #24]
 800155c:	b9aa      	cbnz	r2, 800158a <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800155e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001560:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8001564:	d002      	beq.n	800156c <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001566:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001568:	0552      	lsls	r2, r2, #21
 800156a:	d40e      	bmi.n	800158a <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800156c:	685a      	ldr	r2, [r3, #4]
 800156e:	f022 0220 	bic.w	r2, r2, #32
 8001572:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001574:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001576:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800157a:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800157c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800157e:	04d8      	lsls	r0, r3, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001580:	bf5e      	ittt	pl
 8001582:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 8001584:	f043 0301 	orrpl.w	r3, r3, #1
 8001588:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800158a:	4620      	mov	r0, r4
 800158c:	f7ff fce4 	bl	8000f58 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001590:	6823      	ldr	r3, [r4, #0]
 8001592:	f06f 0212 	mvn.w	r2, #18
 8001596:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 8001598:	0771      	lsls	r1, r6, #29
 800159a:	d533      	bpl.n	8001604 <HAL_ADC_IRQHandler+0xd2>
 800159c:	062a      	lsls	r2, r5, #24
 800159e:	d531      	bpl.n	8001604 <HAL_ADC_IRQHandler+0xd2>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015a2:	06db      	lsls	r3, r3, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80015a4:	bf5e      	ittt	pl
 80015a6:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 80015a8:	f443 5300 	orrpl.w	r3, r3, #8192	; 0x2000
 80015ac:	6423      	strpl	r3, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80015ae:	6823      	ldr	r3, [r4, #0]
 80015b0:	689a      	ldr	r2, [r3, #8]
 80015b2:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80015b6:	d11e      	bne.n	80015f6 <HAL_ADC_IRQHandler+0xc4>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80015b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80015ba:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80015be:	d002      	beq.n	80015c6 <HAL_ADC_IRQHandler+0x94>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80015c0:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80015c2:	0550      	lsls	r0, r2, #21
 80015c4:	d417      	bmi.n	80015f6 <HAL_ADC_IRQHandler+0xc4>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80015c6:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80015c8:	0551      	lsls	r1, r2, #21
 80015ca:	d414      	bmi.n	80015f6 <HAL_ADC_IRQHandler+0xc4>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80015cc:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80015ce:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80015d2:	d110      	bne.n	80015f6 <HAL_ADC_IRQHandler+0xc4>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80015d4:	7e22      	ldrb	r2, [r4, #24]
 80015d6:	b972      	cbnz	r2, 80015f6 <HAL_ADC_IRQHandler+0xc4>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015de:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80015e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015e6:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80015e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015ea:	05da      	lsls	r2, r3, #23
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015ec:	bf5e      	ittt	pl
 80015ee:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 80015f0:	f043 0301 	orrpl.w	r3, r3, #1
 80015f4:	6423      	strpl	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80015f6:	4620      	mov	r0, r4
 80015f8:	f000 f8bc 	bl	8001774 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80015fc:	6823      	ldr	r3, [r4, #0]
 80015fe:	f06f 020c 	mvn.w	r2, #12
 8001602:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 8001604:	07f3      	lsls	r3, r6, #31
 8001606:	d510      	bpl.n	800162a <HAL_ADC_IRQHandler+0xf8>
 8001608:	0668      	lsls	r0, r5, #25
 800160a:	d50e      	bpl.n	800162a <HAL_ADC_IRQHandler+0xf8>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800160c:	6823      	ldr	r3, [r4, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	07d9      	lsls	r1, r3, #31
 8001612:	d50a      	bpl.n	800162a <HAL_ADC_IRQHandler+0xf8>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001614:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800161a:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800161c:	4620      	mov	r0, r4
 800161e:	f7ff ff86 	bl	800152e <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001622:	6823      	ldr	r3, [r4, #0]
 8001624:	f06f 0201 	mvn.w	r2, #1
 8001628:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 800162a:	06b2      	lsls	r2, r6, #26
 800162c:	d50e      	bpl.n	800164c <HAL_ADC_IRQHandler+0x11a>
 800162e:	016b      	lsls	r3, r5, #5
 8001630:	d50c      	bpl.n	800164c <HAL_ADC_IRQHandler+0x11a>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001632:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001634:	f043 0302 	orr.w	r3, r3, #2
 8001638:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800163a:	6823      	ldr	r3, [r4, #0]
 800163c:	f06f 0520 	mvn.w	r5, #32
 8001640:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8001642:	4620      	mov	r0, r4
 8001644:	f7ff ff74 	bl	8001530 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001648:	6823      	ldr	r3, [r4, #0]
 800164a:	601d      	str	r5, [r3, #0]
}
 800164c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001650 <HAL_ADC_ConfigChannel>:
{
 8001650:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8001652:	2300      	movs	r3, #0
 8001654:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001656:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800165a:	2b01      	cmp	r3, #1
 800165c:	d066      	beq.n	800172c <HAL_ADC_ConfigChannel+0xdc>
 800165e:	2301      	movs	r3, #1
 8001660:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001664:	680d      	ldr	r5, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001666:	6803      	ldr	r3, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001668:	688e      	ldr	r6, [r1, #8]
  if (sConfig->Channel > ADC_CHANNEL_9)
 800166a:	2d09      	cmp	r5, #9
 800166c:	b2ac      	uxth	r4, r5
 800166e:	d931      	bls.n	80016d4 <HAL_ADC_ConfigChannel+0x84>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001670:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8001674:	68df      	ldr	r7, [r3, #12]
 8001676:	3a1e      	subs	r2, #30
 8001678:	f04f 0c07 	mov.w	ip, #7
 800167c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001680:	ea27 070c 	bic.w	r7, r7, ip
 8001684:	60df      	str	r7, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001686:	68df      	ldr	r7, [r3, #12]
 8001688:	fa06 f202 	lsl.w	r2, r6, r2
 800168c:	433a      	orrs	r2, r7
 800168e:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 8001690:	6849      	ldr	r1, [r1, #4]
 8001692:	2906      	cmp	r1, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001694:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  if (sConfig->Rank < 7U)
 8001698:	d82c      	bhi.n	80016f4 <HAL_ADC_ConfigChannel+0xa4>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800169a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800169c:	3a05      	subs	r2, #5
 800169e:	261f      	movs	r6, #31
 80016a0:	4096      	lsls	r6, r2
 80016a2:	ea21 0106 	bic.w	r1, r1, r6
 80016a6:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016aa:	fa04 f202 	lsl.w	r2, r4, r2
 80016ae:	430a      	orrs	r2, r1
 80016b0:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016b2:	4a2c      	ldr	r2, [pc, #176]	; (8001764 <HAL_ADC_ConfigChannel+0x114>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d107      	bne.n	80016c8 <HAL_ADC_ConfigChannel+0x78>
 80016b8:	2d12      	cmp	r5, #18
 80016ba:	d139      	bne.n	8001730 <HAL_ADC_ConfigChannel+0xe0>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80016bc:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 80016c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016c4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  __HAL_UNLOCK(hadc);
 80016c8:	2300      	movs	r3, #0
 80016ca:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80016ce:	4618      	mov	r0, r3
}
 80016d0:	b003      	add	sp, #12
 80016d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016d4:	691f      	ldr	r7, [r3, #16]
 80016d6:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 80016da:	f04f 0c07 	mov.w	ip, #7
 80016de:	fa0c fc02 	lsl.w	ip, ip, r2
 80016e2:	ea27 070c 	bic.w	r7, r7, ip
 80016e6:	611f      	str	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016e8:	691f      	ldr	r7, [r3, #16]
 80016ea:	fa06 f202 	lsl.w	r2, r6, r2
 80016ee:	433a      	orrs	r2, r7
 80016f0:	611a      	str	r2, [r3, #16]
 80016f2:	e7cd      	b.n	8001690 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 80016f4:	290c      	cmp	r1, #12
 80016f6:	f04f 011f 	mov.w	r1, #31
 80016fa:	d80b      	bhi.n	8001714 <HAL_ADC_ConfigChannel+0xc4>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016fc:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80016fe:	3a23      	subs	r2, #35	; 0x23
 8001700:	4091      	lsls	r1, r2
 8001702:	ea26 0101 	bic.w	r1, r6, r1
 8001706:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001708:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800170a:	fa04 f202 	lsl.w	r2, r4, r2
 800170e:	430a      	orrs	r2, r1
 8001710:	631a      	str	r2, [r3, #48]	; 0x30
 8001712:	e7ce      	b.n	80016b2 <HAL_ADC_ConfigChannel+0x62>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001714:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8001716:	3a41      	subs	r2, #65	; 0x41
 8001718:	4091      	lsls	r1, r2
 800171a:	ea26 0101 	bic.w	r1, r6, r1
 800171e:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001720:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001722:	fa04 f202 	lsl.w	r2, r4, r2
 8001726:	430a      	orrs	r2, r1
 8001728:	62da      	str	r2, [r3, #44]	; 0x2c
 800172a:	e7c2      	b.n	80016b2 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 800172c:	2002      	movs	r0, #2
 800172e:	e7cf      	b.n	80016d0 <HAL_ADC_ConfigChannel+0x80>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001730:	f1a5 0310 	sub.w	r3, r5, #16
 8001734:	2b01      	cmp	r3, #1
 8001736:	d8c7      	bhi.n	80016c8 <HAL_ADC_ConfigChannel+0x78>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001738:	4a0b      	ldr	r2, [pc, #44]	; (8001768 <HAL_ADC_ConfigChannel+0x118>)
 800173a:	6853      	ldr	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800173c:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800173e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001742:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001744:	d1c0      	bne.n	80016c8 <HAL_ADC_ConfigChannel+0x78>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <HAL_ADC_ConfigChannel+0x11c>)
 8001748:	4a09      	ldr	r2, [pc, #36]	; (8001770 <HAL_ADC_ConfigChannel+0x120>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001750:	220a      	movs	r2, #10
 8001752:	4353      	muls	r3, r2
        counter--;
 8001754:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8001756:	9b01      	ldr	r3, [sp, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0b5      	beq.n	80016c8 <HAL_ADC_ConfigChannel+0x78>
        counter--;
 800175c:	9b01      	ldr	r3, [sp, #4]
 800175e:	3b01      	subs	r3, #1
 8001760:	e7f8      	b.n	8001754 <HAL_ADC_ConfigChannel+0x104>
 8001762:	bf00      	nop
 8001764:	40012000 	.word	0x40012000
 8001768:	40012300 	.word	0x40012300
 800176c:	20000804 	.word	0x20000804
 8001770:	000f4240 	.word	0x000f4240

08001774 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001774:	4770      	bx	lr
	...

08001778 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001778:	4907      	ldr	r1, [pc, #28]	; (8001798 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800177a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800177c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001780:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001782:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001784:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001788:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800178a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800178c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001794:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001796:	4770      	bx	lr
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800179c:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800179e:	b530      	push	{r4, r5, lr}
 80017a0:	68dc      	ldr	r4, [r3, #12]
 80017a2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a6:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017aa:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ac:	2d04      	cmp	r5, #4
 80017ae:	bf28      	it	cs
 80017b0:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b2:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b8:	bf8c      	ite	hi
 80017ba:	3c03      	subhi	r4, #3
 80017bc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017be:	fa03 f505 	lsl.w	r5, r3, r5
 80017c2:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c6:	40a3      	lsls	r3, r4
 80017c8:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 80017ce:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d4:	bfac      	ite	ge
 80017d6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017da:	4a08      	ldrlt	r2, [pc, #32]	; (80017fc <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017dc:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e0:	bfb8      	it	lt
 80017e2:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	bfaa      	itet	ge
 80017ea:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ee:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f0:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80017f4:	bd30      	pop	{r4, r5, pc}
 80017f6:	bf00      	nop
 80017f8:	e000ed00 	.word	0xe000ed00
 80017fc:	e000ed14 	.word	0xe000ed14

08001800 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001800:	2800      	cmp	r0, #0
 8001802:	db08      	blt.n	8001816 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001804:	0942      	lsrs	r2, r0, #5
 8001806:	2301      	movs	r3, #1
 8001808:	f000 001f 	and.w	r0, r0, #31
 800180c:	fa03 f000 	lsl.w	r0, r3, r0
 8001810:	4b01      	ldr	r3, [pc, #4]	; (8001818 <HAL_NVIC_EnableIRQ+0x18>)
 8001812:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001816:	4770      	bx	lr
 8001818:	e000e100 	.word	0xe000e100

0800181c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800181c:	3801      	subs	r0, #1
 800181e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001822:	d20b      	bcs.n	800183c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001824:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001828:	4a05      	ldr	r2, [pc, #20]	; (8001840 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800182a:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182c:	21f0      	movs	r1, #240	; 0xf0
 800182e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001832:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001834:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001836:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001838:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800183a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800183c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800183e:	4770      	bx	lr
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001844:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if (hdac == NULL)
 8001846:	4604      	mov	r4, r0
 8001848:	b168      	cbz	r0, 8001866 <HAL_DAC_Init+0x22>
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800184a:	7903      	ldrb	r3, [r0, #4]
 800184c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001850:	b913      	cbnz	r3, 8001858 <HAL_DAC_Init+0x14>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001852:	7142      	strb	r2, [r0, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001854:	f7ff fc4c 	bl	80010f0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001858:	2302      	movs	r3, #2
 800185a:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800185c:	2000      	movs	r0, #0

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800185e:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001860:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8001862:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 8001864:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001866:	2001      	movs	r0, #1
 8001868:	e7fc      	b.n	8001864 <HAL_DAC_Init+0x20>

0800186a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800186a:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800186c:	7943      	ldrb	r3, [r0, #5]
 800186e:	2b01      	cmp	r3, #1
 8001870:	f04f 0302 	mov.w	r3, #2
 8001874:	d016      	beq.n	80018a4 <HAL_DAC_Start+0x3a>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001876:	7103      	strb	r3, [r0, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001878:	6803      	ldr	r3, [r0, #0]
 800187a:	f001 0410 	and.w	r4, r1, #16
 800187e:	681d      	ldr	r5, [r3, #0]
 8001880:	2201      	movs	r2, #1
 8001882:	40a2      	lsls	r2, r4
 8001884:	432a      	orrs	r2, r5
 8001886:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001888:	b971      	cbnz	r1, 80018a8 <HAL_DAC_Start+0x3e>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	f002 023c 	and.w	r2, r2, #60	; 0x3c
 8001890:	2a3c      	cmp	r2, #60	; 0x3c
 8001892:	d103      	bne.n	800189c <HAL_DAC_Start+0x32>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001894:	685a      	ldr	r2, [r3, #4]
 8001896:	f042 0201 	orr.w	r2, r2, #1
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800189a:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800189c:	2301      	movs	r3, #1
 800189e:	7103      	strb	r3, [r0, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80018a0:	2300      	movs	r3, #0
 80018a2:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 80018a4:	4618      	mov	r0, r3

  /* Return function status */
  return HAL_OK;
}
 80018a6:	bd30      	pop	{r4, r5, pc}
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80018a8:	6819      	ldr	r1, [r3, #0]
 80018aa:	223c      	movs	r2, #60	; 0x3c
 80018ac:	f401 1170 	and.w	r1, r1, #3932160	; 0x3c0000
 80018b0:	40a2      	lsls	r2, r4
 80018b2:	4291      	cmp	r1, r2
 80018b4:	d1f2      	bne.n	800189c <HAL_DAC_Start+0x32>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80018b6:	685a      	ldr	r2, [r3, #4]
 80018b8:	f042 0202 	orr.w	r2, r2, #2
 80018bc:	e7ed      	b.n	800189a <HAL_DAC_Start+0x30>

080018be <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80018be:	b513      	push	{r0, r1, r4, lr}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80018c0:	6800      	ldr	r0, [r0, #0]
  __IO uint32_t tmp = 0UL;
 80018c2:	2400      	movs	r4, #0
 80018c4:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance;
 80018c6:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 80018c8:	b941      	cbnz	r1, 80018dc <HAL_DAC_SetValue+0x1e>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80018ca:	9901      	ldr	r1, [sp, #4]
 80018cc:	3108      	adds	r1, #8
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80018ce:	440a      	add	r2, r1
 80018d0:	9201      	str	r2, [sp, #4]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80018d2:	9a01      	ldr	r2, [sp, #4]

  /* Return function status */
  return HAL_OK;
}
 80018d4:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 80018d6:	6013      	str	r3, [r2, #0]
}
 80018d8:	b002      	add	sp, #8
 80018da:	bd10      	pop	{r4, pc}
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80018dc:	9901      	ldr	r1, [sp, #4]
 80018de:	3114      	adds	r1, #20
 80018e0:	e7f5      	b.n	80018ce <HAL_DAC_SetValue+0x10>

080018e2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80018e2:	b530      	push	{r4, r5, lr}
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80018e4:	7943      	ldrb	r3, [r0, #5]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	f04f 0302 	mov.w	r3, #2
 80018ec:	d01a      	beq.n	8001924 <HAL_DAC_ConfigChannel+0x42>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80018ee:	6804      	ldr	r4, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 80018f0:	7103      	strb	r3, [r0, #4]
  tmpreg1 = hdac->Instance->CR;
 80018f2:	6823      	ldr	r3, [r4, #0]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80018f4:	f002 0210 	and.w	r2, r2, #16
 80018f8:	f640 75fe 	movw	r5, #4094	; 0xffe
 80018fc:	4095      	lsls	r5, r2
 80018fe:	ea23 0505 	bic.w	r5, r3, r5
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001902:	e9d1 3100 	ldrd	r3, r1, [r1]
 8001906:	430b      	orrs	r3, r1
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001908:	4093      	lsls	r3, r2
 800190a:	432b      	orrs	r3, r5
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800190c:	6023      	str	r3, [r4, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800190e:	6823      	ldr	r3, [r4, #0]
 8001910:	21c0      	movs	r1, #192	; 0xc0
 8001912:	fa01 f202 	lsl.w	r2, r1, r2
 8001916:	ea23 0202 	bic.w	r2, r3, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800191a:	2301      	movs	r3, #1
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800191c:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 800191e:	7103      	strb	r3, [r0, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001920:	2300      	movs	r3, #0
 8001922:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 8001924:	4618      	mov	r0, r3

  /* Return function status */
  return HAL_OK;
}
 8001926:	bd30      	pop	{r4, r5, pc}

08001928 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001928:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192c:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8001ad8 <HAL_GPIO_Init+0x1b0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001930:	4a67      	ldr	r2, [pc, #412]	; (8001ad0 <HAL_GPIO_Init+0x1a8>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001932:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001934:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8001936:	2401      	movs	r4, #1
 8001938:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800193a:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 800193e:	43ac      	bics	r4, r5
 8001940:	f040 80b1 	bne.w	8001aa6 <HAL_GPIO_Init+0x17e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001944:	684d      	ldr	r5, [r1, #4]
 8001946:	f005 0403 	and.w	r4, r5, #3
 800194a:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800194e:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001950:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001952:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001956:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001958:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800195c:	d834      	bhi.n	80019c8 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 800195e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001960:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001964:	68cf      	ldr	r7, [r1, #12]
 8001966:	fa07 f708 	lsl.w	r7, r7, r8
 800196a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 800196e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001970:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001972:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001976:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800197a:	409f      	lsls	r7, r3
 800197c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001980:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001982:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001984:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001988:	688f      	ldr	r7, [r1, #8]
 800198a:	fa07 f708 	lsl.w	r7, r7, r8
 800198e:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001992:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8001994:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001996:	d119      	bne.n	80019cc <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8001998:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800199c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019a0:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80019a4:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019a8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80019ac:	f04f 0e0f 	mov.w	lr, #15
 80019b0:	fa0e fe0b 	lsl.w	lr, lr, fp
 80019b4:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019b8:	690f      	ldr	r7, [r1, #16]
 80019ba:	fa07 f70b 	lsl.w	r7, r7, fp
 80019be:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 80019c2:	f8ca 7020 	str.w	r7, [sl, #32]
 80019c6:	e001      	b.n	80019cc <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019c8:	2c03      	cmp	r4, #3
 80019ca:	d1da      	bne.n	8001982 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 80019cc:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019ce:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019d2:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019d4:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019d6:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 80019da:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019dc:	d063      	beq.n	8001aa6 <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019de:	f04f 0a00 	mov.w	sl, #0
 80019e2:	f8cd a004 	str.w	sl, [sp, #4]
 80019e6:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ea:	4c3a      	ldr	r4, [pc, #232]	; (8001ad4 <HAL_GPIO_Init+0x1ac>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ec:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 80019f0:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 80019f4:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 80019f8:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 80019fc:	9601      	str	r6, [sp, #4]
 80019fe:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001a00:	f023 0603 	bic.w	r6, r3, #3
 8001a04:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001a08:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a0c:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001a10:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a14:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001a18:	270f      	movs	r7, #15
 8001a1a:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a1e:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a20:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a24:	d046      	beq.n	8001ab4 <HAL_GPIO_Init+0x18c>
 8001a26:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001a2a:	42a0      	cmp	r0, r4
 8001a2c:	d044      	beq.n	8001ab8 <HAL_GPIO_Init+0x190>
 8001a2e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001a32:	42a0      	cmp	r0, r4
 8001a34:	d042      	beq.n	8001abc <HAL_GPIO_Init+0x194>
 8001a36:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001a3a:	42a0      	cmp	r0, r4
 8001a3c:	d040      	beq.n	8001ac0 <HAL_GPIO_Init+0x198>
 8001a3e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001a42:	42a0      	cmp	r0, r4
 8001a44:	d03e      	beq.n	8001ac4 <HAL_GPIO_Init+0x19c>
 8001a46:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001a4a:	42a0      	cmp	r0, r4
 8001a4c:	d03c      	beq.n	8001ac8 <HAL_GPIO_Init+0x1a0>
 8001a4e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001a52:	42a0      	cmp	r0, r4
 8001a54:	d03a      	beq.n	8001acc <HAL_GPIO_Init+0x1a4>
 8001a56:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001a5a:	42a0      	cmp	r0, r4
 8001a5c:	bf0c      	ite	eq
 8001a5e:	2407      	moveq	r4, #7
 8001a60:	2408      	movne	r4, #8
 8001a62:	fa04 f40e 	lsl.w	r4, r4, lr
 8001a66:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a68:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 8001a6a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001a6c:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a70:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8001a72:	bf54      	ite	pl
 8001a74:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001a76:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8001a7a:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8001a7c:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a7e:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8001a80:	bf54      	ite	pl
 8001a82:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001a84:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8001a88:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8001a8a:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a8c:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8001a8e:	bf54      	ite	pl
 8001a90:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001a92:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8001a96:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a98:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a9a:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8001a9c:	bf54      	ite	pl
 8001a9e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001aa0:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8001aa4:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	2b10      	cmp	r3, #16
 8001aaa:	f47f af43 	bne.w	8001934 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8001aae:	b003      	add	sp, #12
 8001ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ab4:	4654      	mov	r4, sl
 8001ab6:	e7d4      	b.n	8001a62 <HAL_GPIO_Init+0x13a>
 8001ab8:	2401      	movs	r4, #1
 8001aba:	e7d2      	b.n	8001a62 <HAL_GPIO_Init+0x13a>
 8001abc:	2402      	movs	r4, #2
 8001abe:	e7d0      	b.n	8001a62 <HAL_GPIO_Init+0x13a>
 8001ac0:	2403      	movs	r4, #3
 8001ac2:	e7ce      	b.n	8001a62 <HAL_GPIO_Init+0x13a>
 8001ac4:	2404      	movs	r4, #4
 8001ac6:	e7cc      	b.n	8001a62 <HAL_GPIO_Init+0x13a>
 8001ac8:	2405      	movs	r4, #5
 8001aca:	e7ca      	b.n	8001a62 <HAL_GPIO_Init+0x13a>
 8001acc:	2406      	movs	r4, #6
 8001ace:	e7c8      	b.n	8001a62 <HAL_GPIO_Init+0x13a>
 8001ad0:	40013c00 	.word	0x40013c00
 8001ad4:	40020000 	.word	0x40020000
 8001ad8:	40023800 	.word	0x40023800

08001adc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001adc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ae0:	4604      	mov	r4, r0
 8001ae2:	b340      	cbz	r0, 8001b36 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ae4:	6803      	ldr	r3, [r0, #0]
 8001ae6:	07dd      	lsls	r5, r3, #31
 8001ae8:	d410      	bmi.n	8001b0c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aea:	6823      	ldr	r3, [r4, #0]
 8001aec:	0798      	lsls	r0, r3, #30
 8001aee:	d45e      	bmi.n	8001bae <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001af0:	6823      	ldr	r3, [r4, #0]
 8001af2:	071a      	lsls	r2, r3, #28
 8001af4:	f100 80a0 	bmi.w	8001c38 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af8:	6823      	ldr	r3, [r4, #0]
 8001afa:	075b      	lsls	r3, r3, #29
 8001afc:	f100 80c0 	bmi.w	8001c80 <HAL_RCC_OscConfig+0x1a4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b00:	69a0      	ldr	r0, [r4, #24]
 8001b02:	2800      	cmp	r0, #0
 8001b04:	f040 8128 	bne.w	8001d58 <HAL_RCC_OscConfig+0x27c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001b08:	2000      	movs	r0, #0
 8001b0a:	e02b      	b.n	8001b64 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b0c:	4b8f      	ldr	r3, [pc, #572]	; (8001d4c <HAL_RCC_OscConfig+0x270>)
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	f002 020c 	and.w	r2, r2, #12
 8001b14:	2a04      	cmp	r2, #4
 8001b16:	d007      	beq.n	8001b28 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b18:	689a      	ldr	r2, [r3, #8]
 8001b1a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b1e:	2a08      	cmp	r2, #8
 8001b20:	d10b      	bne.n	8001b3a <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	0251      	lsls	r1, r2, #9
 8001b26:	d508      	bpl.n	8001b3a <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b28:	4b88      	ldr	r3, [pc, #544]	; (8001d4c <HAL_RCC_OscConfig+0x270>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	039a      	lsls	r2, r3, #14
 8001b2e:	d5dc      	bpl.n	8001aea <HAL_RCC_OscConfig+0xe>
 8001b30:	6863      	ldr	r3, [r4, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1d9      	bne.n	8001aea <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8001b36:	2001      	movs	r0, #1
 8001b38:	e014      	b.n	8001b64 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b3a:	6862      	ldr	r2, [r4, #4]
 8001b3c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001b40:	d113      	bne.n	8001b6a <HAL_RCC_OscConfig+0x8e>
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001b48:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b4a:	f7ff fbb7 	bl	80012bc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4e:	4e7f      	ldr	r6, [pc, #508]	; (8001d4c <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8001b50:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b52:	6833      	ldr	r3, [r6, #0]
 8001b54:	039b      	lsls	r3, r3, #14
 8001b56:	d4c8      	bmi.n	8001aea <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b58:	f7ff fbb0 	bl	80012bc <HAL_GetTick>
 8001b5c:	1b40      	subs	r0, r0, r5
 8001b5e:	2864      	cmp	r0, #100	; 0x64
 8001b60:	d9f7      	bls.n	8001b52 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8001b62:	2003      	movs	r0, #3
}
 8001b64:	b002      	add	sp, #8
 8001b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b6a:	4d78      	ldr	r5, [pc, #480]	; (8001d4c <HAL_RCC_OscConfig+0x270>)
 8001b6c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001b70:	682b      	ldr	r3, [r5, #0]
 8001b72:	d107      	bne.n	8001b84 <HAL_RCC_OscConfig+0xa8>
 8001b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b78:	602b      	str	r3, [r5, #0]
 8001b7a:	682b      	ldr	r3, [r5, #0]
 8001b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b80:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b82:	e7e2      	b.n	8001b4a <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b88:	602b      	str	r3, [r5, #0]
 8001b8a:	682b      	ldr	r3, [r5, #0]
 8001b8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b90:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b92:	2a00      	cmp	r2, #0
 8001b94:	d1d9      	bne.n	8001b4a <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8001b96:	f7ff fb91 	bl	80012bc <HAL_GetTick>
 8001b9a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b9c:	682b      	ldr	r3, [r5, #0]
 8001b9e:	039f      	lsls	r7, r3, #14
 8001ba0:	d5a3      	bpl.n	8001aea <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ba2:	f7ff fb8b 	bl	80012bc <HAL_GetTick>
 8001ba6:	1b80      	subs	r0, r0, r6
 8001ba8:	2864      	cmp	r0, #100	; 0x64
 8001baa:	d9f7      	bls.n	8001b9c <HAL_RCC_OscConfig+0xc0>
 8001bac:	e7d9      	b.n	8001b62 <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bae:	4b67      	ldr	r3, [pc, #412]	; (8001d4c <HAL_RCC_OscConfig+0x270>)
 8001bb0:	689a      	ldr	r2, [r3, #8]
 8001bb2:	f012 0f0c 	tst.w	r2, #12
 8001bb6:	d007      	beq.n	8001bc8 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bbe:	2a08      	cmp	r2, #8
 8001bc0:	d111      	bne.n	8001be6 <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	025e      	lsls	r6, r3, #9
 8001bc6:	d40e      	bmi.n	8001be6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc8:	4a60      	ldr	r2, [pc, #384]	; (8001d4c <HAL_RCC_OscConfig+0x270>)
 8001bca:	6813      	ldr	r3, [r2, #0]
 8001bcc:	079d      	lsls	r5, r3, #30
 8001bce:	d502      	bpl.n	8001bd6 <HAL_RCC_OscConfig+0xfa>
 8001bd0:	68e3      	ldr	r3, [r4, #12]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d1af      	bne.n	8001b36 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd6:	6813      	ldr	r3, [r2, #0]
 8001bd8:	6921      	ldr	r1, [r4, #16]
 8001bda:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001bde:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001be2:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be4:	e784      	b.n	8001af0 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001be6:	68e2      	ldr	r2, [r4, #12]
 8001be8:	4b59      	ldr	r3, [pc, #356]	; (8001d50 <HAL_RCC_OscConfig+0x274>)
 8001bea:	b1b2      	cbz	r2, 8001c1a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8001bec:	2201      	movs	r2, #1
 8001bee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001bf0:	f7ff fb64 	bl	80012bc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf4:	4d55      	ldr	r5, [pc, #340]	; (8001d4c <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8001bf6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf8:	682b      	ldr	r3, [r5, #0]
 8001bfa:	0798      	lsls	r0, r3, #30
 8001bfc:	d507      	bpl.n	8001c0e <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfe:	682b      	ldr	r3, [r5, #0]
 8001c00:	6922      	ldr	r2, [r4, #16]
 8001c02:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001c06:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001c0a:	602b      	str	r3, [r5, #0]
 8001c0c:	e770      	b.n	8001af0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c0e:	f7ff fb55 	bl	80012bc <HAL_GetTick>
 8001c12:	1b80      	subs	r0, r0, r6
 8001c14:	2802      	cmp	r0, #2
 8001c16:	d9ef      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x11c>
 8001c18:	e7a3      	b.n	8001b62 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8001c1a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c1c:	f7ff fb4e 	bl	80012bc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c20:	4e4a      	ldr	r6, [pc, #296]	; (8001d4c <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8001c22:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c24:	6833      	ldr	r3, [r6, #0]
 8001c26:	0799      	lsls	r1, r3, #30
 8001c28:	f57f af62 	bpl.w	8001af0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c2c:	f7ff fb46 	bl	80012bc <HAL_GetTick>
 8001c30:	1b40      	subs	r0, r0, r5
 8001c32:	2802      	cmp	r0, #2
 8001c34:	d9f6      	bls.n	8001c24 <HAL_RCC_OscConfig+0x148>
 8001c36:	e794      	b.n	8001b62 <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c38:	6962      	ldr	r2, [r4, #20]
 8001c3a:	4b45      	ldr	r3, [pc, #276]	; (8001d50 <HAL_RCC_OscConfig+0x274>)
 8001c3c:	b182      	cbz	r2, 8001c60 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8001c44:	f7ff fb3a 	bl	80012bc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c48:	4e40      	ldr	r6, [pc, #256]	; (8001d4c <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8001c4a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c4c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001c4e:	079f      	lsls	r7, r3, #30
 8001c50:	f53f af52 	bmi.w	8001af8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c54:	f7ff fb32 	bl	80012bc <HAL_GetTick>
 8001c58:	1b40      	subs	r0, r0, r5
 8001c5a:	2802      	cmp	r0, #2
 8001c5c:	d9f6      	bls.n	8001c4c <HAL_RCC_OscConfig+0x170>
 8001c5e:	e780      	b.n	8001b62 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8001c60:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8001c64:	f7ff fb2a 	bl	80012bc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c68:	4e38      	ldr	r6, [pc, #224]	; (8001d4c <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8001c6a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c6c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001c6e:	0798      	lsls	r0, r3, #30
 8001c70:	f57f af42 	bpl.w	8001af8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c74:	f7ff fb22 	bl	80012bc <HAL_GetTick>
 8001c78:	1b40      	subs	r0, r0, r5
 8001c7a:	2802      	cmp	r0, #2
 8001c7c:	d9f6      	bls.n	8001c6c <HAL_RCC_OscConfig+0x190>
 8001c7e:	e770      	b.n	8001b62 <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c80:	4b32      	ldr	r3, [pc, #200]	; (8001d4c <HAL_RCC_OscConfig+0x270>)
 8001c82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c84:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001c88:	d128      	bne.n	8001cdc <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c8a:	9201      	str	r2, [sp, #4]
 8001c8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c8e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c92:	641a      	str	r2, [r3, #64]	; 0x40
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9a:	9301      	str	r3, [sp, #4]
 8001c9c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001c9e:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca0:	4d2c      	ldr	r5, [pc, #176]	; (8001d54 <HAL_RCC_OscConfig+0x278>)
 8001ca2:	682b      	ldr	r3, [r5, #0]
 8001ca4:	05d9      	lsls	r1, r3, #23
 8001ca6:	d51b      	bpl.n	8001ce0 <HAL_RCC_OscConfig+0x204>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca8:	68a3      	ldr	r3, [r4, #8]
 8001caa:	4d28      	ldr	r5, [pc, #160]	; (8001d4c <HAL_RCC_OscConfig+0x270>)
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d127      	bne.n	8001d00 <HAL_RCC_OscConfig+0x224>
 8001cb0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001cb2:	f043 0301 	orr.w	r3, r3, #1
 8001cb6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001cb8:	f7ff fb00 	bl	80012bc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cbc:	4e23      	ldr	r6, [pc, #140]	; (8001d4c <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8001cbe:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cc0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc4:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001cc6:	079b      	lsls	r3, r3, #30
 8001cc8:	d539      	bpl.n	8001d3e <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001cca:	2f00      	cmp	r7, #0
 8001ccc:	f43f af18 	beq.w	8001b00 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cd0:	4a1e      	ldr	r2, [pc, #120]	; (8001d4c <HAL_RCC_OscConfig+0x270>)
 8001cd2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001cd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cda:	e711      	b.n	8001b00 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001cdc:	2700      	movs	r7, #0
 8001cde:	e7df      	b.n	8001ca0 <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ce0:	682b      	ldr	r3, [r5, #0]
 8001ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001ce8:	f7ff fae8 	bl	80012bc <HAL_GetTick>
 8001cec:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cee:	682b      	ldr	r3, [r5, #0]
 8001cf0:	05da      	lsls	r2, r3, #23
 8001cf2:	d4d9      	bmi.n	8001ca8 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf4:	f7ff fae2 	bl	80012bc <HAL_GetTick>
 8001cf8:	1b80      	subs	r0, r0, r6
 8001cfa:	2802      	cmp	r0, #2
 8001cfc:	d9f7      	bls.n	8001cee <HAL_RCC_OscConfig+0x212>
 8001cfe:	e730      	b.n	8001b62 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d00:	2b05      	cmp	r3, #5
 8001d02:	d104      	bne.n	8001d0e <HAL_RCC_OscConfig+0x232>
 8001d04:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001d06:	f043 0304 	orr.w	r3, r3, #4
 8001d0a:	672b      	str	r3, [r5, #112]	; 0x70
 8001d0c:	e7d0      	b.n	8001cb0 <HAL_RCC_OscConfig+0x1d4>
 8001d0e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001d10:	f022 0201 	bic.w	r2, r2, #1
 8001d14:	672a      	str	r2, [r5, #112]	; 0x70
 8001d16:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001d18:	f022 0204 	bic.w	r2, r2, #4
 8001d1c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1ca      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x1dc>
      tickstart = HAL_GetTick();
 8001d22:	f7ff facb 	bl	80012bc <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d26:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001d2a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d2c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001d2e:	0798      	lsls	r0, r3, #30
 8001d30:	d5cb      	bpl.n	8001cca <HAL_RCC_OscConfig+0x1ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d32:	f7ff fac3 	bl	80012bc <HAL_GetTick>
 8001d36:	1b80      	subs	r0, r0, r6
 8001d38:	4540      	cmp	r0, r8
 8001d3a:	d9f7      	bls.n	8001d2c <HAL_RCC_OscConfig+0x250>
 8001d3c:	e711      	b.n	8001b62 <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d3e:	f7ff fabd 	bl	80012bc <HAL_GetTick>
 8001d42:	1b40      	subs	r0, r0, r5
 8001d44:	4540      	cmp	r0, r8
 8001d46:	d9bd      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x1e8>
 8001d48:	e70b      	b.n	8001b62 <HAL_RCC_OscConfig+0x86>
 8001d4a:	bf00      	nop
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	42470000 	.word	0x42470000
 8001d54:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d58:	4d36      	ldr	r5, [pc, #216]	; (8001e34 <HAL_RCC_OscConfig+0x358>)
 8001d5a:	68ab      	ldr	r3, [r5, #8]
 8001d5c:	f003 030c 	and.w	r3, r3, #12
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	d03d      	beq.n	8001de0 <HAL_RCC_OscConfig+0x304>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d64:	4b34      	ldr	r3, [pc, #208]	; (8001e38 <HAL_RCC_OscConfig+0x35c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001d6a:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d6c:	d12b      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x2ea>
        tickstart = HAL_GetTick();
 8001d6e:	f7ff faa5 	bl	80012bc <HAL_GetTick>
 8001d72:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d74:	682b      	ldr	r3, [r5, #0]
 8001d76:	0199      	lsls	r1, r3, #6
 8001d78:	d41f      	bmi.n	8001dba <HAL_RCC_OscConfig+0x2de>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d7a:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d82:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001d86:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001d88:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001d8c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001d8e:	0852      	lsrs	r2, r2, #1
 8001d90:	3a01      	subs	r2, #1
 8001d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001d96:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001d98:	4b27      	ldr	r3, [pc, #156]	; (8001e38 <HAL_RCC_OscConfig+0x35c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d9a:	4d26      	ldr	r5, [pc, #152]	; (8001e34 <HAL_RCC_OscConfig+0x358>)
        __HAL_RCC_PLL_ENABLE();
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001da0:	f7ff fa8c 	bl	80012bc <HAL_GetTick>
 8001da4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da6:	682b      	ldr	r3, [r5, #0]
 8001da8:	019a      	lsls	r2, r3, #6
 8001daa:	f53f aead 	bmi.w	8001b08 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dae:	f7ff fa85 	bl	80012bc <HAL_GetTick>
 8001db2:	1b00      	subs	r0, r0, r4
 8001db4:	2802      	cmp	r0, #2
 8001db6:	d9f6      	bls.n	8001da6 <HAL_RCC_OscConfig+0x2ca>
 8001db8:	e6d3      	b.n	8001b62 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dba:	f7ff fa7f 	bl	80012bc <HAL_GetTick>
 8001dbe:	1b80      	subs	r0, r0, r6
 8001dc0:	2802      	cmp	r0, #2
 8001dc2:	d9d7      	bls.n	8001d74 <HAL_RCC_OscConfig+0x298>
 8001dc4:	e6cd      	b.n	8001b62 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8001dc6:	f7ff fa79 	bl	80012bc <HAL_GetTick>
 8001dca:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dcc:	682b      	ldr	r3, [r5, #0]
 8001dce:	019b      	lsls	r3, r3, #6
 8001dd0:	f57f ae9a 	bpl.w	8001b08 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd4:	f7ff fa72 	bl	80012bc <HAL_GetTick>
 8001dd8:	1b00      	subs	r0, r0, r4
 8001dda:	2802      	cmp	r0, #2
 8001ddc:	d9f6      	bls.n	8001dcc <HAL_RCC_OscConfig+0x2f0>
 8001dde:	e6c0      	b.n	8001b62 <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001de0:	2801      	cmp	r0, #1
 8001de2:	f43f aebf 	beq.w	8001b64 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 8001de6:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001de8:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dea:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dee:	4291      	cmp	r1, r2
 8001df0:	f47f aea1 	bne.w	8001b36 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df4:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001df6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dfa:	428a      	cmp	r2, r1
 8001dfc:	f47f ae9b 	bne.w	8001b36 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e00:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e02:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001e06:	401a      	ands	r2, r3
 8001e08:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001e0c:	f47f ae93 	bne.w	8001b36 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e10:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001e12:	0852      	lsrs	r2, r2, #1
 8001e14:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001e18:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e1a:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001e1e:	f47f ae8a 	bne.w	8001b36 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e22:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001e24:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e28:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001e2c:	f43f ae6c 	beq.w	8001b08 <HAL_RCC_OscConfig+0x2c>
 8001e30:	e681      	b.n	8001b36 <HAL_RCC_OscConfig+0x5a>
 8001e32:	bf00      	nop
 8001e34:	40023800 	.word	0x40023800
 8001e38:	42470000 	.word	0x42470000

08001e3c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e3c:	4913      	ldr	r1, [pc, #76]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001e3e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e40:	688b      	ldr	r3, [r1, #8]
 8001e42:	f003 030c 	and.w	r3, r3, #12
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d01c      	beq.n	8001e84 <HAL_RCC_GetSysClockFreq+0x48>
 8001e4a:	2b08      	cmp	r3, #8
 8001e4c:	d11c      	bne.n	8001e88 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e4e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e50:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e52:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e54:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e58:	bf14      	ite	ne
 8001e5a:	480d      	ldrne	r0, [pc, #52]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e5c:	480d      	ldreq	r0, [pc, #52]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e5e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001e62:	bf18      	it	ne
 8001e64:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e66:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e6a:	fba1 0100 	umull	r0, r1, r1, r0
 8001e6e:	f7fe fdc9 	bl	8000a04 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e72:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x50>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001e7e:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001e82:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e84:	4802      	ldr	r0, [pc, #8]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x54>)
 8001e86:	e7fc      	b.n	8001e82 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8001e88:	4802      	ldr	r0, [pc, #8]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8001e8a:	e7fa      	b.n	8001e82 <HAL_RCC_GetSysClockFreq+0x46>
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	007a1200 	.word	0x007a1200
 8001e94:	00f42400 	.word	0x00f42400

08001e98 <HAL_RCC_ClockConfig>:
{
 8001e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e9c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001e9e:	4604      	mov	r4, r0
 8001ea0:	b910      	cbnz	r0, 8001ea8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001ea2:	2001      	movs	r0, #1
}
 8001ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ea8:	4b44      	ldr	r3, [pc, #272]	; (8001fbc <HAL_RCC_ClockConfig+0x124>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	f002 0207 	and.w	r2, r2, #7
 8001eb0:	428a      	cmp	r2, r1
 8001eb2:	d328      	bcc.n	8001f06 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb4:	6822      	ldr	r2, [r4, #0]
 8001eb6:	0797      	lsls	r7, r2, #30
 8001eb8:	d42d      	bmi.n	8001f16 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eba:	07d0      	lsls	r0, r2, #31
 8001ebc:	d441      	bmi.n	8001f42 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ebe:	4b3f      	ldr	r3, [pc, #252]	; (8001fbc <HAL_RCC_ClockConfig+0x124>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	f002 0207 	and.w	r2, r2, #7
 8001ec6:	42aa      	cmp	r2, r5
 8001ec8:	d866      	bhi.n	8001f98 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eca:	6822      	ldr	r2, [r4, #0]
 8001ecc:	0751      	lsls	r1, r2, #29
 8001ece:	d46c      	bmi.n	8001faa <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed0:	0713      	lsls	r3, r2, #28
 8001ed2:	d507      	bpl.n	8001ee4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ed4:	4a3a      	ldr	r2, [pc, #232]	; (8001fc0 <HAL_RCC_ClockConfig+0x128>)
 8001ed6:	6921      	ldr	r1, [r4, #16]
 8001ed8:	6893      	ldr	r3, [r2, #8]
 8001eda:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001ede:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001ee2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ee4:	f7ff ffaa 	bl	8001e3c <HAL_RCC_GetSysClockFreq>
 8001ee8:	4b35      	ldr	r3, [pc, #212]	; (8001fc0 <HAL_RCC_ClockConfig+0x128>)
 8001eea:	4a36      	ldr	r2, [pc, #216]	; (8001fc4 <HAL_RCC_ClockConfig+0x12c>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001ef2:	5cd3      	ldrb	r3, [r2, r3]
 8001ef4:	40d8      	lsrs	r0, r3
 8001ef6:	4b34      	ldr	r3, [pc, #208]	; (8001fc8 <HAL_RCC_ClockConfig+0x130>)
 8001ef8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001efa:	4b34      	ldr	r3, [pc, #208]	; (8001fcc <HAL_RCC_ClockConfig+0x134>)
 8001efc:	6818      	ldr	r0, [r3, #0]
 8001efe:	f7ff f993 	bl	8001228 <HAL_InitTick>
  return HAL_OK;
 8001f02:	2000      	movs	r0, #0
 8001f04:	e7ce      	b.n	8001ea4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f06:	b2ca      	uxtb	r2, r1
 8001f08:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	428b      	cmp	r3, r1
 8001f12:	d1c6      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0xa>
 8001f14:	e7ce      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f16:	4b2a      	ldr	r3, [pc, #168]	; (8001fc0 <HAL_RCC_ClockConfig+0x128>)
 8001f18:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f1c:	bf1e      	ittt	ne
 8001f1e:	6899      	ldrne	r1, [r3, #8]
 8001f20:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8001f24:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f26:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f28:	bf42      	ittt	mi
 8001f2a:	6899      	ldrmi	r1, [r3, #8]
 8001f2c:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8001f30:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f32:	4923      	ldr	r1, [pc, #140]	; (8001fc0 <HAL_RCC_ClockConfig+0x128>)
 8001f34:	68a0      	ldr	r0, [r4, #8]
 8001f36:	688b      	ldr	r3, [r1, #8]
 8001f38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f3c:	4303      	orrs	r3, r0
 8001f3e:	608b      	str	r3, [r1, #8]
 8001f40:	e7bb      	b.n	8001eba <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f42:	6862      	ldr	r2, [r4, #4]
 8001f44:	4b1e      	ldr	r3, [pc, #120]	; (8001fc0 <HAL_RCC_ClockConfig+0x128>)
 8001f46:	2a01      	cmp	r2, #1
 8001f48:	d11c      	bne.n	8001f84 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f50:	d0a7      	beq.n	8001ea2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f52:	4e1b      	ldr	r6, [pc, #108]	; (8001fc0 <HAL_RCC_ClockConfig+0x128>)
 8001f54:	68b3      	ldr	r3, [r6, #8]
 8001f56:	f023 0303 	bic.w	r3, r3, #3
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001f5e:	f7ff f9ad 	bl	80012bc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f62:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001f66:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f68:	68b3      	ldr	r3, [r6, #8]
 8001f6a:	6862      	ldr	r2, [r4, #4]
 8001f6c:	f003 030c 	and.w	r3, r3, #12
 8001f70:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001f74:	d0a3      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f76:	f7ff f9a1 	bl	80012bc <HAL_GetTick>
 8001f7a:	1bc0      	subs	r0, r0, r7
 8001f7c:	4540      	cmp	r0, r8
 8001f7e:	d9f3      	bls.n	8001f68 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8001f80:	2003      	movs	r0, #3
 8001f82:	e78f      	b.n	8001ea4 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f84:	1e91      	subs	r1, r2, #2
 8001f86:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f88:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f8a:	d802      	bhi.n	8001f92 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f8c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001f90:	e7de      	b.n	8001f50 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f92:	f013 0f02 	tst.w	r3, #2
 8001f96:	e7db      	b.n	8001f50 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f98:	b2ea      	uxtb	r2, r5
 8001f9a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	42ab      	cmp	r3, r5
 8001fa4:	f47f af7d 	bne.w	8001ea2 <HAL_RCC_ClockConfig+0xa>
 8001fa8:	e78f      	b.n	8001eca <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001faa:	4905      	ldr	r1, [pc, #20]	; (8001fc0 <HAL_RCC_ClockConfig+0x128>)
 8001fac:	68e0      	ldr	r0, [r4, #12]
 8001fae:	688b      	ldr	r3, [r1, #8]
 8001fb0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001fb4:	4303      	orrs	r3, r0
 8001fb6:	608b      	str	r3, [r1, #8]
 8001fb8:	e78a      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x38>
 8001fba:	bf00      	nop
 8001fbc:	40023c00 	.word	0x40023c00
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	080024e8 	.word	0x080024e8
 8001fc8:	20000804 	.word	0x20000804
 8001fcc:	2000080c 	.word	0x2000080c

08001fd0 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fd0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d12c      	bne.n	8002032 <HAL_TIM_Base_Start+0x62>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fd8:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fda:	4a17      	ldr	r2, [pc, #92]	; (8002038 <HAL_TIM_Base_Start+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 8001fdc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fe0:	6803      	ldr	r3, [r0, #0]
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d01a      	beq.n	800201c <HAL_TIM_Base_Start+0x4c>
 8001fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fea:	d017      	beq.n	800201c <HAL_TIM_Base_Start+0x4c>
 8001fec:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d013      	beq.n	800201c <HAL_TIM_Base_Start+0x4c>
 8001ff4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d00f      	beq.n	800201c <HAL_TIM_Base_Start+0x4c>
 8001ffc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002000:	4293      	cmp	r3, r2
 8002002:	d00b      	beq.n	800201c <HAL_TIM_Base_Start+0x4c>
 8002004:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002008:	4293      	cmp	r3, r2
 800200a:	d007      	beq.n	800201c <HAL_TIM_Base_Start+0x4c>
 800200c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002010:	4293      	cmp	r3, r2
 8002012:	d003      	beq.n	800201c <HAL_TIM_Base_Start+0x4c>
 8002014:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002018:	4293      	cmp	r3, r2
 800201a:	d104      	bne.n	8002026 <HAL_TIM_Base_Start+0x56>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800201c:	689a      	ldr	r2, [r3, #8]
 800201e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002022:	2a06      	cmp	r2, #6
 8002024:	d003      	beq.n	800202e <HAL_TIM_Base_Start+0x5e>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	f042 0201 	orr.w	r2, r2, #1
 800202c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800202e:	2000      	movs	r0, #0
}
 8002030:	4770      	bx	lr
    return HAL_ERROR;
 8002032:	2001      	movs	r0, #1
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	40010000 	.word	0x40010000

0800203c <HAL_TIM_OC_DelayElapsedCallback>:
 800203c:	4770      	bx	lr

0800203e <HAL_TIM_IC_CaptureCallback>:
 800203e:	4770      	bx	lr

08002040 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002040:	4770      	bx	lr

08002042 <HAL_TIM_TriggerCallback>:
 8002042:	4770      	bx	lr

08002044 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002044:	6803      	ldr	r3, [r0, #0]
 8002046:	691a      	ldr	r2, [r3, #16]
 8002048:	0791      	lsls	r1, r2, #30
{
 800204a:	b510      	push	{r4, lr}
 800204c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800204e:	d50e      	bpl.n	800206e <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002050:	68da      	ldr	r2, [r3, #12]
 8002052:	0792      	lsls	r2, r2, #30
 8002054:	d50b      	bpl.n	800206e <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002056:	f06f 0202 	mvn.w	r2, #2
 800205a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800205c:	2201      	movs	r2, #1
 800205e:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	079b      	lsls	r3, r3, #30
 8002064:	d077      	beq.n	8002156 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002066:	f7ff ffea 	bl	800203e <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800206a:	2300      	movs	r3, #0
 800206c:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800206e:	6823      	ldr	r3, [r4, #0]
 8002070:	691a      	ldr	r2, [r3, #16]
 8002072:	0750      	lsls	r0, r2, #29
 8002074:	d510      	bpl.n	8002098 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	0751      	lsls	r1, r2, #29
 800207a:	d50d      	bpl.n	8002098 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800207c:	f06f 0204 	mvn.w	r2, #4
 8002080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002082:	2202      	movs	r2, #2
 8002084:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800208c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800208e:	d068      	beq.n	8002162 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002090:	f7ff ffd5 	bl	800203e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002094:	2300      	movs	r3, #0
 8002096:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002098:	6823      	ldr	r3, [r4, #0]
 800209a:	691a      	ldr	r2, [r3, #16]
 800209c:	0712      	lsls	r2, r2, #28
 800209e:	d50f      	bpl.n	80020c0 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	0710      	lsls	r0, r2, #28
 80020a4:	d50c      	bpl.n	80020c0 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020a6:	f06f 0208 	mvn.w	r2, #8
 80020aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020ac:	2204      	movs	r2, #4
 80020ae:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020b4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020b6:	d05a      	beq.n	800216e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80020b8:	f7ff ffc1 	bl	800203e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020bc:	2300      	movs	r3, #0
 80020be:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020c0:	6823      	ldr	r3, [r4, #0]
 80020c2:	691a      	ldr	r2, [r3, #16]
 80020c4:	06d2      	lsls	r2, r2, #27
 80020c6:	d510      	bpl.n	80020ea <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	06d0      	lsls	r0, r2, #27
 80020cc:	d50d      	bpl.n	80020ea <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020ce:	f06f 0210 	mvn.w	r2, #16
 80020d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020d4:	2208      	movs	r2, #8
 80020d6:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020de:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020e0:	d04b      	beq.n	800217a <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80020e2:	f7ff ffac 	bl	800203e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020e6:	2300      	movs	r3, #0
 80020e8:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020ea:	6823      	ldr	r3, [r4, #0]
 80020ec:	691a      	ldr	r2, [r3, #16]
 80020ee:	07d1      	lsls	r1, r2, #31
 80020f0:	d508      	bpl.n	8002104 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020f2:	68da      	ldr	r2, [r3, #12]
 80020f4:	07d2      	lsls	r2, r2, #31
 80020f6:	d505      	bpl.n	8002104 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020f8:	f06f 0201 	mvn.w	r2, #1
 80020fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020fe:	4620      	mov	r0, r4
 8002100:	f7fe ff98 	bl	8001034 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002104:	6823      	ldr	r3, [r4, #0]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	0610      	lsls	r0, r2, #24
 800210a:	d508      	bpl.n	800211e <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800210c:	68da      	ldr	r2, [r3, #12]
 800210e:	0611      	lsls	r1, r2, #24
 8002110:	d505      	bpl.n	800211e <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002112:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002116:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002118:	4620      	mov	r0, r4
 800211a:	f000 f9ac 	bl	8002476 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800211e:	6823      	ldr	r3, [r4, #0]
 8002120:	691a      	ldr	r2, [r3, #16]
 8002122:	0652      	lsls	r2, r2, #25
 8002124:	d508      	bpl.n	8002138 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002126:	68da      	ldr	r2, [r3, #12]
 8002128:	0650      	lsls	r0, r2, #25
 800212a:	d505      	bpl.n	8002138 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800212c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002132:	4620      	mov	r0, r4
 8002134:	f7ff ff85 	bl	8002042 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002138:	6823      	ldr	r3, [r4, #0]
 800213a:	691a      	ldr	r2, [r3, #16]
 800213c:	0691      	lsls	r1, r2, #26
 800213e:	d522      	bpl.n	8002186 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002140:	68da      	ldr	r2, [r3, #12]
 8002142:	0692      	lsls	r2, r2, #26
 8002144:	d51f      	bpl.n	8002186 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002146:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800214a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800214c:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800214e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8002152:	f000 b98f 	b.w	8002474 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002156:	f7ff ff71 	bl	800203c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800215a:	4620      	mov	r0, r4
 800215c:	f7ff ff70 	bl	8002040 <HAL_TIM_PWM_PulseFinishedCallback>
 8002160:	e783      	b.n	800206a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002162:	f7ff ff6b 	bl	800203c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002166:	4620      	mov	r0, r4
 8002168:	f7ff ff6a 	bl	8002040 <HAL_TIM_PWM_PulseFinishedCallback>
 800216c:	e792      	b.n	8002094 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800216e:	f7ff ff65 	bl	800203c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002172:	4620      	mov	r0, r4
 8002174:	f7ff ff64 	bl	8002040 <HAL_TIM_PWM_PulseFinishedCallback>
 8002178:	e7a0      	b.n	80020bc <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800217a:	f7ff ff5f 	bl	800203c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800217e:	4620      	mov	r0, r4
 8002180:	f7ff ff5e 	bl	8002040 <HAL_TIM_PWM_PulseFinishedCallback>
 8002184:	e7af      	b.n	80020e6 <HAL_TIM_IRQHandler+0xa2>
}
 8002186:	bd10      	pop	{r4, pc}

08002188 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002188:	4a30      	ldr	r2, [pc, #192]	; (800224c <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800218a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800218c:	4290      	cmp	r0, r2
 800218e:	d012      	beq.n	80021b6 <TIM_Base_SetConfig+0x2e>
 8002190:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002194:	d00f      	beq.n	80021b6 <TIM_Base_SetConfig+0x2e>
 8002196:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800219a:	4290      	cmp	r0, r2
 800219c:	d00b      	beq.n	80021b6 <TIM_Base_SetConfig+0x2e>
 800219e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021a2:	4290      	cmp	r0, r2
 80021a4:	d007      	beq.n	80021b6 <TIM_Base_SetConfig+0x2e>
 80021a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021aa:	4290      	cmp	r0, r2
 80021ac:	d003      	beq.n	80021b6 <TIM_Base_SetConfig+0x2e>
 80021ae:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80021b2:	4290      	cmp	r0, r2
 80021b4:	d119      	bne.n	80021ea <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80021b6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80021bc:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021be:	4a23      	ldr	r2, [pc, #140]	; (800224c <TIM_Base_SetConfig+0xc4>)
 80021c0:	4290      	cmp	r0, r2
 80021c2:	d029      	beq.n	8002218 <TIM_Base_SetConfig+0x90>
 80021c4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80021c8:	d026      	beq.n	8002218 <TIM_Base_SetConfig+0x90>
 80021ca:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80021ce:	4290      	cmp	r0, r2
 80021d0:	d022      	beq.n	8002218 <TIM_Base_SetConfig+0x90>
 80021d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021d6:	4290      	cmp	r0, r2
 80021d8:	d01e      	beq.n	8002218 <TIM_Base_SetConfig+0x90>
 80021da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021de:	4290      	cmp	r0, r2
 80021e0:	d01a      	beq.n	8002218 <TIM_Base_SetConfig+0x90>
 80021e2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80021e6:	4290      	cmp	r0, r2
 80021e8:	d016      	beq.n	8002218 <TIM_Base_SetConfig+0x90>
 80021ea:	4a19      	ldr	r2, [pc, #100]	; (8002250 <TIM_Base_SetConfig+0xc8>)
 80021ec:	4290      	cmp	r0, r2
 80021ee:	d013      	beq.n	8002218 <TIM_Base_SetConfig+0x90>
 80021f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021f4:	4290      	cmp	r0, r2
 80021f6:	d00f      	beq.n	8002218 <TIM_Base_SetConfig+0x90>
 80021f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021fc:	4290      	cmp	r0, r2
 80021fe:	d00b      	beq.n	8002218 <TIM_Base_SetConfig+0x90>
 8002200:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002204:	4290      	cmp	r0, r2
 8002206:	d007      	beq.n	8002218 <TIM_Base_SetConfig+0x90>
 8002208:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800220c:	4290      	cmp	r0, r2
 800220e:	d003      	beq.n	8002218 <TIM_Base_SetConfig+0x90>
 8002210:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002214:	4290      	cmp	r0, r2
 8002216:	d103      	bne.n	8002220 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002218:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800221a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800221e:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002220:	694a      	ldr	r2, [r1, #20]
 8002222:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002226:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002228:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800222a:	688b      	ldr	r3, [r1, #8]
 800222c:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800222e:	680b      	ldr	r3, [r1, #0]
 8002230:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002232:	4b06      	ldr	r3, [pc, #24]	; (800224c <TIM_Base_SetConfig+0xc4>)
 8002234:	4298      	cmp	r0, r3
 8002236:	d003      	beq.n	8002240 <TIM_Base_SetConfig+0xb8>
 8002238:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800223c:	4298      	cmp	r0, r3
 800223e:	d101      	bne.n	8002244 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002240:	690b      	ldr	r3, [r1, #16]
 8002242:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002244:	2301      	movs	r3, #1
 8002246:	6143      	str	r3, [r0, #20]
}
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	40010000 	.word	0x40010000
 8002250:	40014000 	.word	0x40014000

08002254 <HAL_TIM_Base_Init>:
{
 8002254:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002256:	4604      	mov	r4, r0
 8002258:	b330      	cbz	r0, 80022a8 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800225a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800225e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002262:	b91b      	cbnz	r3, 800226c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002264:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002268:	f7fe ff74 	bl	8001154 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800226c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800226e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002270:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002274:	1d21      	adds	r1, r4, #4
 8002276:	f7ff ff87 	bl	8002188 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800227a:	2301      	movs	r3, #1
 800227c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
 8002280:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002282:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002286:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800228a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800228e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002292:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002296:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800229a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800229e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80022a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80022a6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80022a8:	2001      	movs	r0, #1
 80022aa:	e7fc      	b.n	80022a6 <HAL_TIM_Base_Init+0x52>

080022ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80022ac:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80022ae:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022b0:	4311      	orrs	r1, r2
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022b2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022b6:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 80022ba:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022bc:	6083      	str	r3, [r0, #8]
}
 80022be:	bd10      	pop	{r4, pc}

080022c0 <HAL_TIM_ConfigClockSource>:
{
 80022c0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80022c2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80022c6:	2b01      	cmp	r3, #1
{
 80022c8:	4604      	mov	r4, r0
 80022ca:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80022ce:	f000 8091 	beq.w	80023f4 <HAL_TIM_ConfigClockSource+0x134>
 80022d2:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80022d4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 80022d8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80022dc:	6800      	ldr	r0, [r0, #0]
 80022de:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022e4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80022e8:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80022ea:	680b      	ldr	r3, [r1, #0]
 80022ec:	2b60      	cmp	r3, #96	; 0x60
 80022ee:	d052      	beq.n	8002396 <HAL_TIM_ConfigClockSource+0xd6>
 80022f0:	d833      	bhi.n	800235a <HAL_TIM_ConfigClockSource+0x9a>
 80022f2:	2b40      	cmp	r3, #64	; 0x40
 80022f4:	d067      	beq.n	80023c6 <HAL_TIM_ConfigClockSource+0x106>
 80022f6:	d816      	bhi.n	8002326 <HAL_TIM_ConfigClockSource+0x66>
 80022f8:	2b20      	cmp	r3, #32
 80022fa:	d00d      	beq.n	8002318 <HAL_TIM_ConfigClockSource+0x58>
 80022fc:	d80a      	bhi.n	8002314 <HAL_TIM_ConfigClockSource+0x54>
 80022fe:	f033 0110 	bics.w	r1, r3, #16
 8002302:	d009      	beq.n	8002318 <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 8002304:	2301      	movs	r3, #1
 8002306:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800230a:	2300      	movs	r3, #0
 800230c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002310:	4610      	mov	r0, r2
 8002312:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002314:	2b30      	cmp	r3, #48	; 0x30
 8002316:	d1f5      	bne.n	8002304 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 8002318:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800231a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800231e:	4313      	orrs	r3, r2
 8002320:	f043 0307 	orr.w	r3, r3, #7
 8002324:	e017      	b.n	8002356 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8002326:	2b50      	cmp	r3, #80	; 0x50
 8002328:	d1ec      	bne.n	8002304 <HAL_TIM_ConfigClockSource+0x44>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800232a:	684a      	ldr	r2, [r1, #4]
 800232c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800232e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002330:	6a05      	ldr	r5, [r0, #32]
 8002332:	f025 0501 	bic.w	r5, r5, #1
 8002336:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002338:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800233a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800233e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002342:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002346:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002348:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800234a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800234c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800234e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002352:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8002356:	6083      	str	r3, [r0, #8]
 8002358:	e011      	b.n	800237e <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 800235a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800235e:	d00e      	beq.n	800237e <HAL_TIM_ConfigClockSource+0xbe>
 8002360:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002364:	d00d      	beq.n	8002382 <HAL_TIM_ConfigClockSource+0xc2>
 8002366:	2b70      	cmp	r3, #112	; 0x70
 8002368:	d1cc      	bne.n	8002304 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 800236a:	68cb      	ldr	r3, [r1, #12]
 800236c:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8002370:	f7ff ff9c 	bl	80022ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002374:	6822      	ldr	r2, [r4, #0]
 8002376:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002378:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800237c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800237e:	2200      	movs	r2, #0
 8002380:	e7c0      	b.n	8002304 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8002382:	68cb      	ldr	r3, [r1, #12]
 8002384:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8002388:	f7ff ff90 	bl	80022ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800238c:	6822      	ldr	r2, [r4, #0]
 800238e:	6893      	ldr	r3, [r2, #8]
 8002390:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002394:	e7f2      	b.n	800237c <HAL_TIM_ConfigClockSource+0xbc>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002396:	684d      	ldr	r5, [r1, #4]
 8002398:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800239a:	6a01      	ldr	r1, [r0, #32]
 800239c:	f021 0110 	bic.w	r1, r1, #16
 80023a0:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023a2:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80023a4:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023a6:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80023ae:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023b2:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80023b6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80023b8:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80023ba:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80023bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023c0:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 80023c4:	e7c7      	b.n	8002356 <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023c6:	684a      	ldr	r2, [r1, #4]
 80023c8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80023ca:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023cc:	6a05      	ldr	r5, [r0, #32]
 80023ce:	f025 0501 	bic.w	r5, r5, #1
 80023d2:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023d4:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023d6:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023de:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80023e2:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80023e4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80023e6:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80023e8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80023ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023ee:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80023f2:	e7b0      	b.n	8002356 <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 80023f4:	461a      	mov	r2, r3
 80023f6:	e78b      	b.n	8002310 <HAL_TIM_ConfigClockSource+0x50>

080023f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023f8:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023fa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80023fe:	2b01      	cmp	r3, #1
 8002400:	f04f 0302 	mov.w	r3, #2
 8002404:	d032      	beq.n	800246c <HAL_TIMEx_MasterConfigSynchronization+0x74>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002406:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800240a:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800240c:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 800240e:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002410:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002412:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002416:	432c      	orrs	r4, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002418:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800241a:	4c15      	ldr	r4, [pc, #84]	; (8002470 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 800241c:	42a3      	cmp	r3, r4
 800241e:	d01a      	beq.n	8002456 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8002420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002424:	d017      	beq.n	8002456 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8002426:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 800242a:	42a3      	cmp	r3, r4
 800242c:	d013      	beq.n	8002456 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 800242e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002432:	42a3      	cmp	r3, r4
 8002434:	d00f      	beq.n	8002456 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8002436:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800243a:	42a3      	cmp	r3, r4
 800243c:	d00b      	beq.n	8002456 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 800243e:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8002442:	42a3      	cmp	r3, r4
 8002444:	d007      	beq.n	8002456 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8002446:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 800244a:	42a3      	cmp	r3, r4
 800244c:	d003      	beq.n	8002456 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 800244e:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8002452:	42a3      	cmp	r3, r4
 8002454:	d104      	bne.n	8002460 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002456:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002458:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800245c:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800245e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002460:	2301      	movs	r3, #1
 8002462:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002466:	2300      	movs	r3, #0
 8002468:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800246c:	4618      	mov	r0, r3

  return HAL_OK;
}
 800246e:	bd30      	pop	{r4, r5, pc}
 8002470:	40010000 	.word	0x40010000

08002474 <HAL_TIMEx_CommutCallback>:
 8002474:	4770      	bx	lr

08002476 <HAL_TIMEx_BreakCallback>:
 8002476:	4770      	bx	lr

08002478 <__libc_init_array>:
 8002478:	b570      	push	{r4, r5, r6, lr}
 800247a:	4d0d      	ldr	r5, [pc, #52]	; (80024b0 <__libc_init_array+0x38>)
 800247c:	4c0d      	ldr	r4, [pc, #52]	; (80024b4 <__libc_init_array+0x3c>)
 800247e:	1b64      	subs	r4, r4, r5
 8002480:	10a4      	asrs	r4, r4, #2
 8002482:	2600      	movs	r6, #0
 8002484:	42a6      	cmp	r6, r4
 8002486:	d109      	bne.n	800249c <__libc_init_array+0x24>
 8002488:	4d0b      	ldr	r5, [pc, #44]	; (80024b8 <__libc_init_array+0x40>)
 800248a:	4c0c      	ldr	r4, [pc, #48]	; (80024bc <__libc_init_array+0x44>)
 800248c:	f000 f820 	bl	80024d0 <_init>
 8002490:	1b64      	subs	r4, r4, r5
 8002492:	10a4      	asrs	r4, r4, #2
 8002494:	2600      	movs	r6, #0
 8002496:	42a6      	cmp	r6, r4
 8002498:	d105      	bne.n	80024a6 <__libc_init_array+0x2e>
 800249a:	bd70      	pop	{r4, r5, r6, pc}
 800249c:	f855 3b04 	ldr.w	r3, [r5], #4
 80024a0:	4798      	blx	r3
 80024a2:	3601      	adds	r6, #1
 80024a4:	e7ee      	b.n	8002484 <__libc_init_array+0xc>
 80024a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80024aa:	4798      	blx	r3
 80024ac:	3601      	adds	r6, #1
 80024ae:	e7f2      	b.n	8002496 <__libc_init_array+0x1e>
 80024b0:	08002500 	.word	0x08002500
 80024b4:	08002500 	.word	0x08002500
 80024b8:	08002500 	.word	0x08002500
 80024bc:	08002504 	.word	0x08002504

080024c0 <memset>:
 80024c0:	4402      	add	r2, r0
 80024c2:	4603      	mov	r3, r0
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d100      	bne.n	80024ca <memset+0xa>
 80024c8:	4770      	bx	lr
 80024ca:	f803 1b01 	strb.w	r1, [r3], #1
 80024ce:	e7f9      	b.n	80024c4 <memset+0x4>

080024d0 <_init>:
 80024d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024d2:	bf00      	nop
 80024d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024d6:	bc08      	pop	{r3}
 80024d8:	469e      	mov	lr, r3
 80024da:	4770      	bx	lr

080024dc <_fini>:
 80024dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024de:	bf00      	nop
 80024e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024e2:	bc08      	pop	{r3}
 80024e4:	469e      	mov	lr, r3
 80024e6:	4770      	bx	lr
